package com.focus.Pages;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class Focus10FinancialsReportsPage extends BaseEngine {
	private static String resPass="Pass";
    private static String resFail="Fail";
    private static ExcelReader excelReader;
    private static String xlfile=getBaseDir()+"\\src\\main\\resources\\testdata\\FocusTestData.xlsx";
    private static String xlSheetName = "Focus10FinancialReportsPage";

	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]")
	private static WebElement financialsMenu; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]")
	private static WebElement financialsReportsMenu; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	/*
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[2]")
	private static WebElement ledger; 
	
	*/
	
	
	// 1st 
	
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
				private static WebElement sbr1strow_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
				private static WebElement sbr1strow_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
				private static WebElement sbr1strow_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
				private static WebElement sbr1strow_5thColumn;
				
				// 2nd 
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
				private static WebElement sbr2ndrow_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
				private static WebElement sbr2ndrow_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
				private static WebElement sbr2ndrow_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
				private static WebElement sbr2ndrow_5thColumn;
				
				//3rd
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
				private static WebElement sbr3rdrow_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
				private static WebElement sbr3rdrow_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
				private static WebElement sbr3rdrow_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
				private static WebElement sbr3rdrow_5thColumn;
				
				// 4th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
				private static WebElement sbr4throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
				private static WebElement sbr4throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
				private static WebElement sbr4throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
				private static WebElement sbr4throw_5thColumn;
				
				
				
				// 5th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[2]")
				private static WebElement sbr5throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[3]")
				private static WebElement sbr5throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[4]")
				private static WebElement sbr5throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[5]")
				private static WebElement sbr5throw_5thColumn;
					
					
				// 6th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[2]")
				private static WebElement sbr6throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[3]")
				private static WebElement sbr6throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[4]")
				private static WebElement sbr6throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[5]")				
				private static WebElement sbr6throw_5thColumn;
					
				
				
				// 7th

				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[2]")
				private static WebElement sbr7throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[3]")
				private static WebElement sbr7throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[4]")
				private static WebElement sbr7throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[5]")
				private static WebElement sbr7throw_5thColumn;
					
					
				// 8th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[2]")
				private static WebElement sbr8throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[3]")
				private static WebElement sbr8throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[4]")
				private static WebElement sbr8throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[5]")
				private static WebElement sbr8throw_5thColumn;
					
					
				
				// 9th
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[2]")
				private static WebElement sbr9throw_2ndColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[3]")
				private static WebElement sbr9throw_3rdColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[4]")
				private static WebElement sbr9throw_4thColumn;
				
				@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[5]")
				private static WebElement sbr9throw_5thColumn;
					
					
				// 10th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[2]")
					private static WebElement sbr10throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[3]")
					private static WebElement sbr10throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[4]")
					private static WebElement sbr10throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[5]")
					private static WebElement sbr10throw_5thColumn;
					
				// 11th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[2]")
					private static WebElement sbr11throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[3]")
					private static WebElement sbr11throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[4]")
					private static WebElement sbr11throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[5]")
					private static WebElement sbr11throw_5thColumn;
					
				// 12th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[2]")
					private static WebElement sbr12throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[3]")
					private static WebElement sbr12throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[4]")
					private static WebElement sbr12throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[5]")
					private static WebElement sbr12throw_5thColumn;
					
				// 13th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[2]")
					private static WebElement sbr13throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[3]")
					private static WebElement sbr13throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[4]")
					private static WebElement sbr13throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[5]")
					private static WebElement sbr13throw_5thColumn;
				
				// 14th
				
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[2]")
					private static WebElement sbr14throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[3]")
					private static WebElement sbr14throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[4]")
					private static WebElement sbr14throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[5]")
					private static WebElement sbr14throw_5thColumn;
		       	
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
					private static List<WebElement> stockLedgerHometableRowCount;
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[12]")
					private static List<WebElement> stockLedgerHometableItemNamesList;
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[11]")
					private static List<WebElement> ledgerHometableItemNamesList;
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr/td[8]/div/label/input")
					private static List<WebElement> stockLedgerHometableItemChkboxList;
					
					@FindBy(xpath="(//div[@id='dvReportDetails']/div/table/thead)[1]/tr/th")
					private static List<WebElement> reportsHeaderList;
					
					@FindBy(xpath="//select[@id='DateOptions_']")
					private static WebElement sl_DateOptionDropdown;
					
					@FindBy(xpath="//input[@id='id_starting_date_']")
					private static WebElement sl_StartDateTxt;
					
					@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
					private static WebElement sl_StartDateCalanderBtn;
					
					@FindBy(xpath="//input[@id='id_ending_date_']")
					private static WebElement sl_EndDateTxt;
					
					@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
					private static WebElement sl_EndDateCalanderBtn;
					
					 // Reports Table Row List  
				  //	@FindBy(xpath="//*[@id='trRender_0']/td[2]")
					//private static List<WebElement> reportsRow1List;
					
				  	@FindBy(xpath="(//tr[@id='trRender_0'])[1]/td")
					private static List<WebElement> reportsRow1List;
				  	
					@FindBy(xpath="(//tr[@id='trRender_1'])[1]/td")
					private static List<WebElement> reportsRow2List;
					
					@FindBy(xpath="(//tr[@id='trRender_2'])[1]/td")
					private static List<WebElement> reportsRow3List;
					
					@FindBy(xpath="(//tr[@id='trRender_3'])[1]/td")
					private static List<WebElement> reportsRow4List;
					
					@FindBy(xpath="(//tr[@id='trRender_4'])[1]/td")
					private static List<WebElement> reportsRow5List;
					
					@FindBy(xpath="(//tr[@id='trRender_5'])[1]/td")
					private static List<WebElement> reportsRow6List;
					
					@FindBy(xpath="(//tr[@id='trRender_6'])[1]/td")
					private static List<WebElement> reportsRow7List;
					
					@FindBy(xpath="(//tr[@id='trRender_7'])[1]/td")
					private static List<WebElement> reportsRow8List;
					
					@FindBy(xpath="(//tr[@id='trRender_8'])[1]/td")
					private static List<WebElement> reportsRow9List;
					
					@FindBy(xpath="(//tr[@id='trRender_9'])[1]/td")
					private static List<WebElement> reportsRow10List;
					
					@FindBy(xpath="(//tr[@id='trRender_10'])[1]/td")
					private static List<WebElement> reportsRow11List;
					
					@FindBy(xpath="(//tr[@id='trRender_11'])[1]/td")
					private static List<WebElement> reportsRow12List;
					
					@FindBy(xpath="(//tr[@id='trRender_12'])[1]/td")
					private static List<WebElement> reportsRow13List;
					
					@FindBy(xpath="(//tr[@id='trRender_13'])[1]/td")
					private static List<WebElement> reportsRow14List;
					
					@FindBy(xpath="(//tr[@id='trRender_14'])[1]/td")
					private static List<WebElement> reportsRow15List;
					
					@FindBy(xpath="(//tr[@id='trRender_15'])[1]/td")
					private static List<WebElement> reportsRow16List;
					
					@FindBy(xpath="(//tr[@id='trRender_16'])[1]/td")
					private static List<WebElement> reportsRow17List;
					
					@FindBy(xpath="(//tr[@id='trRender_17'])[1]/td")
					private static List<WebElement> reportsRow18List;
					
					@FindBy(xpath="(//tr[@id='trRender_18'])[1]/td")
					private static List<WebElement> reportsRow19List;
					
					@FindBy(xpath="(//tr[@id='trRender_19'])[1]/td")
					private static List<WebElement> reportsRow20List;

	
	
	
	

					public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
					{
					        try
					        {
					                getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
					                String actErrorMessage=errorMessage.getText();
					                String expErrorMessage=ExpMessage;

					                try
					                {
					                
						                getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
						                errorMessageCloseBtn.click();
					                	
						                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
						                
						                return actErrorMessage;
					                }
					                catch(Exception ee)
					                {
					                	
					                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
					                	
					                	return actErrorMessage;
					                }
					        }
					        catch(Exception e)
					        {
					                System.err.println("Error Message NOT Found or NOT Clickable");
					                System.err.println(e.getMessage());
					                
					                String Exception=e.getMessage();
					            
					                return Exception;
					        }
					}
					

					public boolean checkLoginTOAutomationCompany() throws InterruptedException
					{

						 getDriver().navigate().refresh();
						 Thread.sleep(1999);
						 
						// getDriver().navigate().refresh();
						 //Thread.sleep(1999);

						LoginPage lp=new LoginPage(getDriver()); 

						String unamelt="su";
								      
						String pawslt="su";
								      
						LoginPage.enterUserName(unamelt);

						Thread.sleep(1000);
								
						LoginPage.enterPassword(pawslt);

						String compname="Automation Company : 08/10/2020 5:43 PM (010)";

						 Select oSelect = new Select(companyDropDownList);
						 
						 List <WebElement> elementCount = oSelect.getOptions();

						 int cqSize = elementCount.size();
						 
						 System.out.println("CompanyDropdownList Count :"+cqSize);
						 oSelect.selectByValue("36");;

						/*    int i;
						  
							for(i=0; i<elementCount.size(); i++) 
							{
							
							  elementCount.get(i).getText();
							  
						      String optionName = elementCount.get(i).getText();
						      System.err.println(optionName);
						      
						  /*   if(optionName.toUpperCase().startsWith(compname.toUpperCase()))
						     {
							  System.out.println("q"+elementCount.get(i).getText());
								  elementCount.get(i).click();
							 }*/
						    /*  if(optionName.equalsIgnoreCase("Automation Company : 08/10/2020 5:43 PM (070)"))
						      {
								  elementCount.get(i).click();

						      }
						 
						    }*/
							
					        Thread.sleep(1000);
							
							LoginPage.clickOnSignInBtn();
								
							//checkRefershPopOnlogin();
							        
						//checkPopUpWindow();

						//Thread.sleep(2000);
								           	
						String userInfo=userNameDisplay.getText();
								    	
						System.out.println("User Info : "+userInfo);
								    	
						System.out.println("User Info Capture Text :"+userNameDisplay.getText());
								    	
						getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
								    	
						companyLogo.click();
								    	
						if(homeMenu.isDisplayed()==true)
						{

							System.out.println("Test Pass :Logined to BRS Company");
							return true;
							
						}
						else
						{
							System.out.println("Test Fail :Logined to BRS Company");
								return false;

							}
						
					}
					

	
		@FindBy (xpath="(//div[@id='dvReportDetails']/div/table/tbody)[1]/tr/td ")
		private static List<WebElement> reportTableCells;
	
	public boolean checkFinancialLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();
		
		Thread.sleep(3000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 0; i < rowcount; i++) 
		{
			String actName = ledgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 9, 5)) 
					|| actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 10, 5)) 
					|| actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 11, 5)) 
					|| actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 12, 5)))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportPage1Count = reportTableCells.size();
		
		System.err.println(reportPage1Count);
		ArrayList<String> reportPage1ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage1Count;i++)
		{
			if(i!=3 && i!=17 &&i!=31 && i!=45 && i!=59 &&i!=89 &&  i!=103 
					&&i!=117 && i!=131 &&i!=145 &&i!=159 &&i!=189 &&i!=203
					&&i!=217 &&i!=231 &&i!=245){
				
			String data = reportTableCells.get(i).getText();
			reportPage1ListArray.add(data);
			
			System.err.println(data);
			}
		}
		String actPage1List = reportPage1ListArray.toString();
		String expPage1List =excelReader.getCellData(xlSheetName, 12, 6);
       excelReader.setCellData(xlfile, xlSheetName, 12, 7, actPage1List);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
			report_PreviousBtn.click();
			Thread.sleep(2000);
		}
		
		int reportPage2Count = reportTableCells.size();
		System.err.println(reportPage2Count);
		
		ArrayList<String> reportPage2ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage2Count;i++)
		{
			if(i!=1&&i!=15&&i!=29&&i!=43 && i!=73 &&i!=87 &&i!=101 && i!=115 &&i!=129 &&i!=143 &&i!=157 )
			{
			String data = reportTableCells.get(i).getText();
			
			if(data.isEmpty()==false){
				
				reportPage2ListArray.add(data);
			}
			//reportPage2ListArray.add(data);
			}
		}
		String actPage2List = reportPage2ListArray.toString();
		String expPage2List =excelReader.getCellData(xlSheetName, 13, 6);
	       excelReader.setCellData(xlfile, xlSheetName, 13, 7, actPage2List);
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage3Count = reportTableCells.size();
		ArrayList<String> reportPage3ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage3Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage3ListArray.add(data);
		}
		String actPage3List = reportPage3ListArray.toString();
		String expPage3List =excelReader.getCellData(xlSheetName, 14, 6);
	       excelReader.setCellData(xlfile, xlSheetName, 14, 7, actPage3List);*/
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage4Count = reportTableCells.size();
		ArrayList<String> reportPage4ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage4Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage4ListArray.add(data);
		}
		String actPage4List = reportPage4ListArray.toString();
		String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
		
		System.out.println("*****************************************checkFinancialLedgerReports***************************************");
		
		System.out.println(actPage1List);
		System.out.println(expPage1List);
		
		System.out.println(actPage2List);
		System.out.println(expPage2List);
		
		/*System.out.println(actPage3List);
		System.out.println(expPage3List);
		*/
		/*System.out.println(actPage4List);
		System.out.println(expPage4List);*/
		
		if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
			/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
		{
			excelReader.setCellData(xlfile, xlSheetName, 8, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 8, 8, resFail);
			return false;
		}
	}
		
	@FindBy(xpath="(//a[contains(text(),'Item')]//i)[1]")
	private static WebElement  report_FilterItemExpansion;
	
	@FindBy(xpath="(//*[@id='5021'])[1]")
	private static WebElement  report_FilterItemNameChkbox;
	
	@FindBy(xpath="//*[@id='FilterFields_500_0']/ul[4]/li[1]/div/label/span")
	private static WebElement  ledgerreport_FilterItemNameChkbox;
	
	@FindBy(xpath="(//input[@class='FButton-Primary'])[1]")
	private static WebElement  reports_Filter_Customize_OkBtn;
	
	@FindBy(xpath="//*[@id='FOption_500_0_DefaultFilter_0']")
	private static WebElement  ledger_DefaultFilterTxt;
	
	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;
	
	@FindBy(xpath="//*[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshConditionBtn;
	
	
	
	@FindBy(xpath="//*[@id='filter_Okbtn_']")
	private static WebElement  report_FilterOkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;
	
	
	@FindBy(xpath="(//table[@class='CommonReportTable']/tbody)[1]/tr")
	private static List<WebElement> reportsRowsCount;
	
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[2]")
	private static List<WebElement> reportTableColumn1RowsList;
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[3]")
	private static List<WebElement> reportTableColumn3RowsList;
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[4]")
	private static List<WebElement> reportTableColumn4RowsList;
	
	
	@FindBy (xpath="//*[@id='dvReportDetails']/div/table/tbody/tr/td[8]")
	private static List<WebElement> reportTableColumn7RowsList;
	
	
	@FindBy (xpath="//*[@id='id_reportmenudisplay']/ul/li[7]")
	private static WebElement sl_BackTrackBtn;
	
	
	@FindBy (xpath="(//*[@id='navbarSupportedContent2']/ul/li/a/i)[3]")
	private static WebElement BackTrackItemDetailsBackBtn;
	
	@FindBy (xpath="(//*[@id='navbarSupportedContent2']/ul/li/a/i)[2]")
	private static WebElement BackTrackMonthDetailsBackBtn;
	
	@FindBy (xpath="(//*[@id='navbarSupportedContent2']/ul/li/a/i)[1]")
	private static WebElement BackTrackDateDetailsBackBtn;
	
	
	
	
	public boolean checkFinancialLedgerReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		
		 excelReader=new ExcelReader(POJOUtility.getExcelPath());		
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
		report_FilterExpandBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
		report_FilterItemExpansion.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==false) 
		{
			ledgerreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger_DefaultFilterTxt));
		ledger_DefaultFilterTxt.click();
		ledger_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 16, 5));
		
		Thread.sleep(2000);
		
		ledger_DefaultFilterTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(3000);
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List = excelReader.getCellData(xlSheetName, 17, 6);
		excelReader.setCellData(xlfile, xlSheetName, 17, 7, actRow1List);
		

		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List = excelReader.getCellData(xlSheetName, 18, 6);
		excelReader.setCellData(xlfile, xlSheetName, 18, 7, actRow2List);
		
	

		
		int reportsRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
		
		Calendar cal=Calendar.getInstance();
		DateFormat df = new SimpleDateFormat("MMMM yyyy");
		String Row3Month = df.format(cal.getTime());
			
		
		for(int i=2;i<reportsRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsRow3ListArray.add(data);
		}
		String actRow3List = reportsRow3ListArray.toString();
		String expRow3List =excelReader.getCellData(xlSheetName, 19, 6);
		excelReader.setCellData(xlfile, xlSheetName, 19, 7, actRow3List);
		
		
		
		
		int reportsRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsRow4ListArray.add(data);
		}
		String actRow4List = reportsRow4ListArray.toString();
		String expRow4List =excelReader.getCellData(xlSheetName, 20, 6);
		excelReader.setCellData(xlfile, xlSheetName, 20, 7, actRow4List);
		
		
		int reportsRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsRow5ListArray.add(data);
		}
		String actRow5List = reportsRow5ListArray.toString();
		String expRow5List =excelReader.getCellData(xlSheetName, 21, 6);
		excelReader.setCellData(xlfile, xlSheetName, 21, 7, actRow5List);
		
		
		
		System.out.println("***************************checkLedgerReportFilterOption*********************************");
		
		System.out.println(actRow1List);
		System.out.println(expRow1List);
		
		System.out.println(actRow2List);
		System.out.println(expRow2List);
		
		System.out.println(actRow3List);
		System.out.println(expRow3List);
		
		System.out.println(actRow4List);
		System.out.println(expRow4List);
		
		System.out.println(actRow5List);
		System.out.println(expRow5List);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
		report_FilterExpandBtn.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==true) 
		{
			ledgerreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
		report_Filter_RefreshConditionBtn.click();

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(2000);
		
		String actRowCount=String.valueOf(reportsRowsCount.size());
		String expRowCount = excelReader.getCellData(xlSheetName, 22, 6);
		excelReader.setCellData(xlfile, xlSheetName, 22, 7, actRowCount);

		System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount.equals(expRowCount))
		{
			excelReader.setCellData(xlfile, xlSheetName, 15, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 15, 8, resFail);
			return false;
		}
	}

	
	public boolean checkFinancialLedgerReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledger.click();
		
		Thread.sleep(3000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 0; i < rowcount; i++) 
		{
			String actName = ledgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") 
					|| actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(2000);
		*/
			
		
		int reportItemGridListCount=reportTableColumn2RowsList.size();
    for (int i = 0; i < reportItemGridListCount; i++) 
    {
         String data=reportTableColumn2RowsList.get(i).getText();
         //String data1=reportTableColumn2RowsList.get(i).getText();
         
         System.err.println(data);
         
         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 24, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
         {
    		 reportTableColumn2RowsList.get(i).click();
    		 Thread.sleep(1000);
    		 break;
         }
	     }
    
    Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
	sl_BackTrackBtn.click();
	
	Thread.sleep(2000);
		
	
	
	ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
	
	String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
	String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 25, 6);
	excelReader.setCellData(xlfile, xlSheetName, 25, 7, actOpenWindowsCount);


 	getDriver().switchTo().window(openTabs.get(1));
 
 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocNo = documentNumberTxt.getAttribute("value");
	String expDocNo = excelReader.getCellData(xlSheetName, 26, 6);
	excelReader.setCellData(xlfile, xlSheetName, 26, 7, actDocNo);


	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
	String actVendor = vendorAccountTxt.getAttribute("value");
	String expVendor =excelReader.getCellData(xlSheetName, 27, 6);
	excelReader.setCellData(xlfile, xlSheetName, 27, 7, actVendor);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	String actCurrency = voucherHeaderCurrency.getAttribute("value");
	String expCurrency =excelReader.getCellData(xlSheetName, 28, 6);
	excelReader.setCellData(xlfile, xlSheetName, 28, 7, actCurrency);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	String actDepartment = departmentTxt.getAttribute("value");
	String expDepartment =excelReader.getCellData(xlSheetName, 29, 6);
	excelReader.setCellData(xlfile, xlSheetName, 29, 7, actDepartment);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
	String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
	String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 30, 6);
	excelReader.setCellData(xlfile, xlSheetName, 30, 7, actPlaceOfSupply);


	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	String actJurisdiction = jurisdictionTxt.getAttribute("value");
	String expJurisdiction =excelReader.getCellData(xlSheetName, 31, 6);
	excelReader.setCellData(xlfile, xlSheetName, 31, 7, actJurisdiction);


	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	String actR1Warehouse = select1stRow_1stColumn.getText();
	String expR1Warehouse =excelReader.getCellData(xlSheetName, 32, 6);
	excelReader.setCellData(xlfile, xlSheetName, 32, 7, actR1Warehouse);

	
	String actR1Item = select1stRow_2ndColumn.getText();
	String expR1Item =excelReader.getCellData(xlSheetName, 33, 6);
	excelReader.setCellData(xlfile, xlSheetName, 33, 7, actR1Item);

	
	String actR1TaxCode = select1stRow_3rdColumn.getText();
	String expR1TaxCode =excelReader.getCellData(xlSheetName, 34, 6);
	excelReader.setCellData(xlfile, xlSheetName, 34, 7, actR1TaxCode);

	
	String actR1PurchaseAccount = select1stRow_4thColumn.getText();
	String expR1PurchaseAccount =excelReader.getCellData(xlSheetName, 35, 6);
	excelReader.setCellData(xlfile, xlSheetName, 35, 7, actR1PurchaseAccount);

	
	String actR1Units = select1stRow_5thColumn.getText();
	String expR1Units =excelReader.getCellData(xlSheetName, 36, 6);
	excelReader.setCellData(xlfile, xlSheetName, 36, 7, actR1Units);

	
	String actR1Quantity = select1stRow_11thColumn.getText();
	String expR1Quantity =excelReader.getCellData(xlSheetName, 37, 6);
	excelReader.setCellData(xlfile, xlSheetName, 37, 7, actR1Quantity);

	
	String actR1Rate = select1stRow_14thColumn.getText();
	String expR1Rate =excelReader.getCellData(xlSheetName, 38, 6);
	excelReader.setCellData(xlfile, xlSheetName, 38, 7, actR1Rate);

	
	String actR1Gross = select1stRow_15thColumn.getText();
	String expR1Gross =excelReader.getCellData(xlSheetName, 39, 6);
	excelReader.setCellData(xlfile, xlSheetName, 39, 7, actR1Gross);

	
	String actR1Batch = select1stRow_18thColumn.getText();
	String expR1Batch =excelReader.getCellData(xlSheetName, 40, 6);
	excelReader.setCellData(xlfile, xlSheetName, 40, 7, actR1Batch);


	String actR1Expiry = select1stRow_20thColumn.getText();
	DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
	Calendar R1cal=Calendar.getInstance();
	R1cal.add(Calendar.DATE, 2); 
	//String expR1Expiry=dtf.format(R1cal.getTime());
	String expR1Expiry=excelReader.getCellData(xlSheetName, 41, 6);
	excelReader.setCellData(xlfile, xlSheetName, 41,7,actR1Expiry);

	
	/*
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
	String actR2Warehouse = select2ndRow_1stColumn.getText();
	String expR2Warehouse = "";
	
	String actR2Item = select2ndRow_2ndColumn.getText();
	String expR2Item = "";
	
	String actR2TaxCode = select2ndRow_3rdColumn.getText();
	String expR2TaxCode = "";
	
	String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
	String expR2PurchaseAccount = "";
	
	String actR2Units = select2ndRow_5thColumn.getText();
	String expR2Units = "";
	
	String actR2Quantity = select2ndRow_9thColumn.getText();
	String expR2Quantity = "";
	
	String actR2Rate = select2ndRow_11thColumn.getText();
	String expR2Rate = "";
	
	String actR2Gross = select2ndRow_12thColumn.getText();
	String expR2Gross = "";
	
	String actR2Batch = select2ndRow_16thColumn.getText();
	String expR2Batch = "";

	String actR2Expiry = select2ndRow_18thColumn.getText();
	Calendar R2cal=Calendar.getInstance();
	R2cal.add(Calendar.DATE, 5); 
	String expR2Expiry=dtf.format(R2cal.getTime());
 	*/
	System.out.println("**********************checkLedgerReportBackTrackOption*********************");
	 
	System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
	
	System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
	System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
	System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
	System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
	System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
	System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
	
	System.out.println("*******************************ROW1**********************************");
	
	System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
	System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
	System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
	System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
	System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
	System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
	System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
	System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
	System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
	System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
	
	/*
	System.out.println("*******************************ROW2**********************************");
	
	System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
	System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
	System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
	System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
	System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
	System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
	System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
	System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
	System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
	System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
	*/
	
	getDriver().switchTo().window(openTabs.get(1)).close();
	
	Thread.sleep(1000);
	
	getDriver().switchTo().window(openTabs.get(0));
	
	Thread.sleep(1000);
	
	
	
	
	if ( actOpenWindowsCount.equals(expOpenWindowsCount)
		  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
		   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
		   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
		   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
		   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
		   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) && actR1Expiry.equalsIgnoreCase(expR1Expiry)
		  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
		   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
		   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
		   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();*/
		excelReader.setCellData(xlfile, xlSheetName, 23, 8, resPass);
		return true;
	}
	else
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();*/
		excelReader.setCellData(xlfile, xlSheetName, 23, 8, resFail);
		return false;
	}
}


@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[3]")
private static WebElement ledgerDetails;
	
	
	public boolean checkFinancialLedgerDetailsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
		LogoutandLoginwithSU();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
		financialsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
		financialsReportsMenu.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
		ledgerDetails.click();
		
		Thread.sleep(3000);
		
		int rowcount=stockLedgerHometableRowCount.size();
		
		System.out.println(rowcount);
		
		for (int i = 0; i < rowcount; i++) 
		{
			String actName = ledgerHometableItemNamesList.get(i).getText();
			
			System.out.println(actName);
			
			if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 43, 5)) 
					|| actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 44, 5)) 
					|| actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 45, 5)) 
					|| actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 46, 5)))
			{
				stockLedgerHometableItemChkboxList.get(i).click();
			}
		}
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
		sl_DateOptionDropdown.click();
		Select s=new Select(sl_DateOptionDropdown);
		s.selectByValue("1");
		
		Thread.sleep(2000);
	
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
		sl_OkBtn.click();
	
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportPage1Count = reportTableCells.size();
		System.err.println(reportPage1Count);
		
		ArrayList<String> reportPage1ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage1Count;i++)
		{
			if(i!=3 && i!=13 &&i!=23 && i!=33 && i!=43&&i!=65 &&  i!=75 
					&&i!=85 && i!=95 &&i!=105 &&i!=115 &&i!=137 &&i!=147
					&&i!=157 &&i!=167 &&i!=177){
			String data = reportTableCells.get(i).getText();
			reportPage1ListArray.add(data);
			}
		}
		String actPage1List = reportPage1ListArray.toString();
		String expPage1List =excelReader.getCellData(xlSheetName, 47, 6);
        excelReader.setCellData(xlfile, xlSheetName, 47, 7, actPage1List);

		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
			report_PreviousBtn.click();
			Thread.sleep(2000);
		}
		
		int reportPage2Count = reportTableCells.size();
		ArrayList<String> reportPage2ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage2Count;i++)
		
		{
			if(i!=1&&i!=11&&i!=21&&i!=31 && i!=41 &&i!=51 &&i!=61 )
			{
				
			
			String data = reportTableCells.get(i).getText();
			if(data.isEmpty()==false){
				
				reportPage2ListArray.add(data);
			}
			//reportPage2ListArray.add(data);
			
			}
		}
		String actPage2List = reportPage2ListArray.toString();
		String expPage2List =excelReader.getCellData(xlSheetName, 48, 6);
        excelReader.setCellData(xlfile, xlSheetName, 48, 7, actPage2List);

		
	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage3Count = reportTableCells.size();
		ArrayList<String> reportPage3ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage3Count;i++)
		{
			if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53&&i!=68){
				
			String data = reportTableCells.get(i).getText();
			reportPage3ListArray.add(data);
			}
		}
		String actPage3List = reportPage3ListArray.toString();
		String expPage3List =excelReader.getCellData(xlSheetName, 49, 6);
        excelReader.setCellData(xlfile, xlSheetName, 49, 7, actPage3List);*/

		
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
		report_NextBtn.click();
		
		Thread.sleep(2000);
		
		int reportPage4Count = reportTableCells.size();
		ArrayList<String> reportPage4ListArray = new ArrayList<String>();
		for(int i=0;i<reportPage4Count;i++)
		{
			String data = reportTableCells.get(i).getText();
			reportPage4ListArray.add(data);
		}
		String actPage4List = reportPage4ListArray.toString();
		String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
		
		System.out.println("*****************************************checkLedgerDetailsReports***************************************");
		
		System.out.println(actPage1List);
		System.out.println(expPage1List);
		
		System.out.println(actPage2List);
		System.out.println(expPage2List);
		
		/*System.out.println(actPage3List);
		System.out.println(expPage3List);*/
		
		/*System.out.println(actPage4List);
		System.out.println(expPage4List);*/
		
		if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List)/* && actPage3List.equalsIgnoreCase(expPage3List)*/ 
			/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
		{
			excelReader.setCellData(xlfile, xlSheetName, 42, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 42, 8, resFail);
			return false;
		}
	}
	
	
	@FindBy(xpath="(//*[@id='FilterFields_658_0']/ul[4]/li[1]/div/label/span)[1]")
	private static WebElement ledgerDetailsreport_FilterItemNameChkbox;
	
	@FindBy(xpath="//*[@id='FOption_658_0_DefaultFilter_0']")
	private static WebElement ledgerDetails_DefaultFilterTxt;
	
	
	public boolean checkFinancialLedgerDetailsReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
				
		Thread.sleep(3000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
		report_FilterExpandBtn.click();
		Thread.sleep(1000);
		
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
		report_FilterItemExpansion.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetailsreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==false) 
		{
			ledgerDetailsreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetails_DefaultFilterTxt));
		ledgerDetails_DefaultFilterTxt.click();
		ledgerDetails_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 51, 5));
		
		Thread.sleep(2000);
		
		ledgerDetails_DefaultFilterTxt.sendKeys(Keys.TAB);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(3000);
		
		//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
		int reportsRow1ListCount = reportsRow1List.size();
		ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow1ListCount;i++)
		{
			String data = reportsRow1List.get(i).getText();
			reportsRow1ListArray.add(data);
			System.err.println("first row"+data);
		}
		String actRow1List = reportsRow1ListArray.toString();
		String expRow1List =excelReader.getCellData(xlSheetName, 52, 6);
        excelReader.setCellData(xlfile, xlSheetName, 52, 7, actRow1List);

		
		

		int reportsRow2ListCount = reportsRow2List.size();
		ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow2ListCount;i++)
		{
			String data = reportsRow2List.get(i).getText();
			reportsRow2ListArray.add(data);
			System.err.println(data);
		}
		String actRow2List = reportsRow2ListArray.toString();
		String expRow2List =excelReader.getCellData(xlSheetName, 53, 6);
        excelReader.setCellData(xlfile, xlSheetName, 53, 7, actRow2List);

	

		
		int reportsRow3ListCount = reportsRow3List.size();
		ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow3ListCount;i++)
		{
			String data = reportsRow3List.get(i).getText();
			reportsRow3ListArray.add(data);
		}
		String actRow3List = reportsRow3ListArray.toString();
		String expRow3List =excelReader.getCellData(xlSheetName, 54, 6);
        excelReader.setCellData(xlfile, xlSheetName, 54, 7, actRow3List);

		
		
		
		int reportsRow4ListCount = reportsRow4List.size();
		ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
		for(int i=2;i<reportsRow4ListCount;i++)
		{
			String data = reportsRow4List.get(i).getText();
			reportsRow4ListArray.add(data);
		}
		String actRow4List = reportsRow4ListArray.toString();
		String expRow4List =excelReader.getCellData(xlSheetName, 55, 6);
        excelReader.setCellData(xlfile, xlSheetName, 55, 7, actRow4List);

		
		int reportsRow5ListCount = reportsRow5List.size();
		ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
		for(int i=1;i<reportsRow5ListCount;i++)
		{
			String data = reportsRow5List.get(i).getText();
			reportsRow5ListArray.add(data);
		}
		String actRow5List = reportsRow5ListArray.toString();
		String expRow5List =excelReader.getCellData(xlSheetName, 56, 6);
        excelReader.setCellData(xlfile, xlSheetName, 56, 7, actRow5List);

		
		
		System.out.println("***************************checkLedgerDetailsReportFilterOption*********************************");
		
		System.out.println(actRow1List);
		System.out.println(expRow1List);
		
		System.out.println(actRow2List);
		System.out.println(expRow2List);
		
		System.out.println(actRow3List);
		System.out.println(expRow3List);
		
		System.out.println(actRow4List);
		System.out.println(expRow4List);
		
		System.out.println(actRow5List);
		System.out.println(expRow5List);
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
		report_FilterExpandBtn.click();
		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
		report_FilterBtn.click();
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
		report_FilterCustomizeBtn.click();
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledgerDetailsreport_FilterItemNameChkbox));
		
		if (report_FilterItemNameChkbox.isSelected()==true) 
		{
			ledgerDetailsreport_FilterItemNameChkbox.click();
		}

		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
		reports_Filter_Customize_OkBtn.click();
		
		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
		report_Filter_RefreshConditionBtn.click();

		Thread.sleep(1000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
		report_FilterOkBtn.click();
		
		Thread.sleep(2000);
		
		String actRowCount=String.valueOf(reportsRowsCount.size());
		String expRowCount = excelReader.getCellData(xlSheetName, 57, 6);
		excelReader.setCellData(xlfile, xlSheetName, 57, 7, actRowCount);

		System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
		
		if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount.equals(expRowCount))
		{
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			
			excelReader.setCellData(xlfile, xlSheetName, 50, 8, resPass);
			return true;
		}
		else
		{
			excelReader.setCellData(xlfile, xlSheetName, 50, 8, resFail);
			return false;
		}
	}

	public boolean checkFinancialLedgerDetailsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
	{
		excelReader=new ExcelReader(POJOUtility.getExcelPath());
				
		int reportItemGridListCount=reportTableColumn2RowsList.size();
    for (int i = 0; i < reportItemGridListCount; i++) 
    {
         String data=reportTableColumn2RowsList.get(i).getText();
         //String data1=reportTableColumn2RowsList.get(i).getText();
         
         System.err.println(data);
         
         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 59, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
         {
    		 reportTableColumn2RowsList.get(i).click();
    		 Thread.sleep(1000);
    		 break;
         }
	     }
    
    Thread.sleep(2000);
	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
	sl_BackTrackBtn.click();
	
	Thread.sleep(2000);
		
	
	
	ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
	
	String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
	String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 60, 6);
	excelReader.setCellData(xlfile, xlSheetName, 60, 7, actOpenWindowsCount);

 	getDriver().switchTo().window(openTabs.get(1));
 
 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	String actDocNo = documentNumberTxt.getAttribute("value");
	String expDocNo =excelReader.getCellData(xlSheetName, 61, 6);
	excelReader.setCellData(xlfile, xlSheetName, 61, 7, actDocNo);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
	String actVendor = vendorAccountTxt.getAttribute("value");
	String expVendor =excelReader.getCellData(xlSheetName, 62, 6);
	excelReader.setCellData(xlfile, xlSheetName, 62, 7, actVendor);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
	String actCurrency = voucherHeaderCurrency.getAttribute("value");
	String expCurrency =excelReader.getCellData(xlSheetName, 63, 6);
	excelReader.setCellData(xlfile, xlSheetName, 63, 7, actCurrency);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
	String actDepartment = departmentTxt.getAttribute("value");
	String expDepartment =excelReader.getCellData(xlSheetName, 64, 6);
	excelReader.setCellData(xlfile, xlSheetName, 64, 7, actDepartment);

	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
	String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
	String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 65, 6);
	excelReader.setCellData(xlfile, xlSheetName, 65, 7, actPlaceOfSupply);


	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
	String actJurisdiction = jurisdictionTxt.getAttribute("value");
	String expJurisdiction =excelReader.getCellData(xlSheetName, 66, 6);
	excelReader.setCellData(xlfile, xlSheetName, 66, 7, actJurisdiction);


	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
	String actR1Warehouse = select1stRow_1stColumn.getText();
	String expR1Warehouse =excelReader.getCellData(xlSheetName, 67, 6);
	excelReader.setCellData(xlfile, xlSheetName, 67, 7, actR1Warehouse);

	
	String actR1Item = select1stRow_2ndColumn.getText();
	String expR1Item =excelReader.getCellData(xlSheetName, 68, 6);
	excelReader.setCellData(xlfile, xlSheetName, 68, 7, actR1Item);

	
	String actR1TaxCode = select1stRow_3rdColumn.getText();
	String expR1TaxCode =excelReader.getCellData(xlSheetName, 69, 6);
	excelReader.setCellData(xlfile, xlSheetName, 69, 7, actR1TaxCode);

	
	String actR1PurchaseAccount = select1stRow_4thColumn.getText();
	String expR1PurchaseAccount =excelReader.getCellData(xlSheetName, 70, 6);
	excelReader.setCellData(xlfile, xlSheetName, 70, 7, actR1PurchaseAccount);

	
	String actR1Units = select1stRow_5thColumn.getText();
	String expR1Units =excelReader.getCellData(xlSheetName, 71, 6);
	excelReader.setCellData(xlfile, xlSheetName, 71, 7, actR1Units);

	
	String actR1Quantity = select1stRow_11thColumn.getText();
	String expR1Quantity =excelReader.getCellData(xlSheetName, 72, 6);
	excelReader.setCellData(xlfile, xlSheetName, 72, 7, actR1Quantity);

	
	String actR1Rate = select1stRow_14thColumn.getText();
	String expR1Rate =excelReader.getCellData(xlSheetName, 73, 6);
	excelReader.setCellData(xlfile, xlSheetName, 73, 7, actR1Rate);

	
	String actR1Gross = select1stRow_15thColumn.getText();
	String expR1Gross =excelReader.getCellData(xlSheetName, 74, 6);
	excelReader.setCellData(xlfile, xlSheetName, 74, 7, actR1Gross);

	
	String actR1Batch = select1stRow_16thColumn.getText();
	String expR1Batch =excelReader.getCellData(xlSheetName, 75, 6);
	excelReader.setCellData(xlfile, xlSheetName, 75, 7, actR1Batch);


	/*String actR1Expiry = select1stRow_18thColumn.getText();
	DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
	Calendar R1cal=Calendar.getInstance();
	R1cal.add(Calendar.DATE, 2); 
	//String expR1Expiry=dtf.format(R1cal.getTime());
	String expR1Expiry="100.00";
	*/
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
	String actR2Warehouse = select2ndRow_1stColumn.getText();
	String expR2Warehouse =excelReader.getCellData(xlSheetName, 76, 6);
	excelReader.setCellData(xlfile, xlSheetName, 76, 7, actR2Warehouse);

	
	String actR2Item = select2ndRow_2ndColumn.getText();
	String expR2Item =excelReader.getCellData(xlSheetName, 77, 6);
	excelReader.setCellData(xlfile, xlSheetName, 77, 7, actR2Item);

	
	String actR2TaxCode = select2ndRow_3rdColumn.getText();
	String expR2TaxCode =excelReader.getCellData(xlSheetName, 78, 6);
	excelReader.setCellData(xlfile, xlSheetName, 78, 7, actR2TaxCode);

	
	String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
	String expR2PurchaseAccount =excelReader.getCellData(xlSheetName, 79, 6);
	excelReader.setCellData(xlfile, xlSheetName, 79, 7, actR2PurchaseAccount);

	
	String actR2Units = select2ndRow_5thColumn.getText();
	String expR2Units =excelReader.getCellData(xlSheetName, 80, 6);
	excelReader.setCellData(xlfile, xlSheetName, 80, 7, actR2Units);

	
	String actR2Quantity = select2ndRow_11thColumn.getText();
	String expR2Quantity =excelReader.getCellData(xlSheetName, 81, 6);
	excelReader.setCellData(xlfile, xlSheetName, 81, 7, actR2Quantity);

	
	String actR2Rate = select2ndRow_14thColumn.getText();
	String expR2Rate =excelReader.getCellData(xlSheetName, 82, 6);
	excelReader.setCellData(xlfile, xlSheetName, 82, 7, actR2Rate);

	
	String actR2Gross = select2ndRow_15thColumn.getText();
	String expR2Gross =excelReader.getCellData(xlSheetName, 83, 6);
	excelReader.setCellData(xlfile, xlSheetName, 83, 7, actR2Gross);

	
	String actR2Batch = select2ndRow_18thColumn.getText();
	String expR2Batch =excelReader.getCellData(xlSheetName, 84, 6);
	excelReader.setCellData(xlfile, xlSheetName, 84, 7, actR2Batch);


		
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
	String actR3Warehouse = select2ndRow_1stColumn.getText();
	String expR3Warehouse =excelReader.getCellData(xlSheetName, 85, 6);
	excelReader.setCellData(xlfile, xlSheetName, 85, 7, actR3Warehouse);

	
	String actR3Item = select3rdRow_2ndColumn.getText();
	String expR3Item =excelReader.getCellData(xlSheetName, 86, 6);
	excelReader.setCellData(xlfile, xlSheetName, 86, 7, actR3Item);

	
	String actR3TaxCode = select3rdRow_3rdColumn.getText();
	String expR3TaxCode =excelReader.getCellData(xlSheetName, 87, 6);
	excelReader.setCellData(xlfile, xlSheetName, 87, 7, actR3TaxCode);

	
	String actR3PurchaseAccount = select3rdRow_4thColumn.getText();
	String expR3PurchaseAccount =excelReader.getCellData(xlSheetName, 88, 6);
	excelReader.setCellData(xlfile, xlSheetName, 88, 7, actR3PurchaseAccount);

	
	String actR3Units = select3rdRow_5thColumn.getText();
	String expR3Units =excelReader.getCellData(xlSheetName, 89, 6);
	excelReader.setCellData(xlfile, xlSheetName, 89, 7, actR3Units);

	
	String actR3Quantity = select3rdRow_11thColumn.getText();
	String expR3Quantity =excelReader.getCellData(xlSheetName, 90, 6);
	excelReader.setCellData(xlfile, xlSheetName, 90, 7, actR3Quantity);

	
	String actR3Rate = select3rdRow_14thColumn.getText();
	String expR3Rate =excelReader.getCellData(xlSheetName, 91, 6);
	excelReader.setCellData(xlfile, xlSheetName, 91, 7, actR3Rate);

	
	String actR3Gross = select3rdRow_15thColumn.getText();
	String expR3Gross =excelReader.getCellData(xlSheetName, 92, 6);
	excelReader.setCellData(xlfile, xlSheetName,92, 7, actR3Gross);

	
	String actR3Batch = select3rdRow_18thColumn.getText();
	String expR3Batch =excelReader.getCellData(xlSheetName,93, 6);
	excelReader.setCellData(xlfile, xlSheetName, 93, 7, actR3Batch);


	
	
	
	
	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
	String actR4Warehouse = select4thRow_1stColumn.getText();
	String expR4Warehouse =excelReader.getCellData(xlSheetName, 94, 6);
	excelReader.setCellData(xlfile, xlSheetName, 94, 7, actR4Warehouse);

	
	String actR4Item = select4thRow_2ndColumn.getText();
	String expR4Item =excelReader.getCellData(xlSheetName, 95, 6);
	excelReader.setCellData(xlfile, xlSheetName, 95, 7, actR4Item);

	
	String actR4TaxCode = select4thRow_3rdColumn.getText();
	String expR4TaxCode =excelReader.getCellData(xlSheetName, 96, 6);
	excelReader.setCellData(xlfile, xlSheetName, 96, 7, actR4TaxCode);

	
	String actR4PurchaseAccount = select4thRow_4thColumn.getText();
	String expR4PurchaseAccount =excelReader.getCellData(xlSheetName, 97, 6);
	excelReader.setCellData(xlfile, xlSheetName,97, 7, actR4PurchaseAccount);

	
	String actR4Units = select2ndRow_5thColumn.getText();
	String expR4Units =excelReader.getCellData(xlSheetName, 98, 6);
	excelReader.setCellData(xlfile, xlSheetName, 98, 7, actR4Units);

	
	String actR4Quantity = select4thRow_11thColumn.getText();
	String expR4Quantity =excelReader.getCellData(xlSheetName, 99, 6);
	excelReader.setCellData(xlfile, xlSheetName, 99, 7, actR4Quantity);

	
	String actR4Rate = select4thRow_14thColumn.getText();
	String expR4Rate =excelReader.getCellData(xlSheetName, 100, 6);
	excelReader.setCellData(xlfile, xlSheetName, 100, 7, actR4Rate);

	
	String actR4Gross = select4thRow_15thColumn.getText();
	String expR4Gross =excelReader.getCellData(xlSheetName, 101, 6);
	excelReader.setCellData(xlfile, xlSheetName, 101, 7, actR4Gross);

	
	String actR4Batch = select4thRow_18thColumn.getText();
	String expR4Batch =excelReader.getCellData(xlSheetName, 102, 6);
	excelReader.setCellData(xlfile, xlSheetName, 102, 7, actR4Batch);


	

 	
	System.out.println("**********************checkLedgerDetailsReportBackTrackOption*********************");
	 
	System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
	
	System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
	System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
	System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
	System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
	System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
	System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
	
	System.out.println("*******************************ROW1**********************************");
	
	System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
	System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
	System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
	System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
	System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
	System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
	System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
	System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
	System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
	
	
	
	System.out.println("*******************************ROW2**********************************");
	
	System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
	System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
	System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
	System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
	System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
	System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
	System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
	System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
	System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
	
	
System.out.println("*******************************ROW3**********************************");
	
	System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
	System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
	System.out.println("TaxCode         : "+actR3TaxCode			+"  Value Expected  "+expR3TaxCode);
	System.out.println("PurchaseAccount : "+actR3PurchaseAccount	+"  Value Expected  "+expR3PurchaseAccount);
	System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
	System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
	System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
	System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
	System.out.println("Batch           : "+actR3Batch				+"  Value Expected  "+expR3Batch);
	
	
System.out.println("*******************************ROW4**********************************");
	
	System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
	System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
	System.out.println("TaxCode         : "+actR4TaxCode			+"  Value Expected  "+expR4TaxCode);
	System.out.println("PurchaseAccount : "+actR4PurchaseAccount	+"  Value Expected  "+expR4PurchaseAccount);
	System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
	System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
	System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
	System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
	System.out.println("Batch           : "+actR4Batch				+"  Value Expected  "+expR4Batch);
	
	
	getDriver().switchTo().window(openTabs.get(1)).close();
	
	Thread.sleep(1000);
	
	getDriver().switchTo().window(openTabs.get(0));
	
	Thread.sleep(1000);
	
	
	
	
	if ( actOpenWindowsCount.equalsIgnoreCase(expOpenWindowsCount)
		  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
		   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
		   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
		   
		   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
		   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
		   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
		  /* && actR1Gross.equalsIgnoreCase(expR1Gross)*/ && actR1Batch.equalsIgnoreCase(expR1Batch) 
		  
		   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
		   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
		   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
		  /* && actR2Gross.equalsIgnoreCase(expR2Gross)*/ && actR2Batch.equalsIgnoreCase(expR2Batch)
		  
		   &&actR2Warehouse.equalsIgnoreCase(expR3Warehouse) 
		   && actR3Item.equalsIgnoreCase(expR3Item) && actR3TaxCode.equalsIgnoreCase(expR3TaxCode) && actR3PurchaseAccount.equalsIgnoreCase(expR3PurchaseAccount) 
		   && actR3Units.equalsIgnoreCase(expR3Units) && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) 
		   /*&& actR3Gross.equalsIgnoreCase(expR3Gross)*/ && actR3Batch.equalsIgnoreCase(expR3Batch)
		  
		   &&actR4Warehouse.equalsIgnoreCase(expR4Warehouse) 
		   && actR4Item.equalsIgnoreCase(expR4Item) && actR4TaxCode.equalsIgnoreCase(expR4TaxCode) && actR4PurchaseAccount.equalsIgnoreCase(expR4PurchaseAccount) 
		   && actR4Units.equalsIgnoreCase(expR4Units) && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) 
		   /*&& actR4Gross.equalsIgnoreCase(expR4Gross)*/ && actR4Batch.equalsIgnoreCase(expR4Batch) ) 
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
		/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();*/
		excelReader.setCellData(xlfile, xlSheetName, 58, 8, resPass);
		return true;
	}
	else
	{
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
		report_CloseBtn.click();
	/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
		sl_CloseBtn.click();*/
		excelReader.setCellData(xlfile, xlSheetName, 58, 8, resFail);
		return false;
	}
}

	@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[4]")
	private static WebElement subledger;
	
	
		
	@FindBy(xpath="//*[@id='MasterGroup__101']")
	private static WebElement accountName;
	
		public boolean checkFinancialSubLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			subledger.click();
			
			Thread.sleep(3000);
			
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 104, 5));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn1));
			sl_OkBtn1.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=3&&i!=14&&i!=25&&i!=36&&i!=47&&i!=58&&i!=69&&i!=80&&i!=91&&i!=102&&i!=113)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 105,6);
          excelReader.setCellData(xlfile, xlSheetName, 105, 7, actPage1List);

		/*	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 106,6);
	          excelReader.setCellData(xlfile, xlSheetName, 106, 7, actPage2List);*/

			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkSubLedgerDetailsReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);*/
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) //&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				
				excelReader.setCellData(xlfile, xlSheetName, 103, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 103, 8, resFail);
				return false;
			}
		}
		
		
		@FindBy(xpath="(//a[contains(text(),'Account')]//i)[1]")
		private static WebElement report_FilterAccountExpansion;
				
				
		@FindBy(xpath="(//*[@id='5002'])[1]")
		private static WebElement report_FilterAccountNameChkbox;
				
		@FindBy(xpath="(//*[@id='FilterFields_501_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement subledgerreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_501_0_DefaultFilter_0']")
		private static WebElement subledger_DefaultFilterTxt;
		
		
		public boolean checkFinancialSubLedgerReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(subledgerreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				subledgerreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(subledger_DefaultFilterTxt));
			subledger_DefaultFilterTxt.click();
			subledger_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 108, 5));
			
			Thread.sleep(2000);
			
			subledger_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow1ListCount;i++)
			{
				Thread.sleep(2000);
				
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
				System.err.println("first row"+data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 109, 6);
            excelReader.setCellData(xlfile, xlSheetName, 109, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 110, 6);
            excelReader.setCellData(xlfile, xlSheetName, 110, 7, actRow2List);

		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 111, 6);
            excelReader.setCellData(xlfile, xlSheetName, 111, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 112, 6);
            excelReader.setCellData(xlfile, xlSheetName, 112, 7, actRow4List);

			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 113, 6);
            excelReader.setCellData(xlfile, xlSheetName, 113, 7, actRow5List);

			
			
			System.out.println("***************************checkSubLedgerReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(subledgerreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				subledgerreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 114, 6);
			excelReader.setCellData(xlfile, xlSheetName, 114, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 107, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 107, 8, resFail);
				return false;
			}
		}
		
		

		public boolean checkFinancialSubLedgerReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 116, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 117, 6);
		excelReader.setCellData(xlfile, xlSheetName, 117, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName, 118, 6);
		excelReader.setCellData(xlfile, xlSheetName, 118, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 119, 6);
		excelReader.setCellData(xlfile, xlSheetName, 119, 7, actAccount);

		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 120, 6);
		excelReader.setCellData(xlfile, xlSheetName, 120, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 121, 6);
		excelReader.setCellData(xlfile, xlSheetName, 121, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 122, 6);
		excelReader.setCellData(xlfile, xlSheetName, 122, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 123, 6);
		excelReader.setCellData(xlfile, xlSheetName, 123, 7, actR1Account);

		
			
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 124, 6);
		excelReader.setCellData(xlfile, xlSheetName, 124, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 125, 6);
		excelReader.setCellData(xlfile, xlSheetName, 125, 7, actR1Amount);

		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference =excelReader.getCellData(xlSheetName, 126, 6);
		excelReader.setCellData(xlfile, xlSheetName, 126, 7, actR1Reference);

		
		String actR1VAT = select1stRow_7thColumn.getText();
		String expR1VAT =excelReader.getCellData(xlSheetName, 127, 6);
		excelReader.setCellData(xlfile, xlSheetName, 127, 7, actR1VAT);

		
				

	 	
		System.out.println("**********************checkSubLedgerReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Account          : "+actAccount			+"  Value Expected  "+actAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName       : "+actAccount			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount 			: "+actR1Amount			+"  Value Expected  "+expR1Amount);
		System.out.println("Reference           : "+actR1Reference				+"  Value Expected  "+expR1Reference);
		System.out.println("VAT		        : "+actR1VAT			+"  Value Expected  "+expR1VAT);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equalsIgnoreCase(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Account.equalsIgnoreCase(expR1Account) 
			  && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1Amount.equalsIgnoreCase(expR1Amount) 
			   && actR1Reference.equalsIgnoreCase(expR1Reference) && actR1VAT.equalsIgnoreCase(expR1VAT) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 115, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 115, 8, resFail);
			return false;
		}
	}

		@FindBy(xpath="//select[@id='RITCombobox__5']")
		private static WebElement sortingOption;
		
		public boolean checkFinancialSubLedgerReportwithSortingOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			subledger.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sortingOption));
			sortingOption.click();
			Select s1=new Select(sortingOption);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 129, 5));
			
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				//17 31
				if(i!=14 &&i!=25 &&i!=36&&i!=47 &&i!=58 &&i!=69 &&i!=80 &&i!=91&&i!=102&&i!=113 &&i!=124){
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 130, 6);
            excelReader.setCellData(xlfile, xlSheetName, 130, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1){
					
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 131, 6);
            excelReader.setCellData(xlfile, xlSheetName, 131,7, actPage2List);

			*/
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkSubLedgerReportwithSortingOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			*/
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List)// && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 128, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 128, 8, resFail);
				return false;
			}
		}
		
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[5]")
		private static WebElement cashAndBankBooksMenu;
		
		@FindBy(xpath="(//span[contains(text(),'Cash Book')])[1]")
		private static WebElement cashBook;
		
		@FindBy(xpath="(//span[contains(text(),'Bank Book')])[2]")
		private static WebElement bankBook;
		
		@FindBy(xpath="//span[contains(text(),'Petty Cash Book')]")
		private static WebElement pettyCashBook;
		
		@FindBy(xpath="//span[contains(text(),'Day Book')]")
		private static WebElement dayBook;
		
		@FindBy(xpath="//span[contains(text(),'Virtual Bank Ledger')]")
		private static WebElement virtualBankLedger;
		
		@FindBy(xpath="(//span[contains(text(),'Bank Reconciliation')])[1]")
		private static WebElement bankReconciliation;
		
		@FindBy(xpath="//span[contains(text(),'Bank Reconciliation Import')]")
		private static WebElement bankReconciliationImport;
		
		@FindBy(xpath="//span[contains(text(),'Customer Vendor Reconciliation')]")
		private static WebElement customerVendorReconciliation;
		
		@FindBy(xpath="//span[contains(text(),'Bank Reconciliation Statement')]")
		private static WebElement bankReconciliationStatement;
		
		@FindBy(xpath="//span[contains(text(),'Cheque Discounting')]")
		private static WebElement chequeDiscounting;
		
		
		public boolean checkCashBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook));
			cashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 133, 5));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91&&i!=101&&i!=111
						&& i!=121&&i!=131&&i!=141&&i!=151&&i!=161&&i!=171&&i!=181&&i!=191&&i!=201	)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 134, 6);
            excelReader.setCellData(xlfile, xlSheetName, 134, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53&&i!=66&&i!=79&&i!=92&&i!=105)	
				{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 135, 6);
            excelReader.setCellData(xlfile, xlSheetName, 135, 7, actPage2List);

			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 132, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 132, 8, resFail);
				return false;
			}
		}


		@FindBy(xpath="(//*[@id='FilterFields_510_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement cashBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_510_0_DefaultFilter_0']")
		private static WebElement cashBook_DefaultFilterTxt;
		
		
		@FindBy(xpath="//*[@id='dvReportDetails']/div//th")
		private static List<WebElement> cashBook_headerList;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[2]")
		private static WebElement sortBtn;
		
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[2]//ul/li[1]")
		private static WebElement ascendingBtn;
		
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[2]//ul/li[2]")
		private static WebElement decendingBtn;
		
		public boolean checkCashBookReportwithAscendingOrderColumn() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook));
			cashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 159, 5));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			Thread.sleep(1000);
			
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook_3rdColumnList));
			
			int reportHeaderCount=cashBook_headerList.size();
			ArrayList<String> reportHeader1ListArray = new ArrayList<String>();

			for(int i=0;i<reportHeaderCount;i++){
				String data=cashBook_headerList.get(i).getText();
				reportHeader1ListArray.add(data);
				System.err.println(data);
				
				if(data.equals(excelReader.getCellData(xlSheetName, 160, 5))){
					cashBook_headerList.get(i).click();
					sortBtn.click();
					Thread.sleep(1000);
					
					//for ascending order
					ascendingBtn.click();
					Thread.sleep(1000);
					
				/*	
					//for descendingOrder
					decendingBtn.click();
					Thread.sleep(1000);*/
				}
			}
			
			
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91&&i!=101&&i!=111&&
						i!=121 &&i!=131 &&i!=141 &&i!=151 &&i!=161)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 161, 6);
            excelReader.setCellData(xlfile, xlSheetName, 161, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53&&i!=66&&i!=79&&i!=92&&i!=105)
				{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 162, 6);
            excelReader.setCellData(xlfile, xlSheetName, 162, 7, actPage2List);*/

			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReportsWith AcendingOrder***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);*/
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				 excelReader.setCellData(xlfile, xlSheetName, 158, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 158, 8, resFail);
				return false;
			}
		}
		public boolean checkCashBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				cashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook_DefaultFilterTxt));
			cashBook_DefaultFilterTxt.click();
			cashBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 137, 5));
			
			Thread.sleep(2000);
			
			cashBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53&&i!=66&&i!=79&&i!=92&&i!=105&&i!=118&&i!=131&&i!=144)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 138,6);
            excelReader.setCellData(xlfile, xlSheetName, 138, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1){
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 139,6);
            excelReader.setCellData(xlfile, xlSheetName, 139, 7, actPage2List);

			*/
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReportFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);
			*/
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
		
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				cashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 140, 6);
			excelReader.setCellData(xlfile, xlSheetName, 140, 7, actRowCount);


			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
					/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
				{
				excelReader.setCellData(xlfile, xlSheetName, 136, 8, resPass);
					return true;
				}
				else
				{
					excelReader.setCellData(xlfile, xlSheetName, 136, 8, resFail);
					return false;
				}
		}
		
		

		public boolean checkCashBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 142, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 143, 6);
		excelReader.setCellData(xlfile, xlSheetName, 143, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName, 144, 6);
        excelReader.setCellData(xlfile, xlSheetName, 144, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 145, 6);
        excelReader.setCellData(xlfile, xlSheetName, 145, 7, actAccount);

		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 146, 6);
        excelReader.setCellData(xlfile, xlSheetName, 146, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 147, 6);
        excelReader.setCellData(xlfile, xlSheetName, 147, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 148, 6);
        excelReader.setCellData(xlfile, xlSheetName, 148, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 149, 6);
        excelReader.setCellData(xlfile, xlSheetName, 149, 7, actR1Account);

		
			
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 150, 6);
        excelReader.setCellData(xlfile, xlSheetName, 150, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 151, 6);
        excelReader.setCellData(xlfile, xlSheetName, 151, 7, actR1Amount);

		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference =excelReader.getCellData(xlSheetName, 152, 6);
        excelReader.setCellData(xlfile, xlSheetName, 152, 7, actR1Reference);

		
		String actR1VAT = select1stRow_7thColumn.getText();
		String expR1VAT =excelReader.getCellData(xlSheetName, 153, 6);
        excelReader.setCellData(xlfile, xlSheetName, 153, 7, actR1VAT);

		
				

	 	
		System.out.println("**********************checkCashBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Account          : "+actAccount			+"  Value Expected  "+actAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName       : "+actAccount			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount 			: "+actR1Amount			+"  Value Expected  "+expR1Amount);
		System.out.println("Reference           : "+actR1Reference				+"  Value Expected  "+expR1Reference);
		System.out.println("VAT		        : "+actR1VAT			+"  Value Expected  "+expR1VAT);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Account.equalsIgnoreCase(expR1Account) 
			  && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1Amount.equalsIgnoreCase(expR1Amount) 
			   && actR1Reference.equalsIgnoreCase(expR1Reference)/* && actR1VAT.equalsIgnoreCase(expR1VAT)*/ ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 141, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 141, 8, resFail);

			return false;
		}
	}
	
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement showConsolidatedAmountsOption;
	
		@FindBy(xpath="//select[@id='RITCombobox__1']")
		private static WebElement balancingTypeDropDown;
		
		public boolean checkCashBookReportwithShowconsolidatedamountsOptionandBalancingType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashBook));
			cashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(showConsolidatedAmountsOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showConsolidatedAmountsOption));
			showConsolidatedAmountsOption.click();
			
			Thread.sleep(2000);
			
			
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 155, 5));
			Thread.sleep(2000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balancingTypeDropDown));
			balancingTypeDropDown.click();
			Select s1=new Select(balancingTypeDropDown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91&&i!=101&&i!=111&&
						i!=121 &&i!=131 &&i!=141 &&i!=151 &&i!=161)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 156, 6);
            excelReader.setCellData(xlfile, xlSheetName, 156, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53)
				{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 157, 6);
            excelReader.setCellData(xlfile, xlSheetName, 157, 7, actPage2List);

*/
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);*/
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 154, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 154, 8, resFail);
				return false;
			}
		}

		

		
		public boolean checkBankBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBook));
			bankBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 164, 5));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91&&i!=101
						)
				
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 165, 6);
            excelReader.setCellData(xlfile, xlSheetName, 165, 7, actPage1List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 166, 6);
            excelReader.setCellData(xlfile, xlSheetName, 166, 7, actPage2List);
*/

			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkBankBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);*/
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 163, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 163, 8, resFail);
				return false;
			}
		}


		@FindBy(xpath="(//*[@id='FilterFields_511_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement bankBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_511_0_DefaultFilter_0']")
		private static WebElement bankBook_DefaultFilterTxt;
		
		
		public boolean checkBankBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());	
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				bankBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBook_DefaultFilterTxt));
			bankBook_DefaultFilterTxt.click();
			bankBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 168, 5));
			
			Thread.sleep(2000);
			
			bankBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				Thread.sleep(2000);
				
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
				System.err.println("first row"+data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 169, 6);
            excelReader.setCellData(xlfile, xlSheetName, 169, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 170, 6);
            excelReader.setCellData(xlfile, xlSheetName, 170, 7, actRow2List);

		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 171, 6);
            excelReader.setCellData(xlfile, xlSheetName, 171, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 172, 6);
            excelReader.setCellData(xlfile, xlSheetName, 172, 7, actRow4List);

			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 173, 6);
            excelReader.setCellData(xlfile, xlSheetName, 173, 7, actRow5List);

			
			
			System.out.println("***************************checkBankBookReportFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				bankBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName,174, 6);
			excelReader.setCellData(xlfile, xlSheetName, 174, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List)&& actRow5List.equalsIgnoreCase(expRow5List) && actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 167, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 167, 8, resFail);
				return false;
			}
		}
		
		
		@FindBy(xpath="//input[@id='id_header_67108866']")
		private static WebElement chequeNOTxt;
		
		@FindBy(xpath="//input[@id='id_header_67108981']")
		private static WebElement pdcNOTxt;

		public boolean checkBankBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 176, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName,177, 6);
		excelReader.setCellData(xlfile, xlSheetName, 177, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 	String  actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName,178, 6);
		excelReader.setCellData(xlfile, xlSheetName, 178, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName,179, 6);
		excelReader.setCellData(xlfile, xlSheetName, 179, 7, actAccount);

		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 180, 6);
		excelReader.setCellData(xlfile, xlSheetName, 180, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeNOTxt));
		String actChequeNo = chequeNOTxt.getAttribute("value");
		String expChequeNo =excelReader.getCellData(xlSheetName, 181, 6);
		excelReader.setCellData(xlfile, xlSheetName,181, 7, actChequeNo);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcNOTxt));
		String actPDCNo = pdcNOTxt.getAttribute("value");
		String expPDCNo =excelReader.getCellData(xlSheetName, 182, 6);
		excelReader.setCellData(xlfile, xlSheetName, 182, 7, actPDCNo);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName,183, 6);
		excelReader.setCellData(xlfile, xlSheetName, 183, 7, actR1Account);

		
			
		String actR1Amount = select1stRow_2ndColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 184, 6);
		excelReader.setCellData(xlfile, xlSheetName, 184, 7, actR1Amount);

		
		String actR1Reference = select1stRow_3rdColumn.getText();
		String expR1Reference =excelReader.getCellData(xlSheetName, 185, 6);
		excelReader.setCellData(xlfile, xlSheetName, 185, 7, actR1Reference);

		
		
		
				

	 	
		System.out.println("**********************checkBankBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs	:"		+		actOpenWindowsCount 	+		"Value Expected"	+	expOpenWindowsCount);
		
		System.out.println("Document No:"		+		actDocNo				+		"Value Expected"	+	expDocNo);
		System.out.println("Account: "			+actAccount						+		"Value Expected"	+	actAccount);
		System.out.println("Department: "		+actDepartment					+		"Value Expected"	+	expDepartment);
		System.out.println("ChequeNo: "			+actChequeNo					+		"Value Expected  "	+		expChequeNo);
		System.out.println("PDCNo: "			+actPDCNo						+		"Value Expected  "	+	expPDCNo);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName: "		+		actAccount		+		"Value Expected  "		+		expR1Account);
		System.out.println("Amount: "			+		actR1Amount		+		"Value Expected  "		+		expR1Amount);
		System.out.println("Reference: "		+		actR1Reference	+		"Value Expected  "		+		expR1Reference);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actChequeNo.equalsIgnoreCase(expChequeNo) 
			   && actPDCNo.equalsIgnoreCase(expPDCNo) && actR1Account.equalsIgnoreCase(expR1Account) 
			   && actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference)  ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 175, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 175, 8, resFail);
			return false;
		}
	}
	
		
			
		public boolean checkBankBookReportwithShowconsolidatedamountsOptionandBalancingType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankBook));
			bankBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(showConsolidatedAmountsOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showConsolidatedAmountsOption));
			showConsolidatedAmountsOption.click();
			
			Thread.sleep(2000);
			
			
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 187, 5));
			Thread.sleep(2000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balancingTypeDropDown));
			balancingTypeDropDown.click();
			Select s1=new Select(balancingTypeDropDown);
			s1.selectByValue("2");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91)
								
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 188, 6);
            excelReader.setCellData(xlfile, xlSheetName, 188, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
		/*	int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 7, Sales - Computers, 430.00, , 677.00, 430.00, , 677.00, 30.10, , 58.55, 14, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 15, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 16, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 17, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 18, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 19, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkBankBookReportswithShowconsolidatedamountsOptionandBalancingType***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
			//System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) //&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 186, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 186, 8, resFail);
				return false;
			}
		}


			
		public boolean checkPettyCashBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBook));
			pettyCashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 190, 5));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91&&i!=101&&i!=111
						&& i!=121&&i!=131&&i!=141 &&i!=151 &&i!=161 &&i!=171 &&i!=181 &&i!=191 	)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 191, 6);
            excelReader.setCellData(xlfile, xlSheetName, 191, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53&&i!=66&&i!=79&&i!=92&&i!=105)
				{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 192, 6);
            excelReader.setCellData(xlfile, xlSheetName, 192, 7, actPage2List);

			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkPettyCashBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 189, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 189, 8, resFail);
				return false;
			}
		}


		@FindBy(xpath="//*[@id='FilterFields_512_0']/ul[1]/li[1]/div/label/span")
		private static WebElement pettyCashBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_512_0_DefaultFilter_0']")
		private static WebElement pettyCashBook_DefaultFilterTxt;
		
		
		public boolean checkPettyCashBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				pettyCashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBook_DefaultFilterTxt));
			pettyCashBook_DefaultFilterTxt.click();
			pettyCashBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName,194, 5));
			
			Thread.sleep(2000);
			
			pettyCashBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=14&&i!=27&&i!=40&&i!=53&&i!=66&&i!=79&&i!=92&&i!=105&&i!=118&&i!=131&&i!=144)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 195, 6);
            excelReader.setCellData(xlfile, xlSheetName, 195, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1){
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 196, 6);
            excelReader.setCellData(xlfile, xlSheetName, 196, 7, actPage2List);
			*/
			System.out.println("***************************checkPettyCashBookReportFilterOption*********************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(actPage2List);
			*/
			;
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				pettyCashBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName,197, 6);
			excelReader.setCellData(xlfile, xlSheetName, 197, 7, actRowCount);



			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List)*/
					 && actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 193, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 193, 8, resFail);
				return false;
			}
		}
		
		
	

		public boolean checkPettyCashBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 199, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 200, 6);
		excelReader.setCellData(xlfile, xlSheetName, 200, 7, actOpenWindowsCount);


	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 	String  actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 201, 6);
		excelReader.setCellData(xlfile, xlSheetName, 201, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 202, 6);
		excelReader.setCellData(xlfile, xlSheetName, 202, 7, actAccount);


		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 203, 6);
		excelReader.setCellData(xlfile, xlSheetName, 203, 7, actDepartment);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 204, 6);
		excelReader.setCellData(xlfile, xlSheetName, 204, 7, actPlaceOfSupply);



		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 205, 6);
		excelReader.setCellData(xlfile, xlSheetName, 205, 7, actJurisdiction);


		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 206, 6);
		excelReader.setCellData(xlfile, xlSheetName, 206, 7, actR1Account);


		
		String actR1Taxcode= select1stRow_2ndColumn.getText();
		String expR1Taxcode=excelReader.getCellData(xlSheetName, 207, 6);
		excelReader.setCellData(xlfile, xlSheetName, 207, 7, actR1Taxcode);


			
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 208, 6);
		excelReader.setCellData(xlfile, xlSheetName, 208, 7, actR1Amount);


		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference =excelReader.getCellData(xlSheetName, 209, 6);
		excelReader.setCellData(xlfile, xlSheetName, 209, 7, actR1Reference);


		
		
		
				

	 	
		System.out.println("**********************checkBankBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs		:"			+	actOpenWindowsCount 	+		"Value Expected"		+	expOpenWindowsCount);
		
		System.out.println("Document No		:"		+		actDocNo		+		"Value Expected"		+		expDocNo);
		System.out.println("Account			:"		+		actAccount		+		"Value Expected"		+		actAccount);
		System.out.println("Department		:"		+actDepartment			+		"Value Expected"		+		expDepartment);
		System.out.println("Placeofsupply	:"		+actPlaceOfSupply			+		"Value Expected"		+	expPlaceOfSupply);
		System.out.println("Jurcidition		:"		+actJurisdiction			+		"Value Expected"		+	expJurisdiction);

		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR1Account);
		System.out.println("Taccode:"			+actR1Taxcode			+		"Value Expected  "+expR1Taxcode);

		System.out.println("Amount: "			+actR1Amount		+		"Value Expected  "		+expR1Amount);
		System.out.println("Reference: "		+actR1Reference		+		"Value Expected  "		+expR1Reference);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Account.equalsIgnoreCase(expR1Account) 
			   && actR1Taxcode.equalsIgnoreCase(expR1Taxcode)&& actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference)  )
		//if(actDocNo.equalsIgnoreCase(expDocNo))
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 198, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 198, 8, resFail);
			return false;
		}
	}
	
		
			
		public boolean checkPettyCashBookReportwithShowconsolidatedamountsOptionandBalancingType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pettyCashBook));
			pettyCashBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(showConsolidatedAmountsOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(showConsolidatedAmountsOption));
			showConsolidatedAmountsOption.click();
			
			Thread.sleep(2000);
			
			
			
			accountName.sendKeys(excelReader.getCellData(xlSheetName, 211, 5));
			Thread.sleep(2000);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balancingTypeDropDown));
			balancingTypeDropDown.click();
			Select s1=new Select(balancingTypeDropDown);
			s1.selectByValue("2");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1&&i!=11&&i!=21&&i!=31&&i!=41&&i!=51&&i!=61&&i!=71&&i!=81&&i!=91&&i!=101&&i!=111
						&& i!=121&&i!=131&&i!=141 &&i!=151 &&i!=161	)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 212, 6);
            excelReader.setCellData(xlfile, xlSheetName, 212, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			*/
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
		/*	int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, 23/11/2021, NDT50 : 7, Sales - Computers, 430.00, , 677.00, 430.00, , 677.00, 30.10, , 58.55, 14, 23/11/2021, NDT51 : 1, Vendor B, , 31.50, 645.50, , 31.50, 645.50, , 2.21, 56.35, 15, 23/11/2021, NDT52 : 1, Vendor B, 50.00, , 695.50, 50.00, , 695.50, 3.50, , 59.85, 16, 23/11/2021, NDT55 : 1, Vendor B, , 31.50, 664.00, , 31.50, 664.00, , 2.21, 57.64, 17, 23/11/2021, SalRet : 1, Sales - Computers, , 120.00, 544.00, , 120.00, 544.00, , 8.40, 49.24, 18, , Total, , 914.00, 370.00, 544.00, 914.00, 370.00, 544.00, 86.30, 37.06, 49.24, 19, , Closing balance, , 544.00, , , 544.00, , , 49.24, , ]";
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			//report_NextBtn.click();
			
			Thread.sleep(2000);
		/*	
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkPettyCashBookReportswithShowconsolidatedamountsOptionandBalancingType***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
			//System.out.println(expPage2List);
			
		/*	System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) //&& actPage2List.equalsIgnoreCase(expPage2List) /*&& actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 210, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 210, 8, resFail);
				return false;
			}
		}



		
		
		
		
		public boolean checkDayBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBook));
			dayBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
						
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=63)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 214, 6);
            excelReader.setCellData(xlfile, xlSheetName, 214, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("6")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 215, 6);
            excelReader.setCellData(xlfile, xlSheetName, 215, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				if(i!=60)
				{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
				}
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = excelReader.getCellData(xlSheetName, 216, 6);
            excelReader.setCellData(xlfile, xlSheetName, 216, 7, actPage3List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List =excelReader.getCellData(xlSheetName, 217, 6);
            excelReader.setCellData(xlfile, xlSheetName, 217, 7, actPage4List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List =excelReader.getCellData(xlSheetName, 218, 6);
            excelReader.setCellData(xlfile, xlSheetName, 218, 7, actPage5List);

		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
			}
			String actPage6List = reportPage6ListArray.toString();
			String expPage6List = excelReader.getCellData(xlSheetName, 219, 6);
            excelReader.setCellData(xlfile, xlSheetName, 219, 7, actPage6List);*/
;
			
			
			System.out.println("*****************************************checkDayBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
		/*	System.out.println(actPage6List);
			System.out.println(expPage6List);
			*/
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&& actPage5List.equalsIgnoreCase(expPage5List)/*&& actPage6List.equalsIgnoreCase(expPage6List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 213, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 213, 8, resFail);
				return false;
			}
		}


		@FindBy(xpath="(//*[@id='FilterFields_513_0']/li[2])[1]")
		private static WebElement report_FilterCashBankACExpansion;
		
		@FindBy(xpath="(//*[@id='FilterFields_513_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement dayBookreport_FilterAccountNameChkbox;
		
		@FindBy(xpath="(//input[@id='5002'])[2]")
		private static WebElement report_FilterCashbankACNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_513_0_DefaultFilter_0']")
		private static WebElement dayBook_DefaultFilterTxt;
		
		
		public boolean checkDayBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCashBankACExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBookreport_FilterAccountNameChkbox));
			
			if (report_FilterCashbankACNameChkbox.isSelected()==false) 
			{
				dayBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBook_DefaultFilterTxt));
			dayBook_DefaultFilterTxt.click();
			dayBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 221, 5));
			
			Thread.sleep(2000);
			
			dayBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 222, 6);
            excelReader.setCellData(xlfile, xlSheetName, 222, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 223, 6);
            excelReader.setCellData(xlfile, xlSheetName, 223, 7, actPage2List);
			
			System.out.println("***************************checkDayBookReportFilterOption*********************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			;
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBookreport_FilterAccountNameChkbox));
			
			if (report_FilterCashbankACNameChkbox.isSelected()==true) 
			{
				dayBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 12; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 224, 6);
			excelReader.setCellData(xlfile, xlSheetName, 224, 7, actRowCount);

			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List)
					 && actRowCount==expRowCount)
			{
				excelReader.setCellData(xlfile, xlSheetName, 220, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 220, 8, resFail);
				return false;
			}
		}
		
		
	

		public boolean checkDayBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 226, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 227, 6);
		excelReader.setCellData(xlfile, xlSheetName, 227, 7, actOpenWindowsCount);


	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
	 	String  actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName, 228, 6);
		excelReader.setCellData(xlfile, xlSheetName, 228, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 229, 6);
		excelReader.setCellData(xlfile, xlSheetName, 229,7, actAccount);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 230, 6);
		excelReader.setCellData(xlfile, xlSheetName, 230,7, actDepartment);

		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";
		*/
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = excelReader.getCellData(xlSheetName, 231, 6);
		excelReader.setCellData(xlfile, xlSheetName, 231,7, actR1Account);

		
	/*	String actR1Taxcode= select1stRow_2ndColumn.getText();
		String expR1Taxcode="Std Rate";
	*/		
		String actR1Amount = select1stRow_2ndColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 232, 6);
		excelReader.setCellData(xlfile, xlSheetName, 232,7, actR1Amount);

		
		String actR1Reference = select1stRow_3rdColumn.getText();
		String expR1Reference =excelReader.getCellData(xlSheetName, 233, 6);
		excelReader.setCellData(xlfile, xlSheetName, 233,7, actR1Reference);

	/*	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account = "Bank";
		
		String actR2Taxcode= select2ndRow_2ndColumn.getText();
		String expR2Taxcode="Std Rate";
			
		String actR2Amount = select2ndRow_3rdColumn.getText();
		String expR2Amount = "100.00";
		
		String actR2Reference = select2ndRow_4thColumn.getText();
		String expR2Reference = "NDT50:1 : 23 Nov 2021";
		*/
		
		
				

	 	
		System.out.println("**********************checkDayBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs		:"			+	actOpenWindowsCount 	+		"Value Expected"		+	expOpenWindowsCount);
		
		System.out.println("Document No		:"		+		actDocNo		+		"Value Expected"		+		expDocNo);
		System.out.println("Account			:"		+		actAccount		+		"Value Expected"		+		actAccount);
		System.out.println("Department		:"		+actDepartment			+		"Value Expected"		+		expDepartment);
	//	System.out.println("Placeofsupply	:"		+actPlaceOfSupply			+		"Value Expected"		+	expPlaceOfSupply);
	//	System.out.println("Jurcidition		:"		+actJurisdiction			+		"Value Expected"		+	expJurisdiction);

		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR1Account);
	//	System.out.println("Taxcode:"			+actR1Taxcode			+		"Value Expected  "+expR1Taxcode);

		System.out.println("Amount: "			+actR1Amount		+		"Value Expected  "		+expR1Amount);
		System.out.println("Reference: "		+actR1Reference		+		"Value Expected  "		+expR1Reference);
/*		
System.out.println("*******************************ROW2**********************************");
		
		System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR2Account);
		System.out.println("Taxcode:"			+actR2Taxcode			+		"Value Expected  "+expR2Taxcode);

		System.out.println("Amount: "			+actR2Amount		+		"Value Expected  "		+expR2Amount);
		System.out.println("Reference: "		+actR2Reference		+		"Value Expected  "		+expR2Reference);
		
		*/	
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment)/* && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction)*/ && actR1Account.equalsIgnoreCase(expR1Account) 
			  /* && actR1Taxcode.equalsIgnoreCase(expR1Taxcode)*/&& actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference) 
			  /* &&actR2Account.equalsIgnoreCase(expR2Account)  && actR2Taxcode.equalsIgnoreCase(expR2Taxcode)&& actR2Amount.equalsIgnoreCase(expR2Amount)&& actR2Reference.equalsIgnoreCase(expR2Reference) */ )
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 225, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 225, 8, resFail);
			return false;
		}
	}
	
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[4]/label/span")
		private static WebElement clubCashSalesfortheDayOption;
			
		public boolean checkDayBookReportwithClubCashSalesfortheDay() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dayBook));
			dayBook.click();
			Thread.sleep(2000);
						
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
			
			getAction().moveToElement(clubCashSalesfortheDayOption).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clubCashSalesfortheDayOption));
			clubCashSalesfortheDayOption.click();
			
			Thread.sleep(2000);
			
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=62)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 235, 6);
            excelReader.setCellData(xlfile, xlSheetName, 235, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("6")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 236, 6);
            excelReader.setCellData(xlfile, xlSheetName, 236, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List =excelReader.getCellData(xlSheetName, 237, 6);
            excelReader.setCellData(xlfile, xlSheetName, 237, 7, actPage3List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List =excelReader.getCellData(xlSheetName, 238, 6);
            excelReader.setCellData(xlfile, xlSheetName, 238, 7, actPage4List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List = excelReader.getCellData(xlSheetName, 239, 6);
            excelReader.setCellData(xlfile, xlSheetName, 239, 7, actPage5List);

		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
			}
			String actPage6List = reportPage6ListArray.toString();
			String expPage6List = excelReader.getCellData(xlSheetName, 240, 6);
            excelReader.setCellData(xlfile, xlSheetName, 240, 7, actPage6List);*/

			
			
			System.out.println("*****************************************checkDayBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
		/*	System.out.println(actPage6List);
			System.out.println(expPage6List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&& actPage5List.equalsIgnoreCase(expPage5List)/*&& actPage6List.equalsIgnoreCase(expPage6List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 234, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 234, 8, resFail);
				return false;
			}
		}

		
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[1]/div/label/span")
		private static WebElement selectAllChckbox;

		
		public boolean checkVirtualBankLedgerBookReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualBankLedger));
			virtualBankLedger.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectAllChckbox));
			selectAllChckbox.click();
			Thread.sleep(1000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
						
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=3 && i!=33)
				{
				String data = reportTableCells.get(i).getText();
				if(data.isEmpty()==false){
					
					reportPage1ListArray.add(data);
				}
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 242, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 242, 7, actPage1List);

			
									
			
			System.out.println("*****************************************checkVirtualBankLedgerBookReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			
			
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List)  ) 
			{
				
				excelReader.setCellData(xlfile, xlSheetName, 241, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 241, 8, resFail);
				return false;
			}
		}


				
		@FindBy(xpath="(//*[@id='FilterFields_722_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement VirtualBankLedgerBookreport_FilterAccountNameChkbox;
		
		//@FindBy(xpath="(//input[@id='5002'])[2]")
		//private static WebElement report_FilterCashbankACNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_722_0_DefaultFilter_0']")
		private static WebElement VirtualBankLedgerBook_DefaultFilterTxt;
		
		
		public boolean checkVirtualBankLedgerBookReportFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			Thread.sleep(3000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VirtualBankLedgerBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				VirtualBankLedgerBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VirtualBankLedgerBook_DefaultFilterTxt));
			VirtualBankLedgerBook_DefaultFilterTxt.click();
			VirtualBankLedgerBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 244, 5));
			
			Thread.sleep(2000);
			
			VirtualBankLedgerBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=3 && i!=45)
				{
				String data = reportTableCells.get(i).getText();
				if(data.isEmpty()==false){
					
					reportPage1ListArray.add(data);
				}
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 245, 6);
			excelReader.setCellData(xlfile, xlSheetName, 245, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, Pmt : 1, Bank, , , , 6.00, , , 6.00, , 6.00, , 6.00, , 14, NDT50 : 1, Sales - Computers, , , , , , 100.00, 100.00, , 100.00, , 7.00, , 15, NDT46 : 2, Customer A, , , , , , 6.00, 6.00, , 6.00, , 0.42, , 16, NDT45 : 1, Vendor B, , , , , 63.00, , , 63.00, , 63.00, , 4.41, 17, NDT50 : 5, Customer A, , , , , 30.00, , , 30.00, , 30.00, , 2.10, 18, SalRet : 1, Customer A, , , , , , 120.00, 120.00, , 120.00, , 8.40, , 19, NDT55 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 20, NDT51 : 1, Vendor B, , , , , 31.50, , , 31.50, , 31.50, , 2.21, 21, Rct : 1, Customer A, , , , , , 6.00, 6.00, , 6.00, , 6.00, , 22, NDT44 : 1, Bank, , , 100.00, , , , , 100.00, , 100.00, , 7.00, 23, NDT52 : 1, Bank, , , 50.00, , , , , 50.00, , 50.00, , 3.50, 24, Rct : 2, HDFC, , , , 6.00, , , 6.00, , 6.00, , 6.00, ]";			
			*/
			System.out.println("***************************checkVirtualBankLedgerBookReportFilterOption*********************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
			//System.out.println(actPage2List);
			
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VirtualBankLedgerBookreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				VirtualBankLedgerBookreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 7; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 246, 6);
			excelReader.setCellData(xlfile, xlSheetName, 246, 7, actRowCount);

			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) 
					 && actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 243, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 243, 8, resFail);
				return false;
			}
		}
		
		
		@FindBy (xpath="//*[@id='id_reportmenudisplay']/ul/li[4]")
		private static WebElement sl_ReportPrintBtn;
		
		public boolean checkVirtualBankLedgerPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 248, 6);
			excelReader.setCellData(xlfile, xlSheetName, 248, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkVirtualBankLedgerPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 247, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 247, 8, resFail);
				return false;
			}
		}

		
		@FindBy(xpath="//*[@id='dvmainBacktracking']/div[2]/div/table")
		private static WebElement backTrackItemDetailsMonthsTable;

		@FindBy(xpath="//*[@id='dvmainBacktracking']/div[2]/div/table/tbody//td[1]")
		private static List<WebElement> backTrackItemDetailsMonthsTableList;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[2]/table")
		private static WebElement backTrackItemDetailsDaysTable;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[2]/table/tbody//td[1]")
		private static List<WebElement> backTrackItemDetailsDaysTableList;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[3]/table/tbody//td[1]")
		private static List<WebElement> backTrackItemDetailsVouchersTableList;
		
		@FindBy(xpath="(//*[@id='dvmainBacktracking']/div[2]/div)[3]/table")
		private static WebElement backTrackItemDetailsVouchersTable;

		public boolean checkVirtualBankLedgerBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 250, 5)))
                         {
                    		 
                    		 reportTableColumn2RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 250, 6);
			excelReader.setCellData(xlfile, xlSheetName, 250, 7, actMonthList);
		
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 251, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 251, 6);
			excelReader.setCellData(xlfile, xlSheetName, 251, 7, actDay);
		
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 252, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 252, 6);
			excelReader.setCellData(xlfile, xlSheetName, 252, 7, actVoucherList);

			System.out.println(actVoucherList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 253, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 254, 6);
			excelReader.setCellData(xlfile, xlSheetName, 254, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		 		String  actDocNo = documentNumberTxt.getAttribute("value");
				String expDocNo =  excelReader.getCellData(xlSheetName, 255, 6);
				excelReader.setCellData(xlfile, xlSheetName,255, 7, actDocNo);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount =  excelReader.getCellData(xlSheetName, 256, 6);
				excelReader.setCellData(xlfile, xlSheetName, 256, 7, actAccount);

				
			
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = excelReader.getCellData(xlSheetName,257, 6);
				excelReader.setCellData(xlfile, xlSheetName, 257, 7, actDepartment);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 258, 6);
				excelReader.setCellData(xlfile, xlSheetName, 258, 7, actPlaceOfSupply);


				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction = excelReader.getCellData(xlSheetName, 259, 6);
				excelReader.setCellData(xlfile, xlSheetName, 259, 7, actJurisdiction);

				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Account = select1stRow_1stColumn.getText();
				String expR1Account = excelReader.getCellData(xlSheetName, 260, 6);
				excelReader.setCellData(xlfile, xlSheetName, 260, 7, actR1Account);

				
				String actR1Taxcode= select1stRow_2ndColumn.getText();
				String expR1Taxcode= excelReader.getCellData(xlSheetName, 261, 6);
				excelReader.setCellData(xlfile, xlSheetName, 261, 7, actR1Taxcode);

					
				String actR1Amount = select1stRow_3rdColumn.getText();
				String expR1Amount = excelReader.getCellData(xlSheetName, 262, 6);
				excelReader.setCellData(xlfile, xlSheetName, 262, 7, actR1Amount);

				
				String actR1Reference = select1stRow_4thColumn.getText();
				String expR1Reference = excelReader.getCellData(xlSheetName, 263, 6);
				excelReader.setCellData(xlfile, xlSheetName, 263, 7, actR1Reference);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
				String actR2Account = select2ndRow_1stColumn.getText();
				String expR2Account = excelReader.getCellData(xlSheetName, 264, 6);
				excelReader.setCellData(xlfile, xlSheetName, 264, 7, actR2Account);

				
				String actR2Taxcode= select2ndRow_2ndColumn.getText();
				String expR2Taxcode= excelReader.getCellData(xlSheetName, 265, 6);
				excelReader.setCellData(xlfile, xlSheetName, 265, 7, actR2Taxcode);

					
				String actR2Amount = select2ndRow_3rdColumn.getText();
				String expR2Amount = excelReader.getCellData(xlSheetName, 266, 6);
				excelReader.setCellData(xlfile, xlSheetName, 266, 7, actR2Amount);

				
				String actR2Reference = select2ndRow_4thColumn.getText();
				String expR2Reference = excelReader.getCellData(xlSheetName, 267, 6);
				excelReader.setCellData(xlfile, xlSheetName, 267, 7, actR2Reference);

				
				
				
						

			 	
				System.out.println("**********************checkDayBookReportBackTrackOption*********************");
				 
				System.out.println("Open Tabs		:"			+	actOpenWindowsCount 	+		"Value Expected"		+	expOpenWindowsCount);
				
				System.out.println("Document No		:"		+		actDocNo		+		"Value Expected"		+		expDocNo);
				System.out.println("Account			:"		+		actAccount		+		"Value Expected"		+		actAccount);
				System.out.println("Department		:"		+actDepartment			+		"Value Expected"		+		expDepartment);
				System.out.println("Placeofsupply	:"		+actPlaceOfSupply			+		"Value Expected"		+	expPlaceOfSupply);
				System.out.println("Jurcidition		:"		+actJurisdiction			+		"Value Expected"		+	expJurisdiction);

				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR1Account);
				System.out.println("Taxcode:"			+actR1Taxcode			+		"Value Expected  "+expR1Taxcode);

				System.out.println("Amount: "			+actR1Amount		+		"Value Expected  "		+expR1Amount);
				System.out.println("Reference: "		+actR1Reference		+		"Value Expected  "		+expR1Reference);
				
		System.out.println("*******************************ROW2**********************************");
				
				System.out.println("AccountName: "		+		actAccount	+	"Value Expected  "		+expR2Account);
				System.out.println("Taxcode:"			+actR2Taxcode			+		"Value Expected  "+expR2Taxcode);

				System.out.println("Amount: "			+actR2Amount		+		"Value Expected  "		+expR2Amount);
				System.out.println("Reference: "		+actR2Reference		+		"Value Expected  "		+expR2Reference);
				
					
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				if ( actOpenWindowsCount.equals(expOpenWindowsCount)
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Account.equalsIgnoreCase(expR1Account) 
					   && actR1Taxcode.equalsIgnoreCase(expR1Taxcode)&& actR1Amount.equalsIgnoreCase(expR1Amount)&& actR1Reference.equalsIgnoreCase(expR1Reference) 
					   &&actR2Account.equalsIgnoreCase(expR2Account)  && actR2Taxcode.equalsIgnoreCase(expR2Taxcode)&& actR2Amount.equalsIgnoreCase(expR2Amount)&& actR2Reference.equalsIgnoreCase(expR2Reference)  )
				//if(actDocNo.equalsIgnoreCase(expDocNo))
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();*/
					excelReader.setCellData(xlfile, xlSheetName, 249, 8, resPass);
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();*/
					excelReader.setCellData(xlfile, xlSheetName,249, 8, resFail);
					return false;
				}
			
			}
	
	
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[6]")
		private static WebElement salesReportMenu;
		
		@FindBy(xpath="//span[contains(text(),'Sales Register')]")
		private static WebElement salesRegister;
		
		@FindBy(xpath="//span[contains(text(),'Summary Sales Book')]")
		private static WebElement summarySalesBook;
		
		@FindBy(xpath="//span[contains(text(),'Sales Return Register')]")
		private static WebElement salesReturnRegister;
		
		@FindBy(xpath="//span[contains(text(),'Monthly Sales Book')]")
		private static WebElement monthlySalesBook;
		
		@FindBy(xpath="//span[contains(text(),'Top Customers List')]")
		private static WebElement topCustomersList;
		
		
		
		
		
		public boolean checkSalesRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegister));
			salesRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 345, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("DD/MM/YYYY");
			String Row2Month = df.format(cal.getTime());
			
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				
				
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			//String expRow1List = "["+Row2Month+" NDT50 : 1, BR COGS ITEM, 100.00, 10.00"+"]";
			String expRow1List=excelReader.getCellData(xlSheetName, 346, 6);
            excelReader.setCellData(xlfile, xlSheetName, 346, 7, actRow1List);

			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				
				
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 347, 6);
            excelReader.setCellData(xlfile, xlSheetName, 347, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				
				
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
				
			
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 348, 6);
            excelReader.setCellData(xlfile, xlSheetName, 348, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
				
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 349, 6);
            excelReader.setCellData(xlfile, xlSheetName, 349, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
				
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 350, 6);
            excelReader.setCellData(xlfile, xlSheetName, 350, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = excelReader.getCellData(xlSheetName, 351, 6);
            excelReader.setCellData(xlfile, xlSheetName, 351, 7, actRow6List);

			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = excelReader.getCellData(xlSheetName, 352, 6);
            excelReader.setCellData(xlfile, xlSheetName, 352, 7, actRow7List);

					
					
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = excelReader.getCellData(xlSheetName, 353, 6);
            excelReader.setCellData(xlfile, xlSheetName, 353, 7, actRow8List);

			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = excelReader.getCellData(xlSheetName, 354, 6);
            excelReader.setCellData(xlfile, xlSheetName, 354, 7, actRow9List);

			
			System.out.println("*********************************checkSalesRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
		
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) 
				&& actRow8List.equalsIgnoreCase(expRow8List)&& actRow9List.equalsIgnoreCase(expRow9List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 344, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 344, 8, resFail);
				return false;
			}
		}
		
		
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
		
		public boolean checkSalesRegisterReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegister));
			salesRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 411, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 412, 6);
            excelReader.setCellData(xlfile, xlSheetName, 412, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 413, 6);
            excelReader.setCellData(xlfile, xlSheetName, 413, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 414, 6);
            excelReader.setCellData(xlfile, xlSheetName, 414, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List= excelReader.getCellData(xlSheetName, 415, 6);
            excelReader.setCellData(xlfile, xlSheetName, 415, 7, actRow1List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 416, 6);
            excelReader.setCellData(xlfile, xlSheetName, 416, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = excelReader.getCellData(xlSheetName, 417, 6);
            excelReader.setCellData(xlfile, xlSheetName, 417, 7, actRow6List);

			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 418, 6);
            excelReader.setCellData(xlfile, xlSheetName, 418, 7, actRow7List);

					
					
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = excelReader.getCellData(xlSheetName, 419, 6);
            excelReader.setCellData(xlfile, xlSheetName, 419, 7, actRow8List);

			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List =excelReader.getCellData(xlSheetName, 420, 6);
            excelReader.setCellData(xlfile, xlSheetName, 420, 7, actRow9List);

			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List =excelReader.getCellData(xlSheetName, 421, 6);
            excelReader.setCellData(xlfile, xlSheetName, 421, 7, actRow10List);

			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = excelReader.getCellData(xlSheetName, 422, 6);
            excelReader.setCellData(xlfile, xlSheetName, 422, 7, actRow11List);

			
			
			
			
			
			System.out.println("*********************************checkSalesRegisterReportwithIncludeSalesOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) 
				&& actRow8List.equalsIgnoreCase(expRow8List)&& actRow9List.equalsIgnoreCase(expRow9List)
				&& actRow10List.equalsIgnoreCase(expRow10List)&& actRow11List.equalsIgnoreCase(expRow11List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 410, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 410, 8, resFail);
				return false;
			}
		}
		
		
		
		
				
		
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;

		@FindBy(xpath="//*[@id='FOption_503_0_DefaultFilter_0']")
		private static WebElement salesRegister_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_503_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement salesRegisterreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkSalesRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
            excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				salesRegisterreport_FilterWarehouseNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegister_DefaultFilterTxt));
			salesRegister_DefaultFilterTxt.click();
			salesRegister_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 356, 5));
			
			Thread.sleep(2000);
			
			salesRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 357, 6);
            excelReader.setCellData(xlfile, xlSheetName, 357, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 358, 6);
            excelReader.setCellData(xlfile, xlSheetName, 358, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 359, 6);
            excelReader.setCellData(xlfile, xlSheetName, 359, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 360, 6);
            excelReader.setCellData(xlfile, xlSheetName, 360, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 361, 6);
            excelReader.setCellData(xlfile, xlSheetName, 361, 7, actRow5List);

			
			
			
		/*	int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[]";*/
			
			System.out.println("****************************checkSalesRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			//System.out.println(actRow6List);
			//System.out.println(expRow6List);
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				salesRegisterreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
		//	int actRowCount = reportsRowsCount.size();
			//int expRowCount = 9; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 362, 6);
			excelReader.setCellData(xlfile, xlSheetName, 362, 7, actRowCount);

			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && /*actRow6List.equalsIgnoreCase(expRow6List)*/ 
				 actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 355, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 355, 8, resFail);
				return false;
			}
		}
		
		
		public boolean checkSalesRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 366, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 367, 6);
		excelReader.setCellData(xlfile, xlSheetName, 367, 7, actOpenWindowsCount);


	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 368, 6);
		excelReader.setCellData(xlfile, xlSheetName, 368, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor =excelReader.getCellData(xlSheetName, 369, 6);
		excelReader.setCellData(xlfile, xlSheetName, 369, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 370, 6);
		excelReader.setCellData(xlfile, xlSheetName, 370, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 371, 6);
		excelReader.setCellData(xlfile, xlSheetName, 371, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 372, 6);
		excelReader.setCellData(xlfile, xlSheetName, 372, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = excelReader.getCellData(xlSheetName, 373, 6);
		excelReader.setCellData(xlfile, xlSheetName, 373, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = excelReader.getCellData(xlSheetName, 374, 6);
		excelReader.setCellData(xlfile, xlSheetName, 374, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 375, 6);
		excelReader.setCellData(xlfile, xlSheetName, 375, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 376, 6);
		excelReader.setCellData(xlfile, xlSheetName, 376, 7, actR1TaxCode);

		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount =excelReader.getCellData(xlSheetName, 377, 6);
		excelReader.setCellData(xlfile, xlSheetName, 377, 7, actR1SalesAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = excelReader.getCellData(xlSheetName, 378, 6);
		excelReader.setCellData(xlfile, xlSheetName, 378, 7, actR1Units);

		
		String actR1Quantity = select1stRow_11thColumn.getText();
		String expR1Quantity =excelReader.getCellData(xlSheetName, 379, 6);
		excelReader.setCellData(xlfile, xlSheetName, 379, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_14thColumn.getText();
		String expR1Rate =excelReader.getCellData(xlSheetName, 380, 6);
		excelReader.setCellData(xlfile, xlSheetName, 380, 7, actR1Rate);

		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 381, 6);
		excelReader.setCellData(xlfile, xlSheetName, 381, 7, actR1Gross);

		
		String actR1Batch = select1stRow_18thColumn.getText();
		String expR1Batch =excelReader.getCellData(xlSheetName, 382, 6);
		excelReader.setCellData(xlfile, xlSheetName, 382, 7, actR1Batch);


		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select3rdRow_1stColumn.getText();
		String expR2Warehouse = excelReader.getCellData(xlSheetName, 383, 6);
		excelReader.setCellData(xlfile, xlSheetName, 383, 7, actR2Warehouse);

		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = excelReader.getCellData(xlSheetName, 384, 6);
		excelReader.setCellData(xlfile, xlSheetName, 384, 7, actR2Item);

		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = excelReader.getCellData(xlSheetName, 385, 6);
		excelReader.setCellData(xlfile, xlSheetName, 385, 7, actR2TaxCode);

		
		String actR2SalesAccount = select2ndRow_4thColumn.getText();
		String expR2SalesAccount = excelReader.getCellData(xlSheetName, 386, 6);
		excelReader.setCellData(xlfile, xlSheetName, 386, 7, actR2SalesAccount);

		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = excelReader.getCellData(xlSheetName, 387, 6);
		excelReader.setCellData(xlfile, xlSheetName, 387, 7, actR2Units);

		
		String actR2Quantity = select2ndRow_11thColumn.getText();
		String expR2Quantity =excelReader.getCellData(xlSheetName, 388, 6);
		excelReader.setCellData(xlfile, xlSheetName, 388, 7, actR2Quantity);

		
		String actR2Rate = select2ndRow_14thColumn.getText();
		String expR2Rate =excelReader.getCellData(xlSheetName, 389, 6);
		excelReader.setCellData(xlfile, xlSheetName, 389, 7, actR2Rate);

		
		String actR2Gross = select2ndRow_15thColumn.getText();
		String expR2Gross = excelReader.getCellData(xlSheetName, 390, 6);
		excelReader.setCellData(xlfile, xlSheetName, 390, 7, actR2Gross);

		
		String actR2Batch = select2ndRow_18thColumn.getText();
		String expR2Batch =excelReader.getCellData(xlSheetName, 391, 6);
		excelReader.setCellData(xlfile, xlSheetName, 391, 7, actR2Batch);


			
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
		String actR3Warehouse = select2ndRow_1stColumn.getText();
		String expR3Warehouse =excelReader.getCellData(xlSheetName, 392, 6);
		excelReader.setCellData(xlfile, xlSheetName, 392, 7, actR3Warehouse);

		
		String actR3Item = select3rdRow_2ndColumn.getText();
		String expR3Item = excelReader.getCellData(xlSheetName, 393, 6);
		excelReader.setCellData(xlfile, xlSheetName, 393, 7, actR3Item);

		
		String actR3TaxCode = select3rdRow_3rdColumn.getText();
		String expR3TaxCode =excelReader.getCellData(xlSheetName, 394, 6);
		excelReader.setCellData(xlfile, xlSheetName, 394, 7, actR3TaxCode);

		
		String actR3SalesAccount = select3rdRow_4thColumn.getText();
		String expR3SalesAccount = excelReader.getCellData(xlSheetName, 395, 6);
		excelReader.setCellData(xlfile, xlSheetName, 395, 7, actR3SalesAccount);

		
		String actR3Units = select3rdRow_5thColumn.getText();
		String expR3Units = excelReader.getCellData(xlSheetName, 396, 6);
		excelReader.setCellData(xlfile, xlSheetName, 396, 7, actR3Units);

		
		String actR3Quantity = select3rdRow_11thColumn.getText();
		String expR3Quantity = excelReader.getCellData(xlSheetName, 397, 6);
		excelReader.setCellData(xlfile, xlSheetName, 397, 7, actR3Quantity);

		
		String actR3Rate = select3rdRow_14thColumn.getText();
		String expR3Rate =	excelReader.getCellData(xlSheetName, 398, 6);
		excelReader.setCellData(xlfile, xlSheetName, 398, 7, actR3Rate);

		String actR3Gross = select3rdRow_15thColumn.getText();
		String expR3Gross =excelReader.getCellData(xlSheetName, 399, 6);
		excelReader.setCellData(xlfile, xlSheetName, 399, 7, actR3Gross);

		
		String actR3Batch = select3rdRow_18thColumn.getText();
		String expR3Batch = excelReader.getCellData(xlSheetName, 400, 6);
		excelReader.setCellData(xlfile, xlSheetName, 400, 7, actR3Batch);


		
		
		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
		String actR4Warehouse = select4thRow_1stColumn.getText();
		String expR4Warehouse =excelReader.getCellData(xlSheetName, 401, 6);
		excelReader.setCellData(xlfile, xlSheetName, 401, 7, actR4Warehouse);

		
		String actR4Item = select4thRow_2ndColumn.getText();
		String expR4Item = excelReader.getCellData(xlSheetName, 402, 6);
		excelReader.setCellData(xlfile, xlSheetName, 402, 7, actR4Item);

		
		String actR4TaxCode = select4thRow_3rdColumn.getText();
		String expR4TaxCode =excelReader.getCellData(xlSheetName, 403, 6);
		excelReader.setCellData(xlfile, xlSheetName, 403, 7, actR4TaxCode);

		
		String actR4SalesAccount = select4thRow_4thColumn.getText();
		String expR4SalesAccount =excelReader.getCellData(xlSheetName, 404, 6);
		excelReader.setCellData(xlfile, xlSheetName, 404, 7, actR4SalesAccount);

		
		String actR4Units = select2ndRow_5thColumn.getText();
		String expR4Units = excelReader.getCellData(xlSheetName, 405, 6);
		excelReader.setCellData(xlfile, xlSheetName, 405, 7, actR4Units);

		
		String actR4Quantity = select4thRow_11thColumn.getText();
		String expR4Quantity =excelReader.getCellData(xlSheetName, 406, 6);
		excelReader.setCellData(xlfile, xlSheetName, 406, 7, actR4Quantity);

		
		String actR4Rate = select4thRow_14thColumn.getText();
		String expR4Rate = excelReader.getCellData(xlSheetName, 407, 6);
		excelReader.setCellData(xlfile, xlSheetName, 407, 7, actR4Rate);

		
		String actR4Gross = select4thRow_15thColumn.getText();
		String expR4Gross =excelReader.getCellData(xlSheetName, 408, 6);
		excelReader.setCellData(xlfile, xlSheetName, 408, 7, actR4Gross);

		
		String actR4Batch = select4thRow_18thColumn.getText();
		String expR4Batch =excelReader.getCellData(xlSheetName, 409, 6);
		excelReader.setCellData(xlfile, xlSheetName, 409, 7, actR4Batch);


		

	 	
		System.out.println("**********************checkSalesRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("SalesAccount : "+actR2SalesAccount	+"  Value Expected  "+expR2SalesAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		
		
	System.out.println("*******************************ROW3**********************************");
		
		System.out.println("Warehouse       : "+actR3Warehouse			+"  Value Expected  "+expR3Warehouse);
		System.out.println("Item            : "+actR3Item				+"  Value Expected  "+expR3Item);
		System.out.println("TaxCode         : "+actR3TaxCode			+"  Value Expected  "+expR3TaxCode);
		System.out.println("SalesAccount : "+actR3SalesAccount	+"  Value Expected  "+expR3SalesAccount);
		System.out.println("Units           : "+actR3Units				+"  Value Expected  "+expR3Units);
		System.out.println("Quantity        : "+actR3Quantity			+"  Value Expected  "+expR3Quantity);
		System.out.println("Rate            : "+actR3Rate				+"  Value Expected  "+expR3Rate);
		System.out.println("Gross           : "+actR3Gross				+"  Value Expected  "+expR3Gross);
		System.out.println("Batch           : "+actR3Batch				+"  Value Expected  "+expR3Batch);
		
		
	System.out.println("*******************************ROW4**********************************");
		
		System.out.println("Warehouse       : "+actR4Warehouse			+"  Value Expected  "+expR4Warehouse);
		System.out.println("Item            : "+actR4Item				+"  Value Expected  "+expR4Item);
		System.out.println("TaxCode         : "+actR4TaxCode			+"  Value Expected  "+expR4TaxCode);
		System.out.println("SalesAccount : "+actR4SalesAccount	+"  Value Expected  "+expR4SalesAccount);
		System.out.println("Units           : "+actR4Units				+"  Value Expected  "+expR4Units);
		System.out.println("Quantity        : "+actR4Quantity			+"  Value Expected  "+expR4Quantity);
		System.out.println("Rate            : "+actR4Rate				+"  Value Expected  "+expR4Rate);
		System.out.println("Gross           : "+actR4Gross				+"  Value Expected  "+expR4Gross);
		System.out.println("Batch           : "+actR4Batch				+"  Value Expected  "+expR4Batch);
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  
			   && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2SalesAccount.equalsIgnoreCase(expR2SalesAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch)
			  
			   &&actR2Warehouse.equalsIgnoreCase(expR3Warehouse) 
			   && actR3Item.equalsIgnoreCase(expR3Item) && actR3TaxCode.equalsIgnoreCase(expR3TaxCode) && actR3SalesAccount.equalsIgnoreCase(expR3SalesAccount) 
			   && actR3Units.equalsIgnoreCase(expR3Units) && actR3Quantity.equalsIgnoreCase(expR3Quantity) && actR3Rate.equalsIgnoreCase(expR3Rate) 
			   && actR3Gross.equalsIgnoreCase(expR3Gross) && actR3Batch.equalsIgnoreCase(expR3Batch)
			  
			   &&actR4Warehouse.equalsIgnoreCase(expR4Warehouse) 
			   && actR4Item.equalsIgnoreCase(expR4Item) && actR4TaxCode.equalsIgnoreCase(expR4TaxCode) && actR4SalesAccount.equalsIgnoreCase(expR4SalesAccount) 
			   && actR4Units.equalsIgnoreCase(expR4Units) && actR4Quantity.equalsIgnoreCase(expR4Quantity) && actR4Rate.equalsIgnoreCase(expR4Rate) 
			   && actR4Gross.equalsIgnoreCase(expR4Gross) && actR4Batch.equalsIgnoreCase(expR4Batch) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 365, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
*/			 excelReader.setCellData(xlfile, xlSheetName, 365, 8, resFail);
			return false;
		}
	}

		public boolean checkSalesRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 364, 6);
			excelReader.setCellData(xlfile, xlSheetName, 364, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(3000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 363, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 363, 8, resFail);
				return false;
			}
		}

		

		public boolean checkSalesReturnsRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegister));
			salesReturnRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 424, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 425, 6);
            excelReader.setCellData(xlfile, xlSheetName, 425, 7,actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 426, 6);
            excelReader.setCellData(xlfile, xlSheetName, 426, 7,actRow2List);

			
			
			
						
			System.out.println("*********************************checkSalesReturnRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 423, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 423, 8, resFail);
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_504_0_DefaultFilter_0']")
		private static WebElement salesReturnRegister_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_504_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement salesReturnRegisterreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkSalesReturnRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				salesReturnRegisterreport_FilterWarehouseNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegister_DefaultFilterTxt));
			salesReturnRegister_DefaultFilterTxt.click();
			salesReturnRegister_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 428, 5));
			
			Thread.sleep(2000);
			
			salesReturnRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 429, 6);
            excelReader.setCellData(xlfile, xlSheetName, 429, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 430, 6);
            excelReader.setCellData(xlfile, xlSheetName, 430, 7, actRow2List);

			
			
			
				
			System.out.println("****************************checkSalesReturnRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnRegisterreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				salesReturnRegisterreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 2; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 431, 6);
			excelReader.setCellData(xlfile, xlSheetName, 431, 7, actRowCount);


			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRowCount.equals(expRowCount))
			{
				 excelReader.setCellData(xlfile, xlSheetName, 427, 8, resPass);
				return true;
			} 
			else 
			{
				 excelReader.setCellData(xlfile, xlSheetName, 427, 8, resFail);
				return false;
			}
		}
		
		
		public boolean checkSalesReturnRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 435, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 436, 6);
		excelReader.setCellData(xlfile, xlSheetName, 436, 7, actOpenWindowsCount);


	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 437, 6);
		excelReader.setCellData(xlfile, xlSheetName, 437, 7, actDocNo);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 438, 6);
		excelReader.setCellData(xlfile, xlSheetName, 438, 7, actVendor);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 439, 6);
		excelReader.setCellData(xlfile, xlSheetName, 439, 7, actCurrency);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 440, 6);
		excelReader.setCellData(xlfile, xlSheetName, 440, 7, actDepartment);


		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = "Abu Dhabi";

		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = "Dubai";
*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = excelReader.getCellData(xlSheetName, 441, 6);
		excelReader.setCellData(xlfile, xlSheetName, 441, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item =excelReader.getCellData(xlSheetName, 442, 6);
		excelReader.setCellData(xlfile, xlSheetName, 442, 7, actR1Item);

		
		String actR1SalesAccount = select1stRow_3rdColumn.getText();
		String expR1SalesAccount = excelReader.getCellData(xlSheetName, 443, 6);
		excelReader.setCellData(xlfile, xlSheetName, 443, 7, actR1SalesAccount);

		
		//String actR1TaxCode = select1stRow_3rdColumn.getText();
		//String expR1TaxCode = "Std Rat";
		
		
		
		String actR1Units = select1stRow_4thColumn.getText();
		String expR1Units =excelReader.getCellData(xlSheetName, 444, 6);
		excelReader.setCellData(xlfile, xlSheetName, 444, 7, actR1Units);

		
		String actR1Quantity = select1stRow_6thColumn.getText();
		String expR1Quantity = excelReader.getCellData(xlSheetName, 445, 6);
		excelReader.setCellData(xlfile, xlSheetName, 445, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_8thColumn.getText();
		String expR1Rate =excelReader.getCellData(xlSheetName, 446, 6);
		excelReader.setCellData(xlfile, xlSheetName, 446, 7, actR1Rate);

		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 447, 6);
		excelReader.setCellData(xlfile, xlSheetName, 447, 7, actR1Gross);

		
		//String actR1Batch = select1stRow_16thColumn.getText();
		//String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
		
		

	 	
		System.out.println("**********************checkSalesReturnReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		//System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		//System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) //&& actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			  // && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) /*&& actR1TaxCode.equalsIgnoreCase(expR1TaxCode) */&& actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)// && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  
			  ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 434, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
*/			excelReader.setCellData(xlfile, xlSheetName, 434, 8, resFail);
			return false;
		}
	}

		public boolean checkSalesReturnRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 433, 6);
			excelReader.setCellData(xlfile, xlSheetName, 433, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesReturnRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 432, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 432, 8, resFail);
				return false;
			}
		}



		
		
		
		public boolean checkSummarySalesBookReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBook));
			summarySalesBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 449, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 450, 6);
            excelReader.setCellData(xlfile, xlSheetName, 450, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 451, 6);
            excelReader.setCellData(xlfile, xlSheetName, 451, 7, actRow2List);

			
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 452, 6);
            excelReader.setCellData(xlfile, xlSheetName, 452, 7, actRow3List);

			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 453, 6);
            excelReader.setCellData(xlfile, xlSheetName, 453, 7, actRow4List);

			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 454, 6);
            excelReader.setCellData(xlfile, xlSheetName, 454, 7, actRow5List);

			
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 455, 6);
            excelReader.setCellData(xlfile, xlSheetName, 455, 7, actRow6List);

			
			
			
						
			System.out.println("*********************************checkSummarySalesBookReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)
					&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 448, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 448, 8, resFail);
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_505_0_DefaultFilter_0']")
		private static WebElement summarySalesBook_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_505_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement summarySalesBookreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkSummarySalesBookReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				summarySalesBookreport_FilterWarehouseNameChkbox.click();
			}
			
			
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBook_DefaultFilterTxt));
			summarySalesBook_DefaultFilterTxt.click();
			summarySalesBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 457, 5));
			
			Thread.sleep(2000);
			
			summarySalesBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 458, 6);
            excelReader.setCellData(xlfile, xlSheetName, 458, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 459, 6);
            excelReader.setCellData(xlfile, xlSheetName, 459, 7, actRow2List);

			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 460, 6);
            excelReader.setCellData(xlfile, xlSheetName, 460, 7, actRow1List);

			
			/*
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "";
			
			*/
				
			System.out.println("****************************checkSummarySalesBookReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				summarySalesBookreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 6; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 461, 6);
			excelReader.setCellData(xlfile, xlSheetName, 461, 7, actRowCount);



			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRow3List.equalsIgnoreCase(expRow3List)&&actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 456, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 456, 8, resFail);
				return false;
			}
		}
		
		
		public boolean checkSummarySalesBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 463, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 464, 6);
		excelReader.setCellData(xlfile, xlSheetName, 464, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 465, 6);
		excelReader.setCellData(xlfile, xlSheetName, 465, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 466, 6);
		excelReader.setCellData(xlfile, xlSheetName, 466, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency =excelReader.getCellData(xlSheetName, 467, 6);
		excelReader.setCellData(xlfile, xlSheetName, 467, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 468, 6);
		excelReader.setCellData(xlfile, xlSheetName, 468, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 469, 6);
		excelReader.setCellData(xlfile, xlSheetName, 469, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 470, 6);
		excelReader.setCellData(xlfile, xlSheetName, 470, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse =excelReader.getCellData(xlSheetName, 471, 6);
		excelReader.setCellData(xlfile, xlSheetName, 471, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item =excelReader.getCellData(xlSheetName, 472, 6);
		excelReader.setCellData(xlfile, xlSheetName, 472, 7, actR1Item);

		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount = excelReader.getCellData(xlSheetName, 473, 6);
		excelReader.setCellData(xlfile, xlSheetName, 473, 7, actR1SalesAccount);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 474, 6);
		excelReader.setCellData(xlfile, xlSheetName, 474, 7, actR1TaxCode);

		
		
		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = excelReader.getCellData(xlSheetName, 475, 6);
		excelReader.setCellData(xlfile, xlSheetName, 475, 7, actR1Units);

		
		String actR1Quantity = select1stRow_11thColumn.getText();
		String expR1Quantity = excelReader.getCellData(xlSheetName, 476, 6);
		excelReader.setCellData(xlfile, xlSheetName, 476, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_14thColumn.getText();
		String expR1Rate =excelReader.getCellData(xlSheetName, 477, 6);
		excelReader.setCellData(xlfile, xlSheetName, 477, 7, actR1Rate);

		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 478, 6);
		excelReader.setCellData(xlfile, xlSheetName, 478, 7, actR1Gross);

		
		String actR1Batch = select1stRow_19thColumn.getText();
		String expR1Batch = excelReader.getCellData(xlSheetName, 479, 6);
		excelReader.setCellData(xlfile, xlSheetName, 479, 7, actR1Batch);


		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
		
		

	 	
		System.out.println("**********************checkSalesReturnReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  
			  ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 462, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 462, 8, resFail);
			return false;
		}
	}

			
		public boolean checkSummarySalesBookReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summarySalesBook));
			summarySalesBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 481, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 482, 6);
           excelReader.setCellData(xlfile, xlSheetName, 482, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 483, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 483, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 484, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 484, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 485, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 485, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 486, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 486, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 487, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 487, 7, actRow6List);

			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 488, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 488, 7, actRow7List);

					
					
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List =excelReader.getCellData(xlSheetName, 489, 6);
	           excelReader.setCellData(xlfile, xlSheetName, 489, 7, actRow8List);
			
			
			
			System.out.println("*********************************checkSummarySalesRegisterReportwithIncludeSalesOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) && actRow7List.equalsIgnoreCase(expRow7List) 
				&& actRow8List.equalsIgnoreCase(expRow8List)/*&& actRow9List.equalsIgnoreCase(expRow9List)
				//&& actRow10List.equalsIgnoreCase(expRow10List)&& actRow11List.equalsIgnoreCase(expRow11List)*/)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName,480, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 480, 8, resFail);
				return false;
			}
		}
		

		
		public boolean checkMonthlySalesBookReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBook));
			monthlySalesBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 491, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 492,6);
            
          excelReader.setCellData(xlfile, xlSheetName, 492, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 493,6);
            
          excelReader.setCellData(xlfile, xlSheetName, 493, 7, actRow2List);

			
			
			
						
			System.out.println("*********************************checkMonthlySalesBookReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 490, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 490, 8, resFail);
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_628_0_DefaultFilter_0']")
		private static WebElement monthlySalesBook_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_628_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement monthlySalesBookreport_FilterWarehouseNameChkbox;
		
		
		
		
		public boolean checkMonthlySalesBookReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				monthlySalesBookreport_FilterWarehouseNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBook_DefaultFilterTxt));
			monthlySalesBook_DefaultFilterTxt.click();
			monthlySalesBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 497, 5));
			
			Thread.sleep(2000);
			
			monthlySalesBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 498, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 498, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 499, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 499, 7, actRow2List);

			
			
			
				
			System.out.println("****************************checkMonthlySalesBookReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(monthlySalesBookreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				monthlySalesBookreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 2; 
			
			String actRowCount=String.valueOf( reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 500, 6);
			excelReader.setCellData(xlfile, xlSheetName, 500, 7, actRowCount);

			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 496, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 496, 8, resFail);
				return false;
			}
		}

			
		public boolean checkMonthlySalesBookPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 495, 6);
			excelReader.setCellData(xlfile, xlSheetName, 495, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkMonthlysSalesBookPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName,494, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 494, 8, resFail);
				return false;
			}
		}

			
		
		
		
	
		
		
		
		public boolean checkTopCustomersListReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReportMenu));
			salesReportMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(topCustomersList));
			topCustomersList.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 502, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 503, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 503, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 504, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 504, 7, actRow2List);

			
			
			
						
			System.out.println("*********************************checkCustomersListReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 501, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 501, 8, resFail);
				return false;
			}
		}
		
		
		
				
		
		
		
				
		
		/*@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="//input[@id='5058']")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_629_0_DefaultFilter_0']")
		private static WebElement TopCustomersList_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_629_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement TopCustomersListreport_FilterAccountNameChkbox;
		
		
		
		
		public boolean checkTopCustomersListReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			Thread.sleep(2000);
			getAction().moveToElement(report_FilterAccountExpansion).build().perform();


			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccountExpansion));
			report_FilterAccountExpansion.click();
			
			Thread.sleep(2000);
			getAction().moveToElement(TopCustomersListreport_FilterAccountNameChkbox).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TopCustomersListreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==false) 
			{
				TopCustomersListreport_FilterAccountNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TopCustomersList_DefaultFilterTxt));
			TopCustomersList_DefaultFilterTxt.click();
			TopCustomersList_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 506, 5));
			
			Thread.sleep(2000);
			
			TopCustomersList_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 507, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 507, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 508, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 508, 7, actRow2List);

			

			
			
			
				
			System.out.println("****************************checkTopCustomersListReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(TopCustomersListreport_FilterAccountNameChkbox));
			
			if (report_FilterAccountNameChkbox.isSelected()==true) 
			{
				TopCustomersListreport_FilterAccountNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
		//	int actRowCount = reportsRowsCount.size();
		//	int expRowCount = 2; 
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 409, 6);
			excelReader.setCellData(xlfile, xlSheetName, 409, 7, actRowCount);



			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) 
				 
				&& actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 505, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 505, 8, resFail);
				return false;
			}
		}

		
		
		
		
		
		
		public boolean checTopCustomersListReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 511, 5)))
                         {
                    		 
                    		 reportTableColumn1RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			//ArrayList<String> expMonthlyList = new ArrayList<String>();
			//expMonthlyList.add("November 2021");
			//expMonthlyList.add("");
			//expMonthlyList.add("746.00");
			//expMonthlyList.add("232.00");
			//expMonthlyList.add("514.00 Dr");
			
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 511, 6);
			excelReader.setCellData(xlfile, xlSheetName, 511, 7, actMonthList);

			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 512, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			//ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add("23");
			//expDayList.add("");
			//expDayList.add("746.00");
			//expDayList.add("232");
			//expDayList.add("36.00");
			//expDayList.add("514.00 Dr");
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 512, 6);
			excelReader.setCellData(xlfile, xlSheetName, 512, 7, actDay);

			
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 513, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 513, 6);
			excelReader.setCellData(xlfile, xlSheetName, 513, 7, actVoucherList);

			System.out.println(actVoucherList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 514, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 515, 6);
			excelReader.setCellData(xlfile, xlSheetName, 515, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo =excelReader.getCellData(xlSheetName, 516, 6);
			excelReader.setCellData(xlfile, xlSheetName, 516, 7, actDocNo);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount =excelReader.getCellData(xlSheetName, 517, 6);
				excelReader.setCellData(xlfile, xlSheetName, 517, 7, actAccount);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				String actCurrency = voucherHeaderCurrency.getAttribute("value");
				String expCurrency =excelReader.getCellData(xlSheetName, 518, 6);
				excelReader.setCellData(xlfile, xlSheetName, 518, 7, actCurrency);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = excelReader.getCellData(xlSheetName, 519, 6);
				excelReader.setCellData(xlfile, xlSheetName, 519, 7, actDepartment);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 520, 6);
				excelReader.setCellData(xlfile, xlSheetName, 520, 7, actPlaceOfSupply);


				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction =excelReader.getCellData(xlSheetName, 521, 6);
				excelReader.setCellData(xlfile, xlSheetName, 521, 7, actJurisdiction);

				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Warehouse = select1stRow_1stColumn.getText();
				String expR1Warehouse = excelReader.getCellData(xlSheetName, 522, 6);
				excelReader.setCellData(xlfile, xlSheetName, 522, 7, actR1Warehouse);

				
				String actR1Item = select1stRow_2ndColumn.getText();
				String expR1Item = excelReader.getCellData(xlSheetName, 523, 6);
				excelReader.setCellData(xlfile, xlSheetName, 523, 7, actR1Item);

				
				String actR1SalesAccount = select1stRow_4thColumn.getText();
				String expR1SalesAccount =excelReader.getCellData(xlSheetName, 524, 6);
				excelReader.setCellData(xlfile, xlSheetName, 524, 7, actR1SalesAccount);

				
				String actR1TaxCode = select1stRow_3rdColumn.getText();
				String expR1TaxCode = excelReader.getCellData(xlSheetName, 525, 6);
				excelReader.setCellData(xlfile, xlSheetName, 525, 7, actR1TaxCode);

				
				
				
				String actR1Units = select1stRow_5thColumn.getText();
				String expR1Units =excelReader.getCellData(xlSheetName, 526, 6);
				excelReader.setCellData(xlfile, xlSheetName, 526, 7, actR1Units);

				
				String actR1Quantity = select1stRow_11thColumn.getText();
				String expR1Quantity =excelReader.getCellData(xlSheetName, 527, 6);
				excelReader.setCellData(xlfile, xlSheetName, 527, 7, actR1Quantity);

				
				String actR1Rate = select1stRow_14thColumn.getText();
				String expR1Rate = excelReader.getCellData(xlSheetName, 528, 6);
				excelReader.setCellData(xlfile, xlSheetName, 528, 7, actR1Rate);

				
				String actR1Gross = select1stRow_15thColumn.getText();
				String expR1Gross = excelReader.getCellData(xlSheetName, 529, 6);
				excelReader.setCellData(xlfile, xlSheetName, 529, 7, actR1Gross);

				
				String actR1Batch = select1stRow_19thColumn.getText();
				String expR1Batch =excelReader.getCellData(xlSheetName, 530, 6);
				excelReader.setCellData(xlfile, xlSheetName, 530, 7, actR1Batch);


				/*String actR1Expiry = select1stRow_18thColumn.getText();
				DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
				Calendar R1cal=Calendar.getInstance();
				R1cal.add(Calendar.DATE, 2); 
				//String expR1Expiry=dtf.format(R1cal.getTime());
				String expR1Expiry="100.00";
				*/
				
				
				

			 	
				System.out.println("**********************checkTopCustomersListBackTrackOption*********************");
				 
				System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
				
				System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
				System.out.println("Vendor          : "+actAccount			+"  Value Expected  "+expAccount);
				System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
				System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
				System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
				System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
				
				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
				System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
				System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
				System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
				System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
				System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
				System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
				System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
				System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
				
				
				
				
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				
				if ( actOpenWindowsCount==expOpenWindowsCount
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount) && actCurrency.equalsIgnoreCase(expCurrency) 
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
					   
					   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
					   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
					   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
					   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
					  
					  ) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();*/
					excelReader.setCellData(xlfile, xlSheetName, 510, 8, resPass);
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
*/					excelReader.setCellData(xlfile, xlSheetName, 510, 8, resFail);
					return false;
				}
			}

		
//Purchase Reports
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[7]")
		private static WebElement purchaseReportsMenu;
		
		@FindBy(xpath="//span[contains(text(),'Purchase Register')]")
		private static WebElement purchaseRegister;
		
		@FindBy(xpath="//span[contains(text(),'Purchase Return Register')]")
		private static WebElement purchaseReturnRegister;
		
		@FindBy(xpath="//span[contains(text(),'Summary Purchase Book')]")
		private static WebElement summaryPurchaseBook;

		
		public boolean checkPurchaseRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( purchaseReportsMenu));
			 purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister));
			purchaseRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 532, 5));
			accountName.sendKeys(Keys.TAB);
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 533, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 533, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 534, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 534, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 535, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 535, 7, actRow3List);

			
			
					
			System.out.println("*********************************checkPurchaseRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			)
			{
				excelReader.setCellData(xlfile, xlSheetName, 531, 8, resPass);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 531, 8, resFail);
				return false;
			}
		}
		
		
		
	/*	@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
	*/	
		public boolean checkPurchaseRegisterReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReportsMenu));
			purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister));
			purchaseRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 563, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 564, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 564, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 565, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 565, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 566, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 566, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 567, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 567, 7, actRow4List);

			
			
			
			
			
			
			System.out.println("*********************************checkPurchaseRegisterReportwithIncludePurchaseReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) )
				
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 563, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 563, 8, resFail);
				return false;
			}
		}
		
		
		
		
				
	/*	
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_507_0_DefaultFilter_0']")
		private static WebElement purchaseRegister_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_507_0']/ul[2]/li[1]/div/label/span")
		private static WebElement purchaseRegisterreport_FilterItemNameChkbox;
		
		
		
		
		public boolean checkPurchaseRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				purchaseRegisterreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister_DefaultFilterTxt));
			purchaseRegister_DefaultFilterTxt.click();
			purchaseRegister_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 537, 5));
			
			Thread.sleep(2000);
			
			purchaseRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 538, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 538, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 539, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 539, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 540, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 540, 7, actRow1List);

			
			
		/*	
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			*/
		
			
			System.out.println("****************************checkPurchaseRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			//System.out.println(actRow4List);
			//System.out.println(expRow4List);
			
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				purchaseRegisterreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 3; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 541, 6);
			excelReader.setCellData(xlfile, xlSheetName, 541, 7, actRowCount);

			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				  
				&& actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName,536, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 536, 8, resFail);
				return false;
			}
		}
		
		
		public boolean checkPurchaseRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 545, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 546, 6);
		excelReader.setCellData(xlfile, xlSheetName, 546, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 547, 6);
		excelReader.setCellData(xlfile, xlSheetName, 547, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 548, 6);
		excelReader.setCellData(xlfile, xlSheetName, 548, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 549, 6);
		excelReader.setCellData(xlfile, xlSheetName, 549, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 550, 6);
		excelReader.setCellData(xlfile, xlSheetName, 550, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 551, 6);
		excelReader.setCellData(xlfile, xlSheetName, 551, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 552, 6);
		excelReader.setCellData(xlfile, xlSheetName, 552, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse =excelReader.getCellData(xlSheetName, 553, 6);
		excelReader.setCellData(xlfile, xlSheetName, 553, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 554, 6);
		excelReader.setCellData(xlfile, xlSheetName, 554, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 555, 6);
		excelReader.setCellData(xlfile, xlSheetName, 555, 7, actR1TaxCode);

		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount =excelReader.getCellData(xlSheetName, 556, 6);
		excelReader.setCellData(xlfile, xlSheetName, 556, 7, actR1SalesAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units =excelReader.getCellData(xlSheetName, 557, 6);
		excelReader.setCellData(xlfile, xlSheetName, 557, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity =excelReader.getCellData(xlSheetName, 558, 6);
		excelReader.setCellData(xlfile, xlSheetName, 558, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 559, 6);
		excelReader.setCellData(xlfile, xlSheetName, 559, 7, actR1Rate);

		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 560, 6);
		excelReader.setCellData(xlfile, xlSheetName, 560, 7, actR1Gross);

		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch =excelReader.getCellData(xlSheetName, 561, 6);
		excelReader.setCellData(xlfile, xlSheetName, 561, 7, actR1Batch);


		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkPurchaseRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 544, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 544, 8, resFail);
			return false;
		}
	}

		public boolean checkPurchaseRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 543, 6);
			excelReader.setCellData(xlfile, xlSheetName, 543, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchaseRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 542, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 542, 8, resFail);
				return false;
			}
		}


		
	
		
		
		
		
		public boolean checkPurchaseReturnRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( purchaseReportsMenu));
			 purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnRegister));
			purchaseReturnRegister.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 569, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 570, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 570, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 571, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 571, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 572, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 572, 7, actRow3List);

			
			
					
			System.out.println("*********************************checkPurchaseReturnRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			if(/*actRow1List.equalsIgnoreCase(expRow1List) &&*/ actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 568, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 568, 8, resFail);
				return false;
			}
		}
		
		
		
	
		
		
		
		
				
	
		@FindBy(xpath="//*[@id='FOption_508_0_DefaultFilter_0']")
		private static WebElement purchaseReturnRegister_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_508_0']/ul[2]/li[1]/div/label/span")
		private static WebElement purchaseReturnRegisterreport_FilterItemNameChkbox;
		
		
		
		
		public boolean checkPurchaseReturnRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				purchaseReturnRegisterreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseRegister_DefaultFilterTxt));
			purchaseReturnRegister_DefaultFilterTxt.click();
			purchaseReturnRegister_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 574, 5));
			
			Thread.sleep(2000);
			
			purchaseReturnRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 575, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 575, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 576, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 576, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 577, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 577, 7, actRow3List);

			
			/*
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			*/
		
			
			System.out.println("****************************checkPurchaseReturnRegisterReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			//System.out.println(actRow4List);
			//System.out.println(expRow4List);
			
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnRegisterreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				purchaseReturnRegisterreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 3; 
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 578, 6);
			excelReader.setCellData(xlfile, xlSheetName, 578, 7, actRowCount);


			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				//&& actRow4List.equalsIgnoreCase(expRow4List)  
				&& actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 573, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 573, 8, resPass);
				return false;
			}
		}
		
		
		public boolean checkPurchaseReturnRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 582, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 583, 6);
		excelReader.setCellData(xlfile, xlSheetName, 583, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 584, 6);
		excelReader.setCellData(xlfile, xlSheetName, 584, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 585, 6);
		excelReader.setCellData(xlfile, xlSheetName, 585, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 586, 6);
		excelReader.setCellData(xlfile, xlSheetName, 586, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 587, 6);
		excelReader.setCellData(xlfile, xlSheetName, 587, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 588, 6);
		excelReader.setCellData(xlfile, xlSheetName, 588, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 589, 6);
		excelReader.setCellData(xlfile, xlSheetName, 589, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse =excelReader.getCellData(xlSheetName, 590, 6);
		excelReader.setCellData(xlfile, xlSheetName, 590, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 591, 6);
		excelReader.setCellData(xlfile, xlSheetName, 591, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 592, 6);
		excelReader.setCellData(xlfile, xlSheetName, 592, 7, actR1TaxCode);

		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount =excelReader.getCellData(xlSheetName, 593, 6);
		excelReader.setCellData(xlfile, xlSheetName, 593, 7, actR1SalesAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units =excelReader.getCellData(xlSheetName, 594, 6);
		excelReader.setCellData(xlfile, xlSheetName, 594, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity =excelReader.getCellData(xlSheetName, 595, 6);
		excelReader.setCellData(xlfile, xlSheetName, 595, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 596, 6);
		excelReader.setCellData(xlfile, xlSheetName, 596, 7, actR1Rate);

		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 597, 6);
		excelReader.setCellData(xlfile, xlSheetName, 597, 7, actR1Gross);

		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch =excelReader.getCellData(xlSheetName, 598, 6);
		excelReader.setCellData(xlfile, xlSheetName, 598, 7, actR1Batch);

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkPurchaseReturnRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 581, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 581, 8, resFail);
			return false;
		}
	}

		public boolean checkPurchaseReturnRegisterPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 580, 6);
			excelReader.setCellData(xlfile, xlSheetName, 580, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchaseReturnRegisterPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 579, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 579, 8, resFail);
				return false;
			}
		}



		public boolean checkSummaryPurchaseBookReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( purchaseReportsMenu));
			 purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summaryPurchaseBook));
			summaryPurchaseBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 600, 5));
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 601, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 601, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 602, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 602, 7, actRow2List);


			
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[]";
			
			*/
					
			System.out.println("*********************************checkSummaryPurchaseBookReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		*/	
			
			if(actRow1List.equalsIgnoreCase(expRow1List) &&actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List)*/ 
			)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 599, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName,599, 8, resFail);
				return false;
			}
		}
		
		
		
	/*	@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
	*/	
		public boolean checkSummaryPurchaseBookReportswithDisplayMonthlyandSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReportsMenu));
			purchaseReportsMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(summaryPurchaseBook));
			summaryPurchaseBook.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 627, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 628, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 628, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 629, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 629, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 630, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 630, 7, actRow3List);

			
			
		/*
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			
			*/
			
			
			
			System.out.println("*********************************checkSummaryPurchaseBookReportwithIncludePurchaseReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
	/*		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List)*/ )
				
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 626, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 626, 8, resFail);
				return false;
			}
		}
		
		
		
		
				
	/*	
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_509_0_DefaultFilter_0']")
		private static WebElement SummaryPurchaseBook_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_509_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement SummaryPurchaseBookreport_FilterItemNameChkbox;
		
		
		
		
		public boolean checkSummaryPurchaseBookReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryPurchaseBookreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				SummaryPurchaseBookreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryPurchaseBook_DefaultFilterTxt));
			SummaryPurchaseBook_DefaultFilterTxt.click();
			SummaryPurchaseBook_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 604, 5));
			
			Thread.sleep(2000);
			
			SummaryPurchaseBook_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 605, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 605, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 606, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 606, 7, actRow2List);

			
			
	/*		
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[]";
			
			*/
		
			
			System.out.println("****************************checkSummaryPurchaseBookReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			*/
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SummaryPurchaseBookreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				SummaryPurchaseBookreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 607, 6);
			excelReader.setCellData(xlfile, xlSheetName, 607, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List)*/  
				&& actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 603, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName,603, 8, resFail);
				return false;
			}
		}
		
		
		public boolean checkSummaryPurchaseBookReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 609, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 610, 6);
		excelReader.setCellData(xlfile, xlSheetName, 610, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 611, 6);
		excelReader.setCellData(xlfile, xlSheetName, 611, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 612, 6);
		excelReader.setCellData(xlfile, xlSheetName, 612, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 613, 6);
		excelReader.setCellData(xlfile, xlSheetName, 613, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 614, 6);
		excelReader.setCellData(xlfile, xlSheetName, 614, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 615, 6);
		excelReader.setCellData(xlfile, xlSheetName, 615, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 616, 6);
		excelReader.setCellData(xlfile, xlSheetName, 616, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse =excelReader.getCellData(xlSheetName, 617, 6);
		excelReader.setCellData(xlfile, xlSheetName, 617, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 618, 6);
		excelReader.setCellData(xlfile, xlSheetName, 618, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 619, 6);
		excelReader.setCellData(xlfile, xlSheetName, 619, 7, actR1TaxCode);

		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount =excelReader.getCellData(xlSheetName, 620, 6);
		excelReader.setCellData(xlfile, xlSheetName, 620, 7, actR1SalesAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units =excelReader.getCellData(xlSheetName, 621, 6);
		excelReader.setCellData(xlfile, xlSheetName, 621, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity =excelReader.getCellData(xlSheetName, 622, 6);
		excelReader.setCellData(xlfile, xlSheetName, 622, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 623, 6);
		excelReader.setCellData(xlfile, xlSheetName, 623, 7, actR1Rate);

		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 624, 6);
		excelReader.setCellData(xlfile, xlSheetName, 624, 7, actR1Gross);

		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch =excelReader.getCellData(xlSheetName, 625, 6);
		excelReader.setCellData(xlfile, xlSheetName, 625, 7, actR1Batch);
		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		
	

		

	 	
		System.out.println("**********************checkSummaryPurchaseBookReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount==expOpenWindowsCount
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 608, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 608, 8, resFail);
			return false;
		}
	}

		
	
		
		
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[8]")
		private static WebElement vatMenu;
		
		@FindBy(xpath="//span[contains(text(),'Purchase Account Report')]")
		private static WebElement purchaseAccountReport;
		
		@FindBy(xpath="//span[contains(text(),'VAT detailed report')]")
		private static WebElement VATdetailedreport;
		
		@FindBy(xpath="//span[contains(text(),'Sales Account Report')]")
		private static WebElement salesAccountReport;
		
		@FindBy(xpath="//span[contains(text(),'Sales by Customer Report')]")
		private static WebElement salesbyCustomerReport;
		
		@FindBy(xpath="//span[contains(text(),'VAT summary report')]")
		private static WebElement VATSummaryreport;
		
		@FindBy(xpath="//span[contains(text(),'GST Audit File')]")
		private static WebElement GSTAuditFile;
		
		@FindBy(xpath="//span[contains(text(),'VAT audit file')]")
		private static WebElement VATauditfile;
		
		@FindBy(xpath="//span[contains(text(),'VAT return report')]")
		private static WebElement VATreturnreport;
		
		@FindBy(xpath="//span[contains(text(),'Sales advance VAT report')]")
		private static WebElement SalesadvanceVATreport;
		
		
		@FindBy(xpath="//select[@id='RITCombobox__1']")
		private static WebElement pa_TransactionTypeDropdown;
	
		
		

		public boolean checkVATPurchaseAccountReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( vatMenu));
			 vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountReport));
			purchaseAccountReport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(1);
			Thread.sleep(2000);
						
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 632, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 632, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 633, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 633, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 634, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 634, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 635, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 635, 7, actRow4List);

			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
				}
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 636, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 636, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
				}
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 637, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 637, 7, actRow6List);

			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
				}
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 638, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 638, 7, actRow7List);

			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
				}
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List =excelReader.getCellData(xlSheetName, 639, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 639, 7, actRow8List);

			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
				}
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List =excelReader.getCellData(xlSheetName, 640, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 640, 7, actRow9List);

			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
				}
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List =excelReader.getCellData(xlSheetName, 641, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 641, 7, actRow10List);

			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List =excelReader.getCellData(xlSheetName, 642, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 642, 7, actRow11List);

			
			
					
			System.out.println("*********************************checkVATPurchaseAccountReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&&actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
			&&actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
			&&actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 631, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				excelReader.setCellData(xlfile, xlSheetName, 631, 8, resFail);
				return false;
			}
		}
		
		
		
	/*	@FindBy(xpath="//*[@id='dvReportInputs']/div[5]/label/span")
		private static WebElement displayMonthlyDetailsOption;
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[6]/label/span")
		private static WebElement includesSalesReturnVocherOption;
		
	*/	
		public boolean checkPurchaseAccountReportswithIncludePurchaseReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountReport));
			purchaseAccountReport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
		/*	getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 676, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 676, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 677, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 677, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 678, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 678, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 679, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 679, 7, actRow4List);

			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 680, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 680, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 681, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 676, 7, actRow6List);

			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = excelReader.getCellData(xlSheetName, 682,6);
            
          excelReader.setCellData(xlfile, xlSheetName, 682, 7, actRow7List);

			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List =excelReader.getCellData(xlSheetName, 683, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 683, 7, actRow8List);

			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List =excelReader.getCellData(xlSheetName, 684, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 684, 7, actRow9List);

			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List =excelReader.getCellData(xlSheetName, 685, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 685, 7, actRow10List);

			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List =excelReader.getCellData(xlSheetName, 686, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 686, 7, actRow11List);

			
			
					
			System.out.println("*********************************checkVATPurchaseAccountReportwithncludePurchaseReturnOption***********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&&actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
			&&actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
			&&actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 675, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 675, 8, resFail);
				return false;
			}
		}
		
		
		
				
	/*	
		@FindBy (xpath="//a[contains(text(),' Warehouse')]//i")
		private static WebElement report_FilterWarehouseExpandBtn;
		
		@FindBy(xpath="(//input[@id='5058'])[1]")
		private static WebElement report_FilterWarehouseNameChkbox;
*/
		@FindBy(xpath="//*[@id='FOption_208_0_DefaultFilter_0']")
		private static WebElement purchaseAccount_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_208_0']/ul[3]/li[1]/div/label/span")
		private static WebElement purchaseAccountreport_FilterItemNameChkbox;
		
		@FindBy (xpath="(//input[@id='5042'])[1]")
		private static WebElement report_FilterDepartmentNameChkbox;
		
		@FindBy (xpath="(//a[contains(text(),'Department')]//i)[1]")
		private static WebElement report_FilterDepartmentExpansion;
		
		
		public boolean checkPurchaseAccountReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountreport_FilterItemNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				purchaseAccountreport_FilterItemNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccount_DefaultFilterTxt));
			purchaseAccount_DefaultFilterTxt.click();
			purchaseAccount_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 644, 5));
			
			Thread.sleep(2000);
			
			purchaseAccount_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
int reportsByWarehouseRow1ListCount = reportsRow1List.size();
ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow1List.get(i).getText();
	reportsByWarehouseRow1ListArray.add(data);
	}
}
String actRow1List = reportsByWarehouseRow1ListArray.toString();
String expRow1List =excelReader.getCellData(xlSheetName, 645, 6);

excelReader.setCellData(xlfile, xlSheetName, 645, 7, actRow1List);




int reportsByWarehouseRow2ListCount = reportsRow2List.size();
ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow2List.get(i).getText();
	reportsByWarehouseRow2ListArray.add(data);
	}
}
String actRow2List = reportsByWarehouseRow2ListArray.toString();
String expRow2List =excelReader.getCellData(xlSheetName, 646, 6);

excelReader.setCellData(xlfile, xlSheetName, 646, 7, actRow2List);




int reportsRow3ListCount = reportsRow3List.size();
ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow3ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow3List.get(i).getText();
	reportsRow3ListArray.add(data);
	}
}
String actRow3List = reportsRow3ListArray.toString();
String expRow3List =excelReader.getCellData(xlSheetName, 647, 6);

excelReader.setCellData(xlfile, xlSheetName, 647, 7, actRow3List);




int reportsRow4ListCount = reportsRow4List.size();
ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow4ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow4List.get(i).getText();
	reportsRow4ListArray.add(data);
	}
}
String actRow4List = reportsRow4ListArray.toString();
String expRow4List =excelReader.getCellData(xlSheetName, 648, 6);

excelReader.setCellData(xlfile, xlSheetName, 648, 7, actRow4List);


int reportsRow5ListCount = reportsRow5List.size();
ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow5ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow5List.get(i).getText();
	reportsRow5ListArray.add(data);
	}
}
String actRow5List = reportsRow5ListArray.toString();
String expRow5List = excelReader.getCellData(xlSheetName, 649, 6);

excelReader.setCellData(xlfile, xlSheetName, 649, 7, actRow5List);



int reportsRow6ListCount = reportsRow6List.size();
ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow6ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow6List.get(i).getText();
	reportsRow6ListArray.add(data);
	}
}
String actRow6List = reportsRow6ListArray.toString();
String expRow6List =excelReader.getCellData(xlSheetName, 650, 6);

excelReader.setCellData(xlfile, xlSheetName, 650, 7, actRow6List);



int reportsRow7ListCount = reportsRow7List.size();
ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow7ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow7List.get(i).getText();
	reportsRow7ListArray.add(data);
	}
}
String actRow7List = reportsRow7ListArray.toString();
String expRow7List =excelReader.getCellData(xlSheetName, 651, 6);

excelReader.setCellData(xlfile, xlSheetName, 651, 7, actRow7List);


int reportsRow8ListCount = reportsRow8List.size();
ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow8ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow8List.get(i).getText();
	reportsRow8ListArray.add(data);
	}
}
String actRow8List = reportsRow8ListArray.toString();
String expRow8List =excelReader.getCellData(xlSheetName, 652, 6);

excelReader.setCellData(xlfile, xlSheetName, 652, 7, actRow8List);


int reportsRow9ListCount = reportsRow9List.size();
ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow9ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow9List.get(i).getText();
	reportsRow9ListArray.add(data);
	}
}
String actRow9List = reportsRow9ListArray.toString();
String expRow9List =excelReader.getCellData(xlSheetName, 653, 6);

excelReader.setCellData(xlfile, xlSheetName, 653, 7, actRow9List);


int reportsRow10ListCount = reportsRow10List.size();
ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow10ListCount;i++)
{
	if(i!=1)
	{
	String data = reportsRow10List.get(i).getText();
	reportsRow10ListArray.add(data);
	}
}
String actRow10List = reportsRow10ListArray.toString();
String expRow10List =excelReader.getCellData(xlSheetName, 654, 6);

excelReader.setCellData(xlfile, xlSheetName, 654, 7, actRow10List);


int reportsRow11ListCount = reportsRow11List.size();
ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
for(int i=1;i<reportsRow11ListCount;i++)
{
	String data = reportsRow11List.get(i).getText();
	reportsRow11ListArray.add(data);
}
String actRow11List = reportsRow11ListArray.toString();
String expRow11List =excelReader.getCellData(xlSheetName, 655, 6);
excelReader.setCellData(xlfile, xlSheetName, 655, 7, actRow11List);
			
					
			System.out.println("*********************************checkVATPurchaseAccountReportwithFilterOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountreport_FilterItemNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				purchaseAccountreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 656, 6);
			excelReader.setCellData(xlfile, xlSheetName, 656, 7, actRowCount);


			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
			&&actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List)
			&&actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List)
			&&actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List))
			{
				excelReader.setCellData(xlfile, xlSheetName, 643, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 643, 8, resFail);
				return false;
			}
		}
		
			
			
			
			
		
		public boolean checkPurchaseAccountReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());	
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 658, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 659, 6);
		excelReader.setCellData(xlfile, xlSheetName, 659, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 660, 6);
		excelReader.setCellData(xlfile, xlSheetName, 660, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 661, 6);
		excelReader.setCellData(xlfile, xlSheetName, 661, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 662, 6);
		excelReader.setCellData(xlfile, xlSheetName, 662, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 663, 6);
		excelReader.setCellData(xlfile, xlSheetName, 663, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 664, 6);
		excelReader.setCellData(xlfile, xlSheetName, 664, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 665, 6);
		excelReader.setCellData(xlfile, xlSheetName, 665, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse =excelReader.getCellData(xlSheetName, 666, 6);
		excelReader.setCellData(xlfile, xlSheetName, 666, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 667, 6);
		excelReader.setCellData(xlfile, xlSheetName, 667, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 668, 6);
		excelReader.setCellData(xlfile, xlSheetName, 668, 7, actR1TaxCode);

		
		String actR1SalesAccount = select1stRow_4thColumn.getText();
		String expR1SalesAccount =excelReader.getCellData(xlSheetName, 669, 6);
		excelReader.setCellData(xlfile, xlSheetName, 669, 7, actR1SalesAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units =excelReader.getCellData(xlSheetName, 670, 6);
		excelReader.setCellData(xlfile, xlSheetName, 670, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity =excelReader.getCellData(xlSheetName, 671, 6);
		excelReader.setCellData(xlfile, xlSheetName, 671, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 672, 6);
		excelReader.setCellData(xlfile, xlSheetName, 672, 7, actR1Rate);

		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 673, 6);
		excelReader.setCellData(xlfile, xlSheetName, 673, 7, actR1Gross);

		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch =excelReader.getCellData(xlSheetName, 674, 6);
		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry="100.00";
		*/
		excelReader.setCellData(xlfile, xlSheetName, 674, 7, actR1Batch);
	

		

	 	
		System.out.println("**********************checkPurchaseAccountReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		
		
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			 && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			  && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   &&actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch)) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 657, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 657, 8, resFail);
			return false;
		}
	}

		
		@FindBy(xpath="//select[@id='RITCombobox__2']")
		private static WebElement pa_CountryDropdown;
		
		
		
		
		public boolean checkVATDetailedReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport));
			VATdetailedreport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 688, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 688, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = excelReader.getCellData(xlSheetName, 689, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 689, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = excelReader.getCellData(xlSheetName, 690, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 690, 7, actPage3List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATDetailedReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 687, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 687, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		public boolean checkVATDetailedReportswithLocalAmountBasedFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport));
			VATdetailedreport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
		/*	getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 716, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 716, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 717, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 717, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List =excelReader.getCellData(xlSheetName, 718, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 718, 7, actPage3List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATDetailedReportswithLocalAmountBasedOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 715, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 715, 8, resFail);
				return false;
			}
			
			
		}
		
		
		@FindBy(xpath="(//a[contains(text(),'Account2')]//i)[1]")
		private static WebElement report_FilterAccount2Expansion;
		
		@FindBy(xpath="(//input[@id='5002'])[1]")
		private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="(//*[@id='FilterFields_659_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement VATdetailedreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_659_0_DefaultFilter_0']")
		private static WebElement VATdetailedreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkVATDetailedReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				VATdetailedreport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport_DefaultFilterTxt));
			VATdetailedreport_DefaultFilterTxt.click();
			VATdetailedreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 692, 5));
			
			Thread.sleep(2000);
			
			VATdetailedreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 693, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 693, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 694, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 694, 7, actPage2List);

			
			
			System.out.println("*****************************************checkVATDetailedReportswithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATdetailedreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATdetailedreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 694, 6);
			excelReader.setCellData(xlfile, xlSheetName, 694, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List))
			
			{
				 excelReader.setCellData(xlfile, xlSheetName, 691, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 691, 8, resFail);
				return false;
			}
		}
		
			
			
			
			
		
		public boolean checkVATDetailedReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 697, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 698, 6);
		excelReader.setCellData(xlfile, xlSheetName, 698, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 699, 6);
		excelReader.setCellData(xlfile, xlSheetName, 699, 7, actDocNo);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor =excelReader.getCellData(xlSheetName, 700, 6);
		excelReader.setCellData(xlfile, xlSheetName, 700, 7, actVendor);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency =excelReader.getCellData(xlSheetName, 701, 6);
		excelReader.setCellData(xlfile, xlSheetName, 701, 7, actCurrency);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 702, 6);
		excelReader.setCellData(xlfile, xlSheetName, 702, 7, actDepartment);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 703, 6);
		excelReader.setCellData(xlfile, xlSheetName, 703, 7, actPlaceOfSupply);



		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 704, 6);
		excelReader.setCellData(xlfile, xlSheetName, 704, 7, actJurisdiction);



		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse =excelReader.getCellData(xlSheetName, 705, 6);
		excelReader.setCellData(xlfile, xlSheetName, 705, 7, actR1Warehouse);


		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item =excelReader.getCellData(xlSheetName, 706, 6);
		excelReader.setCellData(xlfile, xlSheetName, 706, 7,actR1Item);


		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 707, 6);
		excelReader.setCellData(xlfile, xlSheetName, 707, 7, actR1TaxCode);


		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount =excelReader.getCellData(xlSheetName, 708, 6);
		excelReader.setCellData(xlfile, xlSheetName, 708, 7, actR1PurchaseAccount);


		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units =excelReader.getCellData(xlSheetName, 709, 6);
		excelReader.setCellData(xlfile, xlSheetName, 709, 7, actR1Units);


		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity =excelReader.getCellData(xlSheetName, 710, 6);
		excelReader.setCellData(xlfile, xlSheetName, 710, 7, actR1Quantity);


		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName,711, 6);
		excelReader.setCellData(xlfile, xlSheetName, 711, 7, actR1Rate);


		
		String actR1Gross = select1stRow_12thColumn.getText();
		String expR1Gross =excelReader.getCellData(xlSheetName, 712, 6);
		excelReader.setCellData(xlfile, xlSheetName, 712, 7, actR1Gross);


		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch = excelReader.getCellData(xlSheetName, 713, 6);
		excelReader.setCellData(xlfile, xlSheetName, 713, 7, actR1Batch);



		String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		String expR1Expiry=excelReader.getCellData(xlSheetName, 714, 6);
		excelReader.setCellData(xlfile, xlSheetName, 714, 7, actR1Expiry);


		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATDetailedReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) && actR1Expiry.equalsIgnoreCase(expR1Expiry)
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			 excelReader.setCellData(xlfile, xlSheetName, 696, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			 excelReader.setCellData(xlfile, xlSheetName, 696, 8, resFail);
			return false;
		}
		}
	
		
		
		public boolean checkVATSalesAccountReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountReport));
			salesAccountReport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			pa_TransactionTypeDropdown.click();
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 720, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 720, 7, actPage1List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATSalesAccountReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 719, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 719, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		public boolean checkVATSalesAccountReportswithIncludeSalesReturnVocher() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAccountReport));
			salesAccountReport.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			pa_TransactionTypeDropdown.click();
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
		/*	getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));
			includesSalesReturnVocherOption.click();
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 745, 5);
            
          excelReader.setCellData(xlfile, xlSheetName, 745, 7, actPage1List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List = "[43, RMA#R2PVVAT8, 1.00, 7.41, , , , , , , , , , , , , , , 1.00, 7.41, 44, RMA#R2PVVAT9, 1.00, 7.41, 1.00, 7.41, , , , , , , , , , , , , , , 45, Total, 43.00, 318.66, 32.00, 237.14, , , , , , , , , , , 11.00, 81.52, , ]";*/
			
			System.out.println("*****************************************checkVATSalesAccountReportswithIncludesSalesReturnVocher***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			/*System.out.println(actPage4List);
			System.out.println(expPage4List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List)/* && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				/*&& actPage4List.equalsIgnoreCase(expPage4List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 744, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 744, 8, resFail);
				return false;
			}
			
			
		}
		
		
		@FindBy(xpath="//*[@id='FilterFields_209_0']/li[2]/a/i")
		private static WebElement salesAccountreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FilterFields_209_0']/ul[2]/li[1]/div/label/span")
		private static WebElement VATSalesAccountreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_209_0_DefaultFilter_0']")
		private static WebElement VATsalesAccountreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkVATSalesAccountReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
				report_FilterExpandBtn.click();
				Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAccountreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				VATSalesAccountreport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATsalesAccountreport_DefaultFilterTxt));
			VATsalesAccountreport_DefaultFilterTxt.click();
			VATsalesAccountreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 722, 5));
			
			Thread.sleep(2000);
			
			VATsalesAccountreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 723, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 723, 7, actPage1List);

			
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			*/
			
			System.out.println("*****************************************checkVATSalesAccountReportswithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
		/*	System.out.println(actPage2List);
			System.out.println(expPage2List);
			
		*/

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAccountreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATSalesAccountreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 724, 6);
			excelReader.setCellData(xlfile, xlSheetName, 724, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) /*&& actPage2List.equalsIgnoreCase(expPage2List)*/)
			
			{
				excelReader.setCellData(xlfile, xlSheetName, 721, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 721, 8, resFail);
				
				return false;
			}
		}
		
			
			
			
			
		
		public boolean checkVATSalesAccountReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 726, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 727, 6);
		excelReader.setCellData(xlfile, xlSheetName, 727, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 728, 6);
		excelReader.setCellData(xlfile, xlSheetName, 728, 7, actDocNo);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 729, 6);
		excelReader.setCellData(xlfile, xlSheetName, 729, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 730, 6);
		excelReader.setCellData(xlfile, xlSheetName, 730, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 731, 6);
		excelReader.setCellData(xlfile, xlSheetName, 731, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 732, 6);
		excelReader.setCellData(xlfile, xlSheetName, 732, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = excelReader.getCellData(xlSheetName, 733, 6);
		excelReader.setCellData(xlfile, xlSheetName, 733, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = excelReader.getCellData(xlSheetName, 734, 6);
		excelReader.setCellData(xlfile, xlSheetName, 734, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 735, 6);
		excelReader.setCellData(xlfile, xlSheetName, 735, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 736, 6);
		excelReader.setCellData(xlfile, xlSheetName, 736, 7, actR1TaxCode);

		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = excelReader.getCellData(xlSheetName, 737, 6);
		excelReader.setCellData(xlfile, xlSheetName, 737, 7, actR1PurchaseAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = excelReader.getCellData(xlSheetName, 738, 6);
		excelReader.setCellData(xlfile, xlSheetName, 738, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = excelReader.getCellData(xlSheetName, 739, 6);
		excelReader.setCellData(xlfile, xlSheetName, 739, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 740, 6);
		excelReader.setCellData(xlfile, xlSheetName, 740, 7, actR1Rate);

		
		String actR1SalesOrder = select1stRow_12thColumn.getText();
		String expR1SalesOrder =  excelReader.getCellData(xlSheetName, 741, 6);
		excelReader.setCellData(xlfile, xlSheetName, 741, 7, actR1SalesOrder);

		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross = excelReader.getCellData(xlSheetName, 742, 6);
		excelReader.setCellData(xlfile, xlSheetName, 742, 7, actR1Gross);

		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch =  excelReader.getCellData(xlSheetName, 743, 6);
		excelReader.setCellData(xlfile, xlSheetName, 743, 7, actR1Batch);

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		//String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATSalesAccountReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("SalesOrder      : "+actR1SalesOrder			+"  Value Expected  "+expR1SalesOrder);

		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		//System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)&& actR1SalesOrder.equalsIgnoreCase(expR1SalesOrder) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 725, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 725, 8, resFail);
			return false;
		}
		}
		
		
		@FindBy(xpath="//select[@id='RITCombobox__3']")
		private static WebElement sByC_SelectDelears;
	
		
		public boolean checkVATSalesByCustomerReportwithVocherTypeSalesandDelearsType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerReport));
			salesByCustomerReport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("0");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			sByC_SelectDelears.click();
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 747, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 747, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 748, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 748, 7, actRow2List);

			
			
			
			
			System.out.println("*****************************************checkVATSalesByCustomerReportswithVocherTypeSalesandDelearType***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
		
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
				
			{
				excelReader.setCellData(xlfile, xlSheetName,746, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 746, 8, resPass);
				return false;
			}
		}
		
		
		
		public boolean checkVATSalesByCustomerReportwithVocherTypePurchaseandDelearsType() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerReport));
			salesByCustomerReport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_CountryDropdown));
			pa_CountryDropdown.click();
			Select s1=new Select(pa_CountryDropdown);
			s1.selectByValue("1");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			sByC_SelectDelears.click();
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByValue("1");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 774, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 774, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 775, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 775, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 776, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 776, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 777, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 777, 7, actRow4List);

			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 778, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 778, 7, actRow5List);

			System.out.println("*****************************************checkVATSalesByCustomerReportswithPurchaseVocherandDelearType***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		
			
			
		
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List)
				&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
				&&actRow5List.equalsIgnoreCase(expRow5List) )
			{
				excelReader.setCellData(xlfile, xlSheetName, 743, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 743, 8, resFail);
				return false;
			}
		}
		
	
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_210_0']/li[2]/a/i")
		private static WebElement salesBycustomerreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FilterFields_210_0']/ul[2]/li[1]/div/label/span")
		private static WebElement VATSalesByCustomerreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_210_0_DefaultFilter_0']")
		private static WebElement VATsalesByCustomerreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkVATSalesByCustomerReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesByCustomerreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				VATSalesByCustomerreport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATsalesByCustomerreport_DefaultFilterTxt));
			VATsalesByCustomerreport_DefaultFilterTxt.click();
			VATsalesByCustomerreport_DefaultFilterTxt.sendKeys( excelReader.getCellData(xlSheetName, 750, 5));
			
			Thread.sleep(2000);
			
			VATsalesByCustomerreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 751, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 751, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 752, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 752, 7, actRow2List);

			
			
		
			System.out.println("*****************************************checkVATSalesByCustomerReportswithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesByCustomerreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATSalesByCustomerreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 753, 6);
			excelReader.setCellData(xlfile, xlSheetName, 753, 7, actRowCount);


			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				excelReader.setCellData(xlfile, xlSheetName, 749, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 749, 8, resFail);
				return false;
			}
		}			
			
			
			
			
			
		
		public boolean checkVATSalesByCustomerReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 755, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 756, 6);
		excelReader.setCellData(xlfile, xlSheetName, 756, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 757, 6);
		excelReader.setCellData(xlfile, xlSheetName, 757, 7, actDocNo);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 758, 6);
		excelReader.setCellData(xlfile, xlSheetName, 758, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 759, 6);
		excelReader.setCellData(xlfile, xlSheetName, 759, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 760, 6);
		excelReader.setCellData(xlfile, xlSheetName, 760, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 761, 6);
		excelReader.setCellData(xlfile, xlSheetName, 761, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = excelReader.getCellData(xlSheetName, 762, 6);
		excelReader.setCellData(xlfile, xlSheetName, 762, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = excelReader.getCellData(xlSheetName, 763, 6);
		excelReader.setCellData(xlfile, xlSheetName, 763, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 764, 6);
		excelReader.setCellData(xlfile, xlSheetName, 764, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 765, 6);
		excelReader.setCellData(xlfile, xlSheetName, 765, 7, actR1TaxCode);

		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = excelReader.getCellData(xlSheetName, 766, 6);
		excelReader.setCellData(xlfile, xlSheetName, 766, 7, actR1PurchaseAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = excelReader.getCellData(xlSheetName, 767, 6);
		excelReader.setCellData(xlfile, xlSheetName, 767, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = excelReader.getCellData(xlSheetName, 768, 6);
		excelReader.setCellData(xlfile, xlSheetName, 768, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 769, 6);
		excelReader.setCellData(xlfile, xlSheetName, 769, 7, actR1Rate);

		
		String actR1SalesOrder = select1stRow_12thColumn.getText();
		String expR1SalesOrder =  excelReader.getCellData(xlSheetName, 770, 6);
		excelReader.setCellData(xlfile, xlSheetName, 770, 7, actR1SalesOrder);

		
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross = excelReader.getCellData(xlSheetName, 771, 6);
		excelReader.setCellData(xlfile, xlSheetName, 771, 7, actR1Gross);

		
		String actR1Batch = select1stRow_16thColumn.getText();
		String expR1Batch =  excelReader.getCellData(xlSheetName, 772, 6);
		excelReader.setCellData(xlfile, xlSheetName, 772, 7, actR1Batch);

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		//String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATSalesByCustomerReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		System.out.println("SalesOrder      : "+actR1SalesOrder			+"  Value Expected  "+expR1SalesOrder);

		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
		System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		//System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)&& actR1SalesOrder.equalsIgnoreCase(expR1SalesOrder) && actR1Batch.equalsIgnoreCase(expR1Batch) 
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 754, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 754, 8, resFail);
			return false;
		}
		}
		


		
		
		
		public boolean checkSalesAdavanceVATReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);",SalesadvanceVATreport);
			
			Thread.sleep(2000);
			
			//getAction().moveToElement(SalesadvanceVATreport).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SalesadvanceVATreport));
			SalesadvanceVATreport.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 780, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 780, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 781, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 781, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List =excelReader.getCellData(xlSheetName, 782, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 782, 7, actPage3List);

			
			
			System.out.println("*****************************************checkSalesAdvanceVATReport***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List)&& actPage3List.equalsIgnoreCase(expPage3List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 779, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 779, 8, resFail);
				return false;
			}
			
			
		}
		
		
	//	@FindBy(xpath="//*[@id='FilterFields_209_0']/li[2]/a/i")
	//	private static WebElement salesAccountreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="(//*[@id='FilterFields_677_0']/ul[4]/li[1]/div/label/span)[1]")
		private static WebElement VATSalesAdvancereport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_677_0_DefaultFilter_0']")
		private static WebElement VATsalesAdvancereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkSalesAdvanceVATReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAdvancereport_FilterAccount2NameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				VATSalesAdvancereport_FilterAccount2NameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATsalesAdvancereport_DefaultFilterTxt));
			VATsalesAdvancereport_DefaultFilterTxt.click();
			VATsalesAdvancereport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 784, 5));
			
			Thread.sleep(2000);
			
			VATsalesAdvancereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 785, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 785, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 786, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 786, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 787, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 787, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 788, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 788, 7, actRow4List);

			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 789, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 789, 7, actRow5List);

			System.out.println("*****************************************checkSalesAdvanceVATReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		
						
		
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSalesAdvancereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				VATSalesAdvancereport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 790, 6);
			excelReader.setCellData(xlfile, xlSheetName, 790, 7, actRowCount);


			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List))
			{
				 excelReader.setCellData(xlfile, xlSheetName, 783, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 783, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkSalesAdvanceVATReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn1RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn1RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 792, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn1RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 793, 6);
		excelReader.setCellData(xlfile, xlSheetName, 793, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 794, 6);
		excelReader.setCellData(xlfile, xlSheetName, 794, 7, actDocNo);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actVendor = vendorAccountTxt.getAttribute("value");
		String expVendor = excelReader.getCellData(xlSheetName, 795, 6);
		excelReader.setCellData(xlfile, xlSheetName, 795, 7, actVendor);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 796, 6);
		excelReader.setCellData(xlfile, xlSheetName, 796, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 797, 6);
		excelReader.setCellData(xlfile, xlSheetName, 797, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 798, 6);
		excelReader.setCellData(xlfile, xlSheetName, 798, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction = excelReader.getCellData(xlSheetName, 799, 6);
		excelReader.setCellData(xlfile, xlSheetName, 799, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Warehouse = select1stRow_1stColumn.getText();
		String expR1Warehouse = excelReader.getCellData(xlSheetName, 800, 6);
		excelReader.setCellData(xlfile, xlSheetName, 800, 7, actR1Warehouse);

		
		String actR1Item = select1stRow_2ndColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 801, 6);
		excelReader.setCellData(xlfile, xlSheetName, 801, 7, actR1Item);

		
		String actR1TaxCode = select1stRow_3rdColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 802, 6);
		excelReader.setCellData(xlfile, xlSheetName, 802, 7, actR1TaxCode);

		
		String actR1PurchaseAccount = select1stRow_4thColumn.getText();
		String expR1PurchaseAccount = excelReader.getCellData(xlSheetName, 803, 6);
		excelReader.setCellData(xlfile, xlSheetName, 803, 7, actR1PurchaseAccount);

		
		String actR1Units = select1stRow_5thColumn.getText();
		String expR1Units = excelReader.getCellData(xlSheetName, 804, 6);
		excelReader.setCellData(xlfile, xlSheetName, 804, 7, actR1Units);

		
		String actR1Quantity = select1stRow_9thColumn.getText();
		String expR1Quantity = excelReader.getCellData(xlSheetName,805, 6);
		excelReader.setCellData(xlfile, xlSheetName, 805, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_11thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 806, 6);
		excelReader.setCellData(xlfile, xlSheetName, 806, 7, actR1Rate);

		
				
		String actR1Gross = select1stRow_15thColumn.getText();
		String expR1Gross = excelReader.getCellData(xlSheetName, 807, 6);
		excelReader.setCellData(xlfile, xlSheetName, 807, 7, actR1Gross);
		//String actR1Batch = select1stRow_16thColumn.getText();
		//String expR1Batch = "0.00";

		/*String actR1Expiry = select1stRow_18thColumn.getText();
		DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
		Calendar R1cal=Calendar.getInstance();
		R1cal.add(Calendar.DATE, 2); 
		//String expR1Expiry=dtf.format(R1cal.getTime());
		//String expR1Expiry="100.00";
		
		/*
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Warehouse = select2ndRow_1stColumn.getText();
		String expR2Warehouse = "";
		
		String actR2Item = select2ndRow_2ndColumn.getText();
		String expR2Item = "";
		
		String actR2TaxCode = select2ndRow_3rdColumn.getText();
		String expR2TaxCode = "";
		
		String actR2PurchaseAccount = select2ndRow_4thColumn.getText();
		String expR2PurchaseAccount = "";
		
		String actR2Units = select2ndRow_5thColumn.getText();
		String expR2Units = "";
		
		String actR2Quantity = select2ndRow_9thColumn.getText();
		String expR2Quantity = "";
		
		String actR2Rate = select2ndRow_11thColumn.getText();
		String expR2Rate = "";
		
		String actR2Gross = select2ndRow_12thColumn.getText();
		String expR2Gross = "";
		
		String actR2Batch = select2ndRow_16thColumn.getText();
		String expR2Batch = "";

		String actR2Expiry = select2ndRow_18thColumn.getText();
		Calendar R2cal=Calendar.getInstance();
		R2cal.add(Calendar.DATE, 5); 
		String expR2Expiry=dtf.format(R2cal.getTime());
	 	*/
		System.out.println("**********************checkVATSalesAccountReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
		System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("PurchaseAccount : "+actR1PurchaseAccount	+"  Value Expected  "+expR1PurchaseAccount);
		System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
		System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
		System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
		//System.out.println("SalesOrder      : "+actR1SalesOrder			+"  Value Expected  "+expR1SalesOrder);

		System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
	//	System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
		//System.out.println("Expiry          : "+actR1Expiry				+"  Value Expected  "+expR1Expiry);
		
		/*
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Warehouse       : "+actR2Warehouse			+"  Value Expected  "+expR2Warehouse);
		System.out.println("Item            : "+actR2Item				+"  Value Expected  "+expR2Item);
		System.out.println("TaxCode         : "+actR2TaxCode			+"  Value Expected  "+expR2TaxCode);
		System.out.println("PurchaseAccount : "+actR2PurchaseAccount	+"  Value Expected  "+expR2PurchaseAccount);
		System.out.println("Units           : "+actR2Units				+"  Value Expected  "+expR2Units);
		System.out.println("Quantity        : "+actR2Quantity			+"  Value Expected  "+expR2Quantity);
		System.out.println("Rate            : "+actR2Rate				+"  Value Expected  "+expR2Rate);
		System.out.println("Gross           : "+actR2Gross				+"  Value Expected  "+expR2Gross);
		System.out.println("Batch           : "+actR2Batch				+"  Value Expected  "+expR2Batch);
		System.out.println("Expiry          : "+actR2Expiry				+"  Value Expected  "+expR2Expiry);
		*/
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) && actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
			   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchaseAccount.equalsIgnoreCase(expR1PurchaseAccount) 
			   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
			   && actR1Gross.equalsIgnoreCase(expR1Gross)
			  /* && actR2Warehouse.equalsIgnoreCase(expR2Warehouse) 
			   && actR2Item.equalsIgnoreCase(expR2Item) && actR2TaxCode.equalsIgnoreCase(expR2TaxCode) && actR2PurchaseAccount.equalsIgnoreCase(expR2PurchaseAccount) 
			   && actR2Units.equalsIgnoreCase(expR2Units) && actR2Quantity.equalsIgnoreCase(expR2Quantity) && actR2Rate.equalsIgnoreCase(expR2Rate) 
			   && actR2Gross.equalsIgnoreCase(expR2Gross) && actR2Batch.equalsIgnoreCase(expR2Batch) && actR2Expiry.equalsIgnoreCase(expR2Expiry)*/) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 791, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 791, 8, resFail);
			return false;
		}
		}
		
		
		
		
		//Registers Menu
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[9]")
		private static WebElement registersMenu;
		
		@FindBy(xpath="//span[contains(text(),'Opening Balance Register')]")
		private static WebElement openingBalanceRegister;
		
		@FindBy(xpath="//span[contains(text(),'Journal Entries Register')]")
		private static WebElement journalEntriesRegister;
		
		@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
		private static WebElement creditNoteRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Debit Note Register')]")
		private static WebElement debitNoteRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Receipt Register')]")
		private static WebElement receiptRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Payment Register')]")
		private static WebElement paymentRegister;;
		
		@FindBy(xpath="//span[contains(text(),'PDC Receipts Register')]")
		private static WebElement PDCReceiptsRegister;;
		
		@FindBy(xpath="//span[contains(text(),'PDC Payments Register')]")
		private static WebElement PDCPaymentsRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Entry Journal Register')]")
		private static WebElement entryJournalRegister;;
		
		@FindBy(xpath="//span[contains(text(),'Entry journal detail report')]")
		private static WebElement entryJournalDetailReport;;
		
	
		
		public boolean checkOpeningBalanceRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			//((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);",SalesadvanceVATreport);
			
			//Thread.sleep(2000);
			
			//getAction().moveToElement(SalesadvanceVATreport).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalanceRegister));
			openingBalanceRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 809, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 809, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 810, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 810, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 811, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 811, 7, actRow3List);

			
			
			
		
			System.out.println("*****************************************checkOpeningBalanceRegister***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 808, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 808, 8, resFail);
				return false;
			}
			
			
		}
		
		
	//	@FindBy(xpath="//*[@id='FilterFields_209_0']/li[2]/a/i")
	//	private static WebElement salesAccountreport_FilterAccount2Expansion;
		
	//	@FindBy(xpath="(//input[@id='5002'])[2]")
	//private static WebElement report_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FilterFields_516_0']/ul[2]/li[1]/div/label/span")
		private static WebElement openingBalancereport_FilterDepartmentNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_516_0_DefaultFilter_0']")
		private static WebElement openingBalancereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkOpeningBalanceRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancereport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				openingBalancereport_FilterDepartmentNameChkbox.click();
			}
			
			//smreport_FilterWarehouseNameChkbox.click();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancereport_DefaultFilterTxt));
			openingBalancereport_DefaultFilterTxt.click();
			openingBalancereport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 813, 5));
			
			Thread.sleep(2000);
			
			openingBalancereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 814, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 814, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 815, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 815, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 816, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 816, 7, actRow3List);

			
			
			
			
			System.out.println("*****************************************checkOpeningBalanceRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
		
						
		
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalancereport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				openingBalancereport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 817, 6);
			excelReader.setCellData(xlfile, xlSheetName, 817, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRow3List.equalsIgnoreCase(expRow3List)
					)
			{
				excelReader.setCellData(xlfile, xlSheetName, 812, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 812, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkOpeningBalanceRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 819, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 820, 6);
		excelReader.setCellData(xlfile, xlSheetName, 820, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =  excelReader.getCellData(xlSheetName, 821, 6);
		excelReader.setCellData(xlfile, xlSheetName, 821, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency =excelReader.getCellData(xlSheetName, 822, 6);
		excelReader.setCellData(xlfile, xlSheetName, 822, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 823, 6);
		excelReader.setCellData(xlfile, xlSheetName, 823, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 824, 6);
		excelReader.setCellData(xlfile, xlSheetName, 824, 7, actR1Account);

		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit =excelReader.getCellData(xlSheetName, 825, 6);
		excelReader.setCellData(xlfile, xlSheetName, 825, 7, actR1Debit);

		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit =excelReader.getCellData(xlSheetName, 826, 6);
		excelReader.setCellData(xlfile, xlSheetName, 826, 7, actR1Credit);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account =excelReader.getCellData(xlSheetName, 827, 6);
		excelReader.setCellData(xlfile, xlSheetName, 827, 7, actR2Account);

		
		String actR2Debit = select2ndRow_2ndColumn.getText();
		String expR2Debit =excelReader.getCellData(xlSheetName, 828, 6);
		excelReader.setCellData(xlfile, xlSheetName, 828, 7, actR2Debit);

		
		String actR2Credit = select2ndRow_3rdColumn.getText();
		String expR2Credit =excelReader.getCellData(xlSheetName, 829, 6);
		excelReader.setCellData(xlfile, xlSheetName, 829, 7, actR2Credit);

		
		System.out.println("**********************checkOpeningBalanceRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		System.out.println("*******************************ROW2**********************************");
		System.out.println("Account       : "+actR2Account			+"  Value Expected  "+expR2Account);
		System.out.println("Debit            : "+actR2Debit				+"  Value Expected  "+expR2Debit);
		System.out.println("Credit         : "+actR2Credit			+"  Value Expected  "+expR2Credit);
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit)
			   &&actR2Account.equalsIgnoreCase(expR2Account)
			   &&actR2Debit.equalsIgnoreCase(expR2Debit)&&actR2Credit.equalsIgnoreCase(expR2Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 818, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 818, 8, resFail);
			return false;
		}
		}
		
	
		public boolean checkJournalEntriesRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesRegister));
			journalEntriesRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 831, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 831, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 832, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 832, 7, actRow2List);

			
			
			
			
			
			
			
		
			System.out.println("*****************************************checkJournalEntriesRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 830, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 830, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="(//*[@id='FilterFields_515_0']/ul[2]/li[1]/div/label/span)[1]")
		private static WebElement journalEntriesreport_FilterDepartmentNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_515_0_DefaultFilter_0']")
		private static WebElement journalEntriesreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkJournalEntriesRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				journalEntriesreport_FilterDepartmentNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesreport_DefaultFilterTxt));
			journalEntriesreport_DefaultFilterTxt.click();
			journalEntriesreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 834, 5));
			
			Thread.sleep(2000);
			
			journalEntriesreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 835, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 835, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 836, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 836, 7, actRow2List);

			
			
			
		
			
			
			
			
			System.out.println("*****************************************checkOpeningBalanceRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(journalEntriesreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				journalEntriesreport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 837, 6);
			excelReader.setCellData(xlfile, xlSheetName, 837, 7, actRowCount);


			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 833, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 833, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkJournalEntriesRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 839, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 840, 6);
		excelReader.setCellData(xlfile, xlSheetName, 840, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 841, 6);
		excelReader.setCellData(xlfile, xlSheetName, 841, 7, actOpenWindowsCount);


		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency =excelReader.getCellData(xlSheetName, 842, 6);
		excelReader.setCellData(xlfile, xlSheetName, 842, 7, actCurrency);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 843, 6);
		excelReader.setCellData(xlfile, xlSheetName, 843, 7, actDepartment);


		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 844, 6);
		excelReader.setCellData(xlfile, xlSheetName, 844, 7, actR1Account);


		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit =excelReader.getCellData(xlSheetName, 845, 6);
		excelReader.setCellData(xlfile, xlSheetName, 845, 7, actR1Debit);


		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit =excelReader.getCellData(xlSheetName, 846, 6);
		excelReader.setCellData(xlfile, xlSheetName, 846, 7, actR1Credit);


		
		
		
		System.out.println("**********************checkJournalEntriesRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 838, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 838, 8, resFail);
			return false;
		}
		}

	
		
		
		
		public boolean checkCreditNoteRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNoteRegister));
			creditNoteRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 848, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 848, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 849, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 849, 7, actRow2List);

			
			
			
			
			
			
			
		
			System.out.println("*****************************************checkCreditNoteRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)) 
			{
				excelReader.setCellData(xlfile, xlSheetName, 847, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 847, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		//@FindBy(xpath="//*[@id='FilterFields_609_0']/ul[1]/li[1]/div/label/span")
		@FindBy(xpath="//*[@id='FilterFields_609_0']/ul[2]/li[1]/div/label/span")
		private static WebElement creditNotereport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_609_0_DefaultFilter_0']")
		private static WebElement creditNotereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkCreditNoteRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				creditNotereport_FilterAccount2NameChkbox.click();
			}
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotereport_DefaultFilterTxt));
			creditNotereport_DefaultFilterTxt.click();
			creditNotereport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 851, 5));
			
			Thread.sleep(1000);
			
			creditNotereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 852, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 852, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 853, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 853, 7, actRow2List);

			
			
			
		
			
			
			
			
			System.out.println("*****************************************checkCreditNoteRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				creditNotereport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 854, 6);
			excelReader.setCellData(xlfile, xlSheetName, 854, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 850, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 850, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkCreditNoteRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 856, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 857, 6);
		excelReader.setCellData(xlfile, xlSheetName, 857, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName, 858, 6);
		excelReader.setCellData(xlfile, xlSheetName, 858, 7,actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 859, 6);
		excelReader.setCellData(xlfile, xlSheetName, 859, 7, actAccount);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 860, 6);
		excelReader.setCellData(xlfile, xlSheetName, 860, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 861, 6);
		excelReader.setCellData(xlfile, xlSheetName, 861, 7, actR1Account);

		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 862, 6);
		excelReader.setCellData(xlfile, xlSheetName, 862, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 863, 6);
		excelReader.setCellData(xlfile, xlSheetName, 863, 7, actR1Amount);

		
		
		
		System.out.println("**********************checkCreditNoteRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1TaxCode.equalsIgnoreCase(expR1TaxCode)&&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 855, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 855, 8, resFail);
			return false;
		}
		}

		
		
		
		
		
	
		public boolean checkDebitNoteRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitNoteRegister));
			debitNoteRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 865, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 865, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 866, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 866, 7, actRow2List);

			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 867, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 867, 7, actRow3List);

			
			
			
			
			
			
			
		
			System.out.println("*****************************************checkDebitNoteRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&	actRow3List.equalsIgnoreCase(expRow3List)) 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 864, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 864, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="(//*[@id='FilterFields_610_0']/ul[2]/li[1]/div/label/span)[2]")
		private static WebElement DebitNotereport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_610_0_DefaultFilter_0']")
		private static WebElement DebitNotereport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkDebitNoteRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DebitNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				DebitNotereport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DebitNotereport_DefaultFilterTxt));
			DebitNotereport_DefaultFilterTxt.click();
			DebitNotereport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 869, 5));
			
			Thread.sleep(2000);
			
			DebitNotereport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 870, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 870, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 871, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 871, 7, actRow2List);

			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 872, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 872, 7, actRow3List);

		
			
			
			
			
			System.out.println("*****************************************checkDebitNoteRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DebitNotereport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				DebitNotereport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 873, 6);
			excelReader.setCellData(xlfile, xlSheetName, 873, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 868, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 868, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkDebitNoteRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 875, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 876, 6);
		excelReader.setCellData(xlfile, xlSheetName, 876, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 877, 6);
		excelReader.setCellData(xlfile, xlSheetName, 877, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 878, 6);
		excelReader.setCellData(xlfile, xlSheetName, 878, 7, actAccount);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 879, 6);
		excelReader.setCellData(xlfile, xlSheetName, 879, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 880, 6);
		excelReader.setCellData(xlfile, xlSheetName, 880, 7, actR1Account);

		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode =excelReader.getCellData(xlSheetName, 881, 6);
		excelReader.setCellData(xlfile, xlSheetName, 881, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 882, 6);
		excelReader.setCellData(xlfile, xlSheetName, 882, 7, actR1Amount);

		
		
		
		System.out.println("**********************checkDebitNoteRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1TaxCode.equalsIgnoreCase(expR1TaxCode)&&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 874, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 874, 8, resFail);
			return false;
		}
		}

		
		
		
		

		public boolean checkReceiptRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receiptRegister));
			receiptRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 884, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 884, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 885, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 885, 7, actRow2List);

			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 886, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 886, 7, actRow3List);

			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 887, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 887, 7, actRow4List);

			
			
		/*	
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Rct : 4, HDFC, 4.00, , 4.00, , 4.00, ]";
			
			
			

			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 126.00, , 126.00, , 33.00, ]";
			
			*/
			
		
			System.out.println("*****************************************checkReceiptRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		/*	
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&	actRow3List.equalsIgnoreCase(expRow3List)
					&& actRow4List.equalsIgnoreCase(expRow4List)/*&&	actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/) 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 883, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 883, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_598_0']/ul[1]/li[1]/div/label/span")
		private static WebElement ReceiptRegisterreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_598_0_DefaultFilter_0']")
		private static WebElement ReceiptRegisterreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkReceiptRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ReceiptRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				ReceiptRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ReceiptRegisterreport_DefaultFilterTxt));
			ReceiptRegisterreport_DefaultFilterTxt.click();
			ReceiptRegisterreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 889, 5));
			
			Thread.sleep(1000);
			
			ReceiptRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(1000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 890, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 890, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 891, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 891, 7, actRow2List);


			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 892, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 892, 7, actRow3List);


		
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 893, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 893, 7, actRow4List);


			/*
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[Rct : 4, HDFC, 4.00, , 4.00, , 4.00, ]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , , 126.00, , 126.00, , 33.00, ]";
			
			*/
			
			System.out.println("*****************************************checkReceiptRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		/*	
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
*/
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ReceiptRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				ReceiptRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 894, 6);
			excelReader.setCellData(xlfile, xlSheetName, 894, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount.equals(expRowCount)&&
					actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)/*&&
					actRow5List.equalsIgnoreCase(expRow5List)&&
					actRow6List.equalsIgnoreCase(expRow6List)*/)
			{
				
				excelReader.setCellData(xlfile, xlSheetName, 888, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 888, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkReceiptRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 896, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 897, 6);
		excelReader.setCellData(xlfile, xlSheetName, 897, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =  excelReader.getCellData(xlSheetName, 898, 6);
		excelReader.setCellData(xlfile, xlSheetName, 898, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = excelReader.getCellData(xlSheetName, 899, 6);
		excelReader.setCellData(xlfile, xlSheetName, 899, 7, actAccount);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =  excelReader.getCellData(xlSheetName,900, 6);
		excelReader.setCellData(xlfile, xlSheetName, 900, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = excelReader.getCellData(xlSheetName,901, 6);
		excelReader.setCellData(xlfile, xlSheetName, 901, 7, actR1Account);

		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 902, 6);
		excelReader.setCellData(xlfile, xlSheetName, 902, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =  excelReader.getCellData(xlSheetName, 903, 6);
		excelReader.setCellData(xlfile, xlSheetName, 903, 7, actR1Amount);
		
		
		System.out.println("**********************checkReceiptRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1TaxCode.equalsIgnoreCase(expR1TaxCode)&&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 895, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 895, 8, resFail);
			return false;
		}
		}

		

		
		
		public boolean checkPaymentRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(paymentRegister));
			paymentRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 905, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 905, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 906, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 906, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =  excelReader.getCellData(xlSheetName, 907, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 907, 7, actRow3List);

			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 908, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 908, 7, actRow4List);

			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 909, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 909, 7, actRow5List);

			
			
			
		
			System.out.println("*****************************************checkPaymentRegisterReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&actRow5List.equalsIgnoreCase(expRow5List)
					)
					 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 904, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 904, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="(//*[@id='FilterFields_599_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement PaymentRegisterreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_599_0_DefaultFilter_0']")
		private static WebElement PaymentRegisterreport_DefaultFilterTxt;
		
		
		
		
		
		
		
		public boolean checkPaymentRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				PaymentRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PaymentRegisterreport_DefaultFilterTxt));
			PaymentRegisterreport_DefaultFilterTxt.click();
			PaymentRegisterreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 911, 5));
			
			Thread.sleep(2000);
			
			PaymentRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 912, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 912, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 913, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 913, 7, actRow2List);

			
			
			
			
			
			
			
			System.out.println("*****************************************checkPaymentRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
		
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				PaymentRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 914, 6);
			excelReader.setCellData(xlfile, xlSheetName, 914, 7, actRowCount);



			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&
					actRowCount.equals(expRowCount)
					)
			{
				 excelReader.setCellData(xlfile, xlSheetName, 910, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 910, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkPaymentRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 916, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 917, 6);
		excelReader.setCellData(xlfile, xlSheetName, 917, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =  excelReader.getCellData(xlSheetName, 918, 6);
		excelReader.setCellData(xlfile, xlSheetName, 918, 7, actDocNo);


		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = excelReader.getCellData(xlSheetName, 919, 6);
		excelReader.setCellData(xlfile, xlSheetName, 919, 7, actAccount);


		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 920, 6);
		excelReader.setCellData(xlfile, xlSheetName, 920, 7, actDepartment);


		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = excelReader.getCellData(xlSheetName, 921, 6);
		excelReader.setCellData(xlfile, xlSheetName, 921, 7, actR1Account);


		
		//String actR1TaxCode = select1stRow_2ndColumn.getText();
		//String expR1TaxCode = "Std Rate";
		
		String actR1Amount = select1stRow_2ndColumn.getText();
		String expR1Amount =  excelReader.getCellData(xlSheetName, 922, 6);
		excelReader.setCellData(xlfile, xlSheetName, 922, 7, actR1Amount);


		
		
		
		System.out.println("**********************checkPaymentRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		//System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 915, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 915, 8, resFail);
			return false;
		}
		}

		
	
		
		public boolean checkPDCReceiptsRegisterReportwithAllIncludePDC() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCReceiptsRegister));
			PDCReceiptsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(0);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(0);
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 924, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 924, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 925, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 925, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow3ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 926, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 926, 7, actRow3List);

			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow4ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 927, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 927, 7, actRow4List);

			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 928, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 928, 7, actRow5List);

		/*	
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[NDT46 : 3, Bank, Customer A, 10.00, 20/12/2021]";
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "[NDT46 : 4, HDFC, Customer B, 4.00, 20/12/2021]";
			
			int reportsByWarehouseRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsByWarehouseRow8ListArray.add(data);
			}
			String actRow8List = reportsByWarehouseRow8ListArray.toString();
			String expRow8List = "[NDT46 : 4, HDFC, VAT INPUT, 0.19, 20/12/2021]";
			
			int reportsByWarehouseRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsByWarehouseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsByWarehouseRow9ListArray.add(data);
			}
			String actRow9List = reportsByWarehouseRow9ListArray.toString();
			String expRow9List = "[Grand Total, , , , 27.25, ]";
			
			
			*/
		
			System.out.println("*****************************************checkPDCReceiptsRegisterReportwithALLincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		/*	
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&actRow5List.equalsIgnoreCase(expRow5List)
					/*&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List)&&
					actRow8List.equalsIgnoreCase(expRow8List)&&actRow9List.equalsIgnoreCase(expRow9List)*/
					)
					 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 923, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 923, 8, resFail);
				return false;
			}
			
		}	
		
		
		@FindBy(xpath="//*[@id='dvReportInputs']/div[7]/label/span")
		private static WebElement PDCConsolidatedAmount;
		
		public boolean checkPDCReceiptsRegisterReportwithUnConvertedIncludePDCandincludeConvertedPDCandConsolidatedCheckboxes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCReceiptsRegister));
			PDCReceiptsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(2);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(1);
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			
			Thread.sleep(2000);
			
			getAction().moveToElement(PDCConsolidatedAmount).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCConsolidatedAmount));
			PDCConsolidatedAmount.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 945, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 945, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 946, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 946, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow3ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 947, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 947, 7, actRow3List);

			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow4ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 948, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 948, 7, actRow4List);

 			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 949, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 949, 7, actRow5List);

			
			
			
			
		
			System.out.println("*****************************************checkPDCReceiptsRegisterReportwithUnConvertedincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&
					actRow4List.equalsIgnoreCase(expRow4List)&&actRow5List.equalsIgnoreCase(expRow5List)
					)
					 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 944, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 944, 8, resFail);
				return false;
			}
			
		}	
		
		
		@FindBy(xpath="(//*[@id='FilterFields_518_0']/ul[1]/li[1]/div/label/span)[1]")
		private static WebElement pdcReceiptsRegisterreport_FilterAccount2NameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_518_0_DefaultFilter_0']")
		private static WebElement PDCReceiptsRegisterreport_DefaultFilterTxt;
		
		
		
		public boolean checkPDCReceiptRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
				report_FilterExpandBtn.click();
				Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReceiptsRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				pdcReceiptsRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCReceiptsRegisterreport_DefaultFilterTxt));
			PDCReceiptsRegisterreport_DefaultFilterTxt.click();
			PDCReceiptsRegisterreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 930, 5));
			
			Thread.sleep(2000);
			
			PDCReceiptsRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 931, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 931, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 932, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 932, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 933, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 933, 7, actRow3List);
/*
			
			

			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "";
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "";
			
			
		*/	
			
			
			
			System.out.println("*****************************************checkPDCReceiptRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
		
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
*/
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pdcReceiptsRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				pdcReceiptsRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 934, 6);
			excelReader.setCellData(xlfile, xlSheetName, 934, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)/*&&
					actRow4List.equalsIgnoreCase(expRow4List)&&	actRow5List.equalsIgnoreCase(expRow5List)*/&&

					actRowCount.equals(expRowCount)
					)
			{
				excelReader.setCellData(xlfile, xlSheetName, 929, 8, resPass);
				return true;
			}
			else
			{
				
				excelReader.setCellData(xlfile, xlSheetName, 929, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkPDCReceiptsRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 936, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 937, 6);
		excelReader.setCellData(xlfile, xlSheetName, 937, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName, 938, 6);
		excelReader.setCellData(xlfile, xlSheetName, 938, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = excelReader.getCellData(xlSheetName, 939, 6);
		excelReader.setCellData(xlfile, xlSheetName, 939, 7, actAccount);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment= excelReader.getCellData(xlSheetName, 940, 6);
		excelReader.setCellData(xlfile, xlSheetName, 940, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = excelReader.getCellData(xlSheetName, 941, 6);
		excelReader.setCellData(xlfile, xlSheetName, 941, 7, actR1Account);

		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 942, 6);
		excelReader.setCellData(xlfile, xlSheetName, 942, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 943, 6);
		excelReader.setCellData(xlfile, xlSheetName, 943, 7, actR1Amount);

		
		
		
		System.out.println("**********************checkPaymentRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) &&  actR1TaxCode.equalsIgnoreCase(expR1TaxCode)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 935, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 935, 8, resFail);
			return false;
		}
		}

		
		
		
		public boolean checkPDCPaymentRegisterReportwithAllIncludePDC() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentsRegister));
			PDCPaymentsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(0);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(0);
			Thread.sleep(2000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 951, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 951, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 952, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 952, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 953, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 953, 7, actRow3List);

			
			
			
			
		
			System.out.println("*****************************************checkPDCPaymentRegisterReportwithALLincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List))
					
			
			{
				 excelReader.setCellData(xlfile, xlSheetName, 950, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 950, 8, resFail);
				return false;
			}
			
		}	
		
		
	//	@FindBy(xpath="//*[@id='dvReportInputs']/div[7]/label/span")
	//	private static WebElement PDCConsolidatedAmount;
		
		public boolean checkPDCPaymentRegisterReportwithUnConvertedIncludePDCandincludeConvertedPDCandConsolidatedCheckboxes() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentsRegister));
			PDCPaymentsRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pa_TransactionTypeDropdown));
			Select s1=new Select(pa_TransactionTypeDropdown);
			s1.selectByIndex(2);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sByC_SelectDelears));
			Select s2=new Select(sByC_SelectDelears);
			s2.selectByIndex(1);
			Thread.sleep(2000);
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			
			Thread.sleep(2000);
			
			getAction().moveToElement(PDCConsolidatedAmount).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCConsolidatedAmount));
			PDCConsolidatedAmount.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 970, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 970, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 971, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 971, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 972, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 972, 7, actRow1List);

			
			
			
			
			
		
			System.out.println("*****************************************checkPDCPaymentRegisterReportwithUnConvertedincludePDC***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					)
			{	 
				excelReader.setCellData(xlfile, xlSheetName, 969, 8, resPass);
				
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 969, 8, resFail);
				return false;
			}
			
		}	
		
		
		@FindBy(xpath="//*[@id='FilterFields_519_0']/ul[1]/li[1]/div/label/span")
		private static WebElement PDCPaymentRegisterreport_FilterAccount2NameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_519_0_DefaultFilter_0']")
		private static WebElement PDCPaymentRegisterreport_DefaultFilterTxt;
		
		
		
		public boolean checkPDCPaymentRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				PDCPaymentRegisterreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentRegisterreport_DefaultFilterTxt));
			PDCPaymentRegisterreport_DefaultFilterTxt.click();
			PDCPaymentRegisterreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 955, 5));
			
			Thread.sleep(2000);
			
			PDCPaymentRegisterreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 956, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 956, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=1 && i!=6)
				{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 957, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 957, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 958, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 958, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPDCPaymentsRegisterReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCPaymentRegisterreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				PDCPaymentRegisterreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 959, 6);
			excelReader.setCellData(xlfile, xlSheetName, 959, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount)
					)
			{
				 excelReader.setCellData(xlfile, xlSheetName, 954, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 954, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkPDCPaymentRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 961, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 962, 6);
		excelReader.setCellData(xlfile, xlSheetName, 962, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 963, 6);
		excelReader.setCellData(xlfile, xlSheetName, 963, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount =excelReader.getCellData(xlSheetName, 964, 6);
		excelReader.setCellData(xlfile, xlSheetName, 964, 7, actAccount);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 965, 6);
		excelReader.setCellData(xlfile, xlSheetName, 965, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 966, 6);
		excelReader.setCellData(xlfile, xlSheetName, 966, 7, actR1Account);

		
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 967, 6);
		excelReader.setCellData(xlfile, xlSheetName, 967, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount =excelReader.getCellData(xlSheetName, 968, 6);
		excelReader.setCellData(xlfile, xlSheetName, 968, 7, actR1Amount);

		
		
		
		System.out.println("**********************checkPaymentRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Account        	: "+actAccount			+"  Value Expected  "+expAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode            : "+actR1TaxCode				+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount         : "+actR1Amount			+"  Value Expected  "+expR1Amount);
		
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actAccount.equalsIgnoreCase(expAccount) &&  actR1TaxCode.equalsIgnoreCase(expR1TaxCode)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Amount.equalsIgnoreCase(expR1Amount))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 960, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 960, 8, resFail);
			return false;
		}
		}
	
		
		public boolean checkEntryJournalRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryJournalRegister));
			entryJournalRegister.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 974, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 974, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("9")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 975, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 975, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
				}
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = excelReader.getCellData(xlSheetName, 976, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 976, 7, actPage3List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
				}
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List =excelReader.getCellData(xlSheetName, 977, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 977, 7, actPage4List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
				}
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List =excelReader.getCellData(xlSheetName, 978, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 978, 7, actPage5List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
				}
			}
			String actPage6List = reportPage6ListArray.toString();
			String expPage6List = excelReader.getCellData(xlSheetName, 979, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 979, 7, actPage6List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage7Count = reportTableCells.size();
			ArrayList<String> reportPage7ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage7Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage7ListArray.add(data);
				}
			}
			String actPage7List = reportPage7ListArray.toString();
			String expPage7List =excelReader.getCellData(xlSheetName, 980, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 980, 7, actPage7List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage8Count = reportTableCells.size();
			ArrayList<String> reportPage8ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage8Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage8ListArray.add(data);
				}
			}
			String actPage8List = reportPage8ListArray.toString();
			String expPage8List =excelReader.getCellData(xlSheetName, 981, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 981, 7, actPage8List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage9Count = reportTableCells.size();
			ArrayList<String> reportPage9ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage9Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage9ListArray.add(data);
				}
			}
			String actPage9List = reportPage9ListArray.toString();
			String expPage9List = excelReader.getCellData(xlSheetName, 982, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 982, 7, actPage9List);

			
			System.out.println("*****************************************checkEntryJournalRegisterReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
			System.out.println(actPage6List);
			System.out.println(expPage6List);
			
			System.out.println(actPage7List);
			System.out.println(expPage7List);
			
			System.out.println(actPage8List);
			System.out.println(expPage8List);
			
			System.out.println(actPage9List);
			System.out.println(expPage9List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&&actPage5List.equalsIgnoreCase(expPage5List) && actPage6List.equalsIgnoreCase(expPage6List) && actPage7List.equalsIgnoreCase(expPage7List) 
				&& actPage8List.equalsIgnoreCase(expPage8List)&& actPage9List.equalsIgnoreCase(expPage9List))


			{
				excelReader.setCellData(xlfile, xlSheetName, 973, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 973, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_517_0']/ul[1]/li[1]/div/label/span")
		private static WebElement entryjournalreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_517_0_DefaultFilter_0']")
		private static WebElement entryjournalreport_DefaultFilterTxt;
		
	
		
		
		
		
		
		public boolean checkEntryJournalRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				entryjournalreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalreport_DefaultFilterTxt));
			entryjournalreport_DefaultFilterTxt.click();
			entryjournalreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 984, 5));
			
			Thread.sleep(2000);
			
			entryjournalreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 985, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 985, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("9")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=1 && i!=15 && i!=29&&i!=43&& i!=57 && i!=71 &&i!=85&&i!=99&&i!=113 && i!=127 
						&& i!=141&&i!=155){
	
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 986, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 986, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				if(i!=1 && i!=15){
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
				}
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List =excelReader.getCellData(xlSheetName, 987, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 987, 7, actPage3List);

		
			
			
			
			
			System.out.println("*****************************************checkEntryJournalRegisterReportwithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			System.out.println(actPage3List);
			System.out.println(actPage3List);
			
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				entryjournalreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 988, 6);
			excelReader.setCellData(xlfile, xlSheetName, 988, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&
					actPage2List.equalsIgnoreCase(expPage2List)&&actPage3List.equalsIgnoreCase(expPage3List)&&

					actRowCount.equals(expRowCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 983, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 983, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkEntryJournalRegisterReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
					
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 990, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 991, 6);
		excelReader.setCellData(xlfile, xlSheetName, 991, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo =excelReader.getCellData(xlSheetName, 992, 6);
		excelReader.setCellData(xlfile, xlSheetName, 992, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 993, 6);
		excelReader.setCellData(xlfile, xlSheetName, 993, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 994, 6);
		excelReader.setCellData(xlfile, xlSheetName, 994, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 995, 6);
		excelReader.setCellData(xlfile, xlSheetName, 995, 7, actR1Account);

		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit =excelReader.getCellData(xlSheetName, 996, 6);
		excelReader.setCellData(xlfile, xlSheetName, 996, 7, actR1Debit);

		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit =excelReader.getCellData(xlSheetName, 997, 6);
		excelReader.setCellData(xlfile, xlSheetName, 997, 7, actR1Credit);

		
		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account =excelReader.getCellData(xlSheetName, 998, 6);
		excelReader.setCellData(xlfile, xlSheetName, 998, 7, actR2Account);

		
		String actR2Debit = select2ndRow_2ndColumn.getText();
		String expR2Debit = excelReader.getCellData(xlSheetName, 999, 6);
		excelReader.setCellData(xlfile, xlSheetName, 999, 7, actR2Debit);

		
		String actR2Credit = select2ndRow_3rdColumn.getText();
		String expR2Credit =excelReader.getCellData(xlSheetName, 1000, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1000, 7, actR2Credit);

		
		
		
		System.out.println("**********************checkEntryJournalRegisterReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Account       : "+actR2Account			+"  Value Expected  "+expR2Account);
		System.out.println("Debit            : "+actR2Debit				+"  Value Expected  "+expR2Debit);
		System.out.println("Credit         : "+actR2Credit			+"  Value Expected  "+expR2Credit);
		
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit)
			   && actR2Account.equalsIgnoreCase(expR2Account)
			   &&actR2Debit.equalsIgnoreCase(expR2Debit)&&actR2Credit.equalsIgnoreCase(expR2Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 989, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 989, 8, resFail);
			return false;
		}
		}

	
		
		public boolean checkEntryJournalDetailReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(registersMenu));
			registersMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryJournalDetailReport));
			entryJournalDetailReport.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 1002, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1002, 7, actPage1List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("9")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 1003, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1003, 7, actPage2List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
				}
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List =excelReader.getCellData(xlSheetName, 1004, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1004, 7, actPage3List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage4Count = reportTableCells.size();
			ArrayList<String> reportPage4ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage4Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage4ListArray.add(data);
				}
			}
			String actPage4List = reportPage4ListArray.toString();
			String expPage4List =excelReader.getCellData(xlSheetName, 1005, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1005, 7, actPage4List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage5Count = reportTableCells.size();
			ArrayList<String> reportPage5ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage5Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage5ListArray.add(data);
				}
			}
			String actPage5List = reportPage5ListArray.toString();
			String expPage5List =excelReader.getCellData(xlSheetName, 1006, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1006, 7, actPage5List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage6Count = reportTableCells.size();
			ArrayList<String> reportPage6ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage6Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage6ListArray.add(data);
				}
			}
			String actPage6List = reportPage6ListArray.toString();
			String expPage6List =excelReader.getCellData(xlSheetName, 1007, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1007, 7, actPage6List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage7Count = reportTableCells.size();
			ArrayList<String> reportPage7ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage7Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage7ListArray.add(data);
				}
			}
			String actPage7List = reportPage7ListArray.toString();
			String expPage7List =excelReader.getCellData(xlSheetName, 1008, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1008, 7, actPage7List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage8Count = reportTableCells.size();
			ArrayList<String> reportPage8ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage8Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage8ListArray.add(data);
				}
			}
			String actPage8List = reportPage8ListArray.toString();
			String expPage8List =excelReader.getCellData(xlSheetName, 1009, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1009, 7, actPage8List);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage9Count = reportTableCells.size();
			ArrayList<String> reportPage9ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage9Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
			
			
				String data = reportTableCells.get(i).getText();
				reportPage9ListArray.add(data);
				}
			}
			String actPage9List = reportPage9ListArray.toString();
			String expPage9List =excelReader.getCellData(xlSheetName, 1010, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1010, 7, actPage9List);

			
		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);

			
			int reportPage10Count = reportTableCells.size();
			ArrayList<String> reportPage10ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage10Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage10ListArray.add(data);
			}
			String actPage10List = reportPage10ListArray.toString();
			String expPage10List =excelReader.getCellData(xlSheetName, 1011, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1011, 7, actPage10List);

			
			
			
			
			
			
			
			
			System.out.println("*****************************************checkEntryJournalDetailedReports***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			
			System.out.println(actPage3List);
			System.out.println(expPage3List);
			
			System.out.println(actPage4List);
			System.out.println(expPage4List);
			
			System.out.println(actPage5List);
			System.out.println(expPage5List);
			
			System.out.println(actPage6List);
			System.out.println(expPage6List);
			
			System.out.println(actPage7List);
			System.out.println(expPage7List);
			
			System.out.println(actPage8List);
			System.out.println(expPage8List);
			
			System.out.println(actPage9List);
			System.out.println(expPage9List);
			
			System.out.println(actPage10List);
			System.out.println(expPage10List);
			
			
			
			if(actPage1List.equalsIgnoreCase(expPage1List) && actPage2List.equalsIgnoreCase(expPage2List) && actPage3List.equalsIgnoreCase(expPage3List) 
				&& actPage4List.equalsIgnoreCase(expPage4List)&&actPage5List.equalsIgnoreCase(expPage5List) && actPage6List.equalsIgnoreCase(expPage6List) && actPage7List.equalsIgnoreCase(expPage7List) 
				&& actPage8List.equalsIgnoreCase(expPage8List)&& actPage9List.equalsIgnoreCase(expPage9List)
				&& actPage10List.equalsIgnoreCase(expPage10List))


			{
				excelReader.setCellData(xlfile, xlSheetName, 1001, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1001, 8, resFail);
				return false;
			}
			
			
		}
		
		
	
		
		@FindBy(xpath="//*[@id='FilterFields_674_0']/ul[1]/li[1]/div/label/span")
		private static WebElement entryjournalDetailreport_FilterAccount2NameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_674_0_DefaultFilter_0']")
		private static WebElement entryjournalDetailreport_DefaultFilterTxt;
		
	
		
		
		
		
		
		public boolean checkEntryJournalDetailsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalDetailreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				entryjournalDetailreport_FilterAccount2NameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalDetailreport_DefaultFilterTxt));
			entryjournalDetailreport_DefaultFilterTxt.click();
			entryjournalDetailreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1013, 5));
			
			Thread.sleep(2000);
			
			entryjournalDetailreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=2 && i!=8 && i!=14 && i!=20&&i!=26 && i!=32 
						&& i!=38 &&i!=44 &&i!=50&&i!=56&&i!=62&&i!=68){
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 1014, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1014, 7, actPage1List);


			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				if(i!=2){
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
				}
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 1015, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1015, 7, actPage2List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportPage3Count = reportTableCells.size();
			ArrayList<String> reportPage3ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage3Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage3ListArray.add(data);
			}
			String actPage3List = reportPage3ListArray.toString();
			String expPage3List = "";
		
			*/
			
			
			
			System.out.println("*****************************************checkEntryJournalDetailsReportwithFilterOption***************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			System.out.println(actPage2List);
			System.out.println(actPage2List);
			
			//System.out.println(actPage3List);
			//System.out.println(actPage3List);
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(entryjournalDetailreport_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				entryjournalDetailreport_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1016, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1016, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)&&
					actPage2List.equalsIgnoreCase(expPage2List)/*&&actPage3List.equalsIgnoreCase(expPage3List)*/&&

					actRowCount.equals(expRowCount))
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1012, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1012, 8, resFail);
				return false;
			}
			
		}
		
			
			
			
			
		
		public boolean checkEntryJournalDetailsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn4RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn4RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1018, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn4RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1019, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1019, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 1020, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1020, 7, actDocNo);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = excelReader.getCellData(xlSheetName, 1021, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1021, 7, actCurrency);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment =excelReader.getCellData(xlSheetName, 1022, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1022, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account = excelReader.getCellData(xlSheetName, 1023, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1023, 7, actR1Account);

		
		String actR1Debit = select1stRow_2ndColumn.getText();
		String expR1Debit = excelReader.getCellData(xlSheetName, 1024, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1024, 7, actR1Debit);

		
		String actR1Credit = select1stRow_3rdColumn.getText();
		String expR1Credit =excelReader.getCellData(xlSheetName, 1025, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1025, 7, actR1Credit);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
		String actR2Account = select2ndRow_1stColumn.getText();
		String expR2Account = excelReader.getCellData(xlSheetName, 1026, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1026, 7, actR2Account);

		
		String actR2Debit = select2ndRow_2ndColumn.getText();
		String expR2Debit =excelReader.getCellData(xlSheetName, 1027, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1027, 7, actR2Debit);

		
		String actR2Credit = select2ndRow_3rdColumn.getText();
		String expR2Credit =excelReader.getCellData(xlSheetName, 1028, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1028, 7, actR2Credit);

		
		
		System.out.println("**********************checkEntryJournalDetailsReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		//System.out.println("Vendor          : "+actVendor			+"  Value Expected  "+expVendor);
		System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Account       : "+actR1Account			+"  Value Expected  "+expR1Account);
		System.out.println("Debit            : "+actR1Debit				+"  Value Expected  "+expR1Debit);
		System.out.println("Credit         : "+actR1Credit			+"  Value Expected  "+expR1Credit);
		
		
	System.out.println("*******************************ROW2**********************************");
		
		System.out.println("Account       : "+actR2Account			+"  Value Expected  "+expR2Account);
		System.out.println("Debit            : "+actR2Debit				+"  Value Expected  "+expR2Debit);
		System.out.println("Credit         : "+actR2Credit			+"  Value Expected  "+expR2Credit);
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actCurrency.equalsIgnoreCase(expCurrency) 
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Account.equalsIgnoreCase(expR1Account)
			   &&actR1Debit.equalsIgnoreCase(expR1Debit)&&actR1Credit.equalsIgnoreCase(expR1Credit)
			   && actR2Account.equalsIgnoreCase(expR2Account)
			   &&actR2Debit.equalsIgnoreCase(expR2Debit)&&actR2Credit.equalsIgnoreCase(expR2Credit))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1017, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 1017, 8, resFail);
			return false;
		}
		}

	
		
	//Sales and Purchase Analysis
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[10]")
		private static WebElement salesAndPurchasesMenu;
		
		
				
		@FindBy(xpath="//span[contains(text(),'Sales Grouped by Customer')]")
		private static WebElement salesGroupedByCustomer;
		
		@FindBy(xpath="//span[contains(text(),'Sales Grouped by Item')]")
		private static WebElement salesGroupedByItem;
		
		@FindBy(xpath="//span[contains(text(),'Sales Grouped by Department')]")
		private static WebElement salesGroupedByDepartment;
		
		@FindBy(xpath="//span[contains(text(),'Purchases Grouped by Vendor')]")
		private static WebElement purchasesGroupedByVendor;
		
		@FindBy(xpath="//span[contains(text(),'Purchases Grouped by Item')]")
		private static WebElement purchasesGroupedByItem;
		
		@FindBy(xpath="//span[contains(text(),'Purchases Grouped by Department')]")
		private static WebElement purchasesGroupedByDepartment;
		
	
		
		
		
		
		public boolean checkSalesGroupedByCustomerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			Thread.sleep(2000);
			getAction().moveToElement(salesAndPurchasesMenu).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByCustomer));
			salesGroupedByCustomer.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1030, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1031, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1031, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1032, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1032, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1033, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1033, 7, actRow3List);

			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1034, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1034, 7, actRow4List);

			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1035, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1035, 7, actRow5List);

			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = excelReader.getCellData(xlSheetName, 1036, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1036, 7, actRow6List);

			
			
		
			System.out.println("*****************************************checkSalesGroupedByCustomerReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List))
					
					 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1029, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1029, 8, resFail);
				return false;
			}
			
		}	
		
	
		
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_524_0']/ul[3]/li[1]/div/label/span")
		private static WebElement salesByCustomerreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_524_0_DefaultFilter_0']")
		private static WebElement salesByCustomerreport_DefaultFilterTxt;
		
		
		
		public boolean checkSalesGroupedByCustomerReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				salesByCustomerreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerreport_DefaultFilterTxt));
			salesByCustomerreport_DefaultFilterTxt.click();
			salesByCustomerreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1038, 5));
			
			
			
			salesByCustomerreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1039, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1039, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1040, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1040, 7, actRow2List);

			
		/*	int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "";
			
			*/

			
			
			
			
			
			
			System.out.println("*****************************************checkSalesGroupedByCustomerReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			//System.out.println(actRow3List);
			//System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByCustomerreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				salesByCustomerreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(1000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1041, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1041, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)/*&&actRow3List.equalsIgnoreCase(expRow3List)*/&&

					actRowCount.equals(expRowCount))
					
			{
				excelReader.setCellData(xlfile, xlSheetName, 1037, 8, resPass);
				
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1037, 8, resFail);
				return false;
			}
			
		}
		

		public boolean checkSalesGroupedByCustomerReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn2RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn2RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1043, 5)))
                         {
                    		 
                    		 reportTableColumn2RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1043, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1043, 7, actMonthList);

			
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1044, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1044, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1044, 7, actDay);

			
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase( excelReader.getCellData(xlSheetName, 1045, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1045, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1045, 7, actVoucherList);

			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase( excelReader.getCellData(xlSheetName, 1046, 5)) )
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1047, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1047, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
			String expDocNo =excelReader.getCellData(xlSheetName, 1048, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1048, 7, actDocNo);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount =excelReader.getCellData(xlSheetName, 1049, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1049, 7, actAccount);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				String actCurrency = voucherHeaderCurrency.getAttribute("value");
				String expCurrency =excelReader.getCellData(xlSheetName, 1050, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1050, 7, actCurrency);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment = excelReader.getCellData(xlSheetName, 1051, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1051, 7, actDepartment);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 1052, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1052, 7, actPlaceOfSupply);


				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction =excelReader.getCellData(xlSheetName, 1053, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1053, 7, actJurisdiction);

				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Warehouse = select1stRow_1stColumn.getText();
				String expR1Warehouse =excelReader.getCellData(xlSheetName, 1054, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1054, 7, actR1Warehouse);

				
				String actR1Item = select1stRow_2ndColumn.getText();
				String expR1Item =excelReader.getCellData(xlSheetName, 1055, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1055, 7, actR1Item);

				
				String actR1SalesAccount = select1stRow_4thColumn.getText();
				String expR1SalesAccount =excelReader.getCellData(xlSheetName, 1056, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1056, 7, actR1SalesAccount);

				
				String actR1TaxCode = select1stRow_3rdColumn.getText();
				String expR1TaxCode =excelReader.getCellData(xlSheetName, 1057, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1057, 7, actR1TaxCode);

				
				
				
				String actR1Units = select1stRow_5thColumn.getText();
				String expR1Units = excelReader.getCellData(xlSheetName, 1058, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1058, 7, actR1Units);

				
				String actR1Quantity = select1stRow_11thColumn.getText();
				String expR1Quantity =excelReader.getCellData(xlSheetName, 1059, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1059, 7,actR1Quantity);

				
				String actR1Rate = select1stRow_14thColumn.getText();
				String expR1Rate = excelReader.getCellData(xlSheetName, 1060, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1060, 7, actR1Rate);

				
				String actR1Gross = select1stRow_15thColumn.getText();
				String expR1Gross =excelReader.getCellData(xlSheetName, 1061, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1061, 7, actR1Gross);

				
				String actR1Batch = select1stRow_19thColumn.getText();
				String expR1Batch = excelReader.getCellData(xlSheetName, 1062, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1062, 7, actR1Batch);


				/*String actR1Expiry = select1stRow_18thColumn.getText();
				DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
				Calendar R1cal=Calendar.getInstance();
				R1cal.add(Calendar.DATE, 2); 
				//String expR1Expiry=dtf.format(R1cal.getTime());
				String expR1Expiry="100.00";
				*/
				
				
				

			 	
				System.out.println("**********************checkSalesGroupedByCustomerBackTrackOption*********************");
				 
				System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
				
				System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
				System.out.println("Vendor          : "+actAccount			+"  Value Expected  "+expAccount);
				System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
				System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
				System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
				System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
				
				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
				System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
				System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
				System.out.println("SalesAccount : "+actR1SalesAccount	+"  Value Expected  "+expR1SalesAccount);
				System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
				System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
				System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
				System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
				System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
				
				
				
				
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				
				if ( actOpenWindowsCount.equals(expOpenWindowsCount)
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount) && actCurrency.equalsIgnoreCase(expCurrency) 
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
					   
					   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
					   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1SalesAccount.equalsIgnoreCase(expR1SalesAccount) 
					   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
					   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
					  
					  ) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					excelReader.setCellData(xlfile, xlSheetName, 1042, 8, resPass);
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					excelReader.setCellData(xlfile, xlSheetName, 1042, 8, resFail);
					return false;
				}
			}
		
		
		
		
		public boolean checkSalesGroupedByCustomerReportswithSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByCustomer));
			salesGroupedByCustomer.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1064, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1065, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1065, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1066, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1066, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1067, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1067, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1068, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1068, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1069, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1069, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1070, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1070, 7, actRow6List);

			
			
			
			
			
			System.out.println("*********************************checkSalesGroupedByCustomerReportwithIncludeSalesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1063, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1063, 8, resFail);
				return false;
			}
		}
		
		

		public boolean checkSalesGroupedByItemReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByItem));
			salesGroupedByItem.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1072, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1073, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1073, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1074, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1074, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1075, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1075, 7, actRow3List);

			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 1076, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1076, 7, actRow4List);

			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 1077, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1077, 7, actRow5List);

			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1078, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1078, 7, actRow6List);

			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 1079, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1079, 7, actRow7List);

			
			int reportsByWarehouseRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsByWarehouseRow8ListArray.add(data);
			}
			String actRow8List = reportsByWarehouseRow8ListArray.toString();
			String expRow8List =excelReader.getCellData(xlSheetName, 1080, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1080, 7, actRow8List);

			
			int reportsByWarehouseRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsByWarehouseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsByWarehouseRow9ListArray.add(data);
			}
			String actRow9List = reportsByWarehouseRow9ListArray.toString();
			String expRow9List =excelReader.getCellData(xlSheetName, 1081, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1081, 7, actRow9List);

			
			
		
			System.out.println("*****************************************checkSalesGroupedByItemReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
					&&actRow7List.equalsIgnoreCase(expRow7List)&&
					actRow8List.equalsIgnoreCase(expRow8List)&&actRow9List.equalsIgnoreCase(expRow9List))
					
					 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1071, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1071, 8, resFail);
				return false;
			}
			
		}	
		
	
		
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_525_0']/ul[3]/li[1]/div/label/span")
		private static WebElement salesByItemreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_525_0_DefaultFilter_0']")
		private static WebElement salesByItemreport_DefaultFilterTxt;
		
		
		
		public boolean checkSalesGroupedByItemReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				salesByItemreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByItemreport_DefaultFilterTxt));
			salesByItemreport_DefaultFilterTxt.click();
			salesByItemreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1083, 5));
			
			Thread.sleep(2000);
			
			salesByItemreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 1084, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1084, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1085, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1085, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1086, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1086, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkSalesGroupedByItemReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				salesByItemreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1087, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1087, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount))
					
			{
				excelReader.setCellData(xlfile, xlSheetName, 1082, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1082, 8, resFail);
				return false;
			}
			
		}
		

		public boolean checkSalesGroupedByItemPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1089, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1089, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesGroupedByItemPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1088, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1088, 8, resFail);
				return false;
			}
		}		
		
		
		public boolean checkSalesGroupedByItemReportswithSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByItem));
			salesGroupedByItem.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1091, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1092, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1092, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1093, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1093, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1094, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1094, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1095, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1095, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1096, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1096, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1097, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1097, 7, actRow6List);

			
			

			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 1098, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1098, 7, actRow7List);

			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = excelReader.getCellData(xlSheetName, 1099, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1099, 7, actRow8List);

			
			

			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List =excelReader.getCellData(xlSheetName, 1100, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1100, 7, actRow9List);

			
			
			
			System.out.println("*********************************checkSalesGroupedByItemReportwithIncludeSalesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1090, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1090, 8, resFail);
				return false;
			}
		}
		
		
		public boolean checkSalesGroupedByDepartmentReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByDepartment));
			salesGroupedByDepartment.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1102, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 1103, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1103, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1104, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1104, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1105, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1105, 7, actRow3List);

			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 1106, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1106, 7, actRow4List);

			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 1107, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1107, 7, actRow5List);

			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1108, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1108, 7, actRow6List);

			/*
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "";
			
			int reportsByWarehouseRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsByWarehouseRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsByWarehouseRow8ListArray.add(data);
			}
			String actRow8List = reportsByWarehouseRow8ListArray.toString();
			String expRow8List = "";
			
			int reportsByWarehouseRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsByWarehouseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsByWarehouseRow9ListArray.add(data);
			}
			String actRow9List = reportsByWarehouseRow9ListArray.toString();
			String expRow9List = "";
			*/
			
		
			System.out.println("*****************************************checkSalesGroupedByDepartmentReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
		/*	
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
					/*&&actRow7List.equalsIgnoreCase(expRow7List)&&
					actRow8List.equalsIgnoreCase(expRow8List)&&actRow9List.equalsIgnoreCase(expRow9List)*/)
			{		
					 
				excelReader.setCellData(xlfile, xlSheetName, 1101, 8, resPass);
 
			
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1101, 8, resFail);
				return false;
			}
			
		}	
		
	
		
		
		
		
		@FindBy(xpath="//*[@id='FilterFields_526_0']/ul[2]/li[1]/div/label/span")
		private static WebElement salesByDepartmentreport_FilterDepartmentNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_526_0_DefaultFilter_0']")
		private static WebElement salesByDepartmentreport_DefaultFilterTxt;
		
		
		
		public boolean checkSalesGroupedByDepartmentReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				salesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByDepartmentreport_DefaultFilterTxt));
			salesByDepartmentreport_DefaultFilterTxt.click();
			salesByDepartmentreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1110, 5));
			
			Thread.sleep(2000);
			
			salesByDepartmentreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1111, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1111, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1112, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1112, 7, actRow2List);

					
					
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1113, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1113, 7, actRow3List);

			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1114, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1114, 7, actRow4List);

			
			

			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1115, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1115, 7, actRow5List);

			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1116, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1116, 7, actRow6List);

			

			
			
			
			
			
			
			System.out.println("*****************************************checkSalesGroupedByDepartmentReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				salesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1117, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1117, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)&&
					actRowCount.equals(expRowCount))
					
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1109, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1109, 8, resFail);
				return false;
			}
			
		}
		

		public boolean checkSalesGroupedByDepartmentPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1119, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1119, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkSalesGroupedByDepartmentPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1118, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1118, 8, resFail);
				return false;
			}
		}		
		
		
		public boolean checkSalesGroupedByDepartmentReportswithSalesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesGroupedByDepartment));
			salesGroupedByDepartment.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1121, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1122, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1122, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1123, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1123, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1124, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1124, 7, actRow3List);

			
			
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 1125, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1125, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 1126, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1126, 7, actRow5List);

			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1127, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1127, 7, actRow6List);

			
			
/*
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "";
			
			

			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "";
			
			*/
			
			System.out.println("*********************************checkSalesGroupedByDepartmentReportwithIncludeSalesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
		/*	
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)/*&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1120, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1120, 8, resFail);
				return false;
			}
		}
			


		
		
		
		public boolean checkPurchasesGroupedByVendorReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByVendor));
			purchasesGroupedByVendor.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1129, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1130, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1130, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1131, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1131, 7, actRow2List);


			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1132, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1132, 7, actRow3List);


			
			/*
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
		
			System.out.println("*****************************************checkPurchasesGroupedByVendorReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					/*&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/)
					
					 
 
 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1128, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1128, 8, resFail);
				return false;
			}
			
		}	
		
	

		@FindBy(xpath="//a[contains(text(),'PurchaseAC')]//i")
		private static WebElement report_FilterPurchaseACExpansion;
		
		@FindBy(xpath="(//*[@id='5002'])[1]")
		private static WebElement report_FilterPurchaseACNameChkbox;
		
		
		@FindBy(xpath="(//*[@id='FilterFields_527_0']/ul[3]/li[1]/div/label/span)[1]")
		private static WebElement purchasessByVendorreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_527_0_DefaultFilter_0']")
		private static WebElement purchasesByVendorreport_DefaultFilterTxt;
		
		
		
		public boolean checkPurchasesGroupedByVendorReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterPurchaseACExpansion));
			report_FilterPurchaseACExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasessByVendorreport_FilterItemNameChkbox));
			
			if (report_FilterPurchaseACNameChkbox.isSelected()==false) 
			{
				purchasessByVendorreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByVendorreport_DefaultFilterTxt));
			purchasesByVendorreport_DefaultFilterTxt.click();
			purchasesByVendorreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1134, 5));
			
			Thread.sleep(2000);
			
			purchasesByVendorreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1135, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1135, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1136, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1136, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1137, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1137, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPurchasesGroupedByVendorReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasessByVendorreport_FilterItemNameChkbox));
			
			if (report_FilterPurchaseACNameChkbox.isSelected()==true) 
			{
				purchasessByVendorreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1138, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1138, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount))
					
			{
				excelReader.setCellData(xlfile, xlSheetName, 1133, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1133, 8, resFail);
				return false;
			}
			
		}
		

		public boolean checkPurchasesGroupedByVendorReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		    for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             System.out.println(data);
	                              
			             
                    	 if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1140, 5)))
                         {
                    		 
                    		 reportTableColumn1RowsList.get(i).click();
                    		 Thread.sleep(2000);
                    		 break;
                         }
         		     }
	             
		      

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			//ArrayList<String> expMonthlyList = new ArrayList<String>();
			///expMonthlyList.add("January 2020");
			//expMonthlyList.add("November 2021");
			//expMonthlyList.add("");
			//expMonthlyList.add("746.00");
			//expMonthlyList.add("232.00");
			//expMonthlyList.add("514.00 Dr");
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1140, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1140, 7, actMonthList);

			
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1141, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			//ArrayList<String> expDayList = new ArrayList<String>();
			//expDayList.add("23");
			//expDayList.add("");
			//expDayList.add("746.00");
			//expDayList.add("232.00");
			//expDayList.add("36.00");
			//expDayList.add("514.00 Dr");
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1141, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1141, 7, actDay);

			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1142, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			/*ArrayList<String> expVouchersList = new ArrayList<String>();
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("NDT45:1");
			expVouchersList.add("NDT55:1");
			expVouchersList.add("NDT47:2");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT52:1");
			expVouchersList.add("NDT57:SU/IND/TEXT3");
			expVouchersList.add("NDT57:SU/IND/TEXT5");
			expVouchersList.add("NDT51:1");
			expVouchersList.add("NDT57:SU/IND/TEXT4");
			expVouchersList.add("");
			*/
			
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1142, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1142, 7, actVoucherList);

			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();

				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1143, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName,1144, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1144, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
			
		 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String  actDocNo = documentNumberTxt.getAttribute("value");
				String expDocNo =excelReader.getCellData(xlSheetName,1145, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1145, 7, actDocNo);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
				String actAccount = vendorAccountTxt.getAttribute("value");
				String expAccount = excelReader.getCellData(xlSheetName,1146, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1146, 7, actAccount);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
				String actCurrency = voucherHeaderCurrency.getAttribute("value");
				String expCurrency =excelReader.getCellData(xlSheetName,1147, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1147, 7, actCurrency);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
				String actDepartment = departmentTxt.getAttribute("value");
				String expDepartment =excelReader.getCellData(xlSheetName,1148, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1148, 7, actDepartment);

				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
				String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
				String expPlaceOfSupply =excelReader.getCellData(xlSheetName,1149, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1149, 7, actPlaceOfSupply);


				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
				String actJurisdiction = jurisdictionTxt.getAttribute("value");
				String expJurisdiction =excelReader.getCellData(xlSheetName,1150, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1150, 7, actJurisdiction);

				
				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				String actR1Warehouse = select1stRow_1stColumn.getText();
				String expR1Warehouse =excelReader.getCellData(xlSheetName,1151, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1151, 7, actR1Warehouse);

				
				String actR1Item = select1stRow_2ndColumn.getText();
				String expR1Item = excelReader.getCellData(xlSheetName,1152, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1152, 7, actR1Item);

				
				String actR1PurchasesAccount = select1stRow_4thColumn.getText();
				String expR1PurchasesAccount =excelReader.getCellData(xlSheetName,1153, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1153, 7, actR1PurchasesAccount);

				
				String actR1TaxCode = select1stRow_3rdColumn.getText();
				String expR1TaxCode =excelReader.getCellData(xlSheetName,1154, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1154, 7, actR1TaxCode);

				
				
				
				String actR1Units = select1stRow_5thColumn.getText();
				String expR1Units =excelReader.getCellData(xlSheetName,1155, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1155, 7, actR1Units);

				
				String actR1Quantity = select1stRow_9thColumn.getText();
				String expR1Quantity =excelReader.getCellData(xlSheetName,1156, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1156, 7, actR1Quantity);

				
				String actR1Rate = select1stRow_11thColumn.getText();
				String expR1Rate =excelReader.getCellData(xlSheetName,1157, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1157, 7, actR1Rate);

				
				String actR1Gross = select1stRow_12thColumn.getText();
				String expR1Gross =excelReader.getCellData(xlSheetName,1158, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1158, 7, actR1Gross);

				
				String actR1Batch = select1stRow_16thColumn.getText();
				String expR1Batch =excelReader.getCellData(xlSheetName,1159, 6);
				excelReader.setCellData(xlfile, xlSheetName, 1159, 7, actR1Batch);


				/*String actR1Expiry = select1stRow_18thColumn.getText();
				DateFormat dtf = new SimpleDateFormat("dd/MM/yyyy");
				Calendar R1cal=Calendar.getInstance();
				R1cal.add(Calendar.DATE, 2); 
				//String expR1Expiry=dtf.format(R1cal.getTime());
				String expR1Expiry="100.00";
				*/
				
				
				

			 	
				System.out.println("**********************checkPurchasesGroupedByVendorBackTrackOption*********************");
				 
				System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
				
				System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
				System.out.println("Vendor          : "+actAccount			+"  Value Expected  "+expAccount);
				System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
				System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
				System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
				System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
				
				System.out.println("*******************************ROW1**********************************");
				
				System.out.println("Warehouse       : "+actR1Warehouse			+"  Value Expected  "+expR1Warehouse);
				System.out.println("Item            : "+actR1Item				+"  Value Expected  "+expR1Item);
				System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
				System.out.println("SalesAccount : "+actR1PurchasesAccount	+"  Value Expected  "+expR1PurchasesAccount);
				System.out.println("Units           : "+actR1Units				+"  Value Expected  "+expR1Units);
				System.out.println("Quantity        : "+actR1Quantity			+"  Value Expected  "+expR1Quantity);
				System.out.println("Rate            : "+actR1Rate				+"  Value Expected  "+expR1Rate);
				System.out.println("Gross           : "+actR1Gross				+"  Value Expected  "+expR1Gross);
				System.out.println("Batch           : "+actR1Batch				+"  Value Expected  "+expR1Batch);
				
				
				
				
				
				getDriver().switchTo().window(openTabs.get(1)).close();
				
				Thread.sleep(1000);
				
				getDriver().switchTo().window(openTabs.get(0));
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
				BackTrackItemDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
				BackTrackMonthDetailsBackBtn.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
				BackTrackDateDetailsBackBtn.click();
				Thread.sleep(1000);
				
				
				
				if ( actOpenWindowsCount.equals(expOpenWindowsCount)
					  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(expAccount) && actCurrency.equalsIgnoreCase(expCurrency) 
					   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
					  && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
					   
					   && actR1Warehouse.equalsIgnoreCase(expR1Warehouse) 
					   && actR1Item.equalsIgnoreCase(expR1Item) && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1PurchasesAccount.equalsIgnoreCase(expR1PurchasesAccount) 
					   && actR1Units.equalsIgnoreCase(expR1Units) && actR1Quantity.equalsIgnoreCase(expR1Quantity) && actR1Rate.equalsIgnoreCase(expR1Rate) 
					   && actR1Gross.equalsIgnoreCase(expR1Gross) && actR1Batch.equalsIgnoreCase(expR1Batch) 
					  
					  ) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					excelReader.setCellData(xlfile, xlSheetName, 1139, 8, resPass);
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
					report_CloseBtn.click();
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
					sl_CloseBtn.click();
					excelReader.setCellData(xlfile, xlSheetName, 1139, 8, resFail);
					return false;
				}
			}
		
		
		
		
		public boolean checkPurchasesGroupedByVendorReportswithPurchasesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByVendor));
			purchasesGroupedByVendor.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1161, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1162, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1162, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1163, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1163, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1164, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1164, 7, actRow3List);

			
			/*
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
			
			
			
			System.out.println("*********************************checkPurchasesGroupedByVendorReportwithIncludePurchasesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1160, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1160, 8, resFail);
				return false;
			}
		}
		

		public boolean checkPurchasesGroupedByItemReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
		
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByItem));
			purchasesGroupedByItem.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1166, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1167, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1167, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1168, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1168, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1169, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1169, 7, actRow3List);

			
			/*
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
		
			System.out.println("*****************************************checkPurchasesGroupedByItemReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					/*&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/)
			 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1165, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1165, 8, resFail);
				return false;
			}
			
		}	
		
	

	//	@FindBy(xpath="//a[contains(text(),'PurchaseAC')]//i")
		//private static WebElement report_FilterPurchaseACExpansion;
		
		//@FindBy(xpath="(//*[@id='5002'])[1]")
		//private static WebElement report_FilterPurchaseACNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FilterFields_528_0']/ul[2]/li[1]/div/label/span")
		private static WebElement purchasesByItemreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_528_0_DefaultFilter_0']")
		private static WebElement purchasesByItemreport_DefaultFilterTxt;
		
		
		
		public boolean checkPurchaseGroupedByItemReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				purchasesByItemreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByItemreport_DefaultFilterTxt));
			purchasesByItemreport_DefaultFilterTxt.click();
			purchasesByItemreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1171, 5));
			
			Thread.sleep(2000);
			
			purchasesByItemreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1172, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1172, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1173, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1173, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1174, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1174, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPurchasesGroupedByItemReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByItemreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				purchasesByItemreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1175, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1175, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount))
					
			{
				excelReader.setCellData(xlfile, xlSheetName, 1170, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1170, 8, resFail);
				return false;
			}
			
		}
		

		public boolean checkPurchasesGroupedByItemPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1177, 6);
			excelReader.setCellData(xlfile, xlSheetName,1177, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchasesGroupedByItemPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1176, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1176, 8, resFail);
				return false;
			}
		}		
		
		
		
		
		public boolean checkPurchasesGroupedByItemReportswithPurchasesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByItem));
			purchasesGroupedByItem.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1179, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1180, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1180, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1181, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1181, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1182, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1182, 7, actRow3List);

			
			/*
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
			
			
			
			System.out.println("*********************************checkPurchasesGroupedByItemReportwithIncludePurchasesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1178, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1178, 8, resFail);
				return false;
			}
		}

		
		
		
		
		
		public boolean checkPurchasesGroupedByDepartmentReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 
			 LogoutandLoginwithSU();
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", purchasesGroupedByDepartment);
		
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByDepartment));
			purchasesGroupedByDepartment.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1184, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1185, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1185, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1186, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1186, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1187, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1187, 7, actRow3List);

			
			/*
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS Department, 13.00, 130.00]";
			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
		
			System.out.println("*****************************************checkPurchasesGroupedByVendorReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
		*/	
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					/*&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)*/)
			 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1183, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1183, 8, resFail);
				return false;
			}
			
		}	
		
	

	//	@FindBy(xpath="//a[contains(text(),'PurchaseAC')]//i")
		//private static WebElement report_FilterPurchaseACExpansion;
		
		//@FindBy(xpath="(//*[@id='5002'])[1]")
		//private static WebElement report_FilterPurchaseACNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FilterFields_529_0']/ul[1]/li[1]/div/label/span")
		private static WebElement purchasesByDepartmentreport_FilterDepartmentNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_529_0_DefaultFilter_0']")
		private static WebElement purchasesByDepartmentreport_DefaultFilterTxt;
		
		
		
		public boolean checkPurchasesGroupedByDepartmentReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				purchasesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByDepartmentreport_DefaultFilterTxt));
			purchasesByDepartmentreport_DefaultFilterTxt.click();
			purchasesByDepartmentreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1189, 5));
			
			Thread.sleep(2000);
			
			purchasesByDepartmentreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1190, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1190, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1191, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1191, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1192, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1192, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkPurchasesGroupedByDepartmentReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesByDepartmentreport_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				purchasesByDepartmentreport_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1193, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1193, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount))
					
			{
				excelReader.setCellData(xlfile, xlSheetName, 1188, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1188, 8, resFail);
				return false;
			}
			
		}
		

		public boolean checkPurchasesGroupedByDepartmentPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1195, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1195, 7, actOpenWindowsCount);


		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkPurchasesGroupedByDepartmentPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1194, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1194, 8, resFail);
				return false;
			}
		}		
		
		
		
		
		public boolean checkPurchasesGroupedByDepartmentReportswithPurchasesReturnVocherOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesAndPurchasesMenu));
			salesAndPurchasesMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", purchasesGroupedByDepartment);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchasesGroupedByDepartment));
			purchasesGroupedByDepartment.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 1197, 5));
						
			Thread.sleep(2000);
			
			
			getAction().moveToElement(displayMonthlyDetailsOption).build().perform();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(displayMonthlyDetailsOption));
			displayMonthlyDetailsOption.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1198, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1198, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1199, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1199, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1200, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1200, 7, actRow3List);

			
			/*
		
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[Customer A, WA COGS ITEM, 13.00, 130.00]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[, , 74.00, 740.00]";
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow6List = reportsRow5ListArray.toString();
			String expRow6List = "[Grand Total, , 74.00, 740.00]";
			
			*/
			
			
			
			System.out.println("*********************************checkPurchasesGroupedByDepartmentReportwithIncludePurchasesReturnOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		/*	
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			*/
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				/*&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)
				&&actRow6List.equalsIgnoreCase(expRow6List)*/ ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1196, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 119, 8, resFail);
				return false;
			}
		}
	
		
		
		//Miscellaneous Analysis
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[11]")
		private static WebElement miscellaneousAnalysisMenu;
		
		@FindBy(xpath="//span[contains(text(),'Peak and Low Balances')]")
		private static WebElement peakAndLowBalances;
		
		@FindBy(xpath="//span[contains(text(),'Comprative Analysis')]")
		private static WebElement comparativeAnalysis;
		
		@FindBy(xpath="//span[contains(text(),'Transactions Type Analysis')]")
		private static WebElement transactionsTypeAnalysis;
		
		@FindBy(xpath="(//span[contains(text(),'ABC Analysis')])[1]")
		private static WebElement ABCAnalysis;
		
		
		@FindBy(xpath="//span[contains(text(),'Interest Calculation')]")
		private static WebElement interestCalculation;
		
		
		
		
		
		public boolean checkPeakAndLowBalancesAmountReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			 LogoutandLoginwithSU();
			 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalances));
			peakAndLowBalances.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1202, 5)) ||
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1203, 5)) ||
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1204, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1205, 5)))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6 && i!=8) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 1206, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1206, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6 && i!=8) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1207, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1207, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6 && i!=8) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1208, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1208, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6 && i!=8) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1209, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1209, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1210, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1210, 7, actRow5List);

			
			System.out.println("*********************************checkPeakAndLowBalancesReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1201, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1201, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//*[@id='FOption_569_0_DefaultFilter_0']")
		private static WebElement peakAndLowBalance_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_569_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement palb_report_FilterWarehouseNameChkbox;
		
		
		public boolean checkPeakAndLowBalancesReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(palb_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				palb_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalance_DefaultFilterTxt));
			peakAndLowBalance_DefaultFilterTxt.click();
			peakAndLowBalance_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1212, 5));
			
			Thread.sleep(2000);
			
			peakAndLowBalance_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6 && i!=8) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1213, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1213, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if(i!=6&&i!=8){
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1214, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1214, 7, actRow2List);

			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if(i!=6&&i!=8){
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1215, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1215, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if(i!=6&&i!=8){
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1216, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1216, 7, actRow4List);

			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1217, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1217, 7, actRow5List);

			
			
			System.out.println("****************************checkPeakAndLowBalancesReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(palb_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				palb_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1218, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1218, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount.equals(expRowCount)
					&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List) )
			{
				
				 excelReader.setCellData(xlfile, xlSheetName, 1211, 8, resPass);
				return true;
			} 
			else 
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1211, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkPeakAndLowBalancesReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1221, 5)))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
		/*	
			ArrayList<String> expMonthlyList = new ArrayList<String>();
		/*	expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("November 2021");
			expMonthlyList.add("December 2021");
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");*/
			
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1221, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1221, 7, actMonthList);

			
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1222, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			/*ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);

			expDayList.add("23");
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");*/
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1222, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1222, 7, actDay);

			
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1223, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
		/*	ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("ExeStk:2");
			expVouchersList.add("");
			expVouchersList.add("NDT57:SU/IND/TEXT2");
			expVouchersList.add("48.00");
			expVouchersList.add("36.00");
			expVouchersList.add("");
			expVouchersList.add("84.00");
			expVouchersList.add("StkTrf:2");
			expVouchersList.add("84.00");
			expVouchersList.add("12.00");
			expVouchersList.add("12.00");
			expVouchersList.add("84.00");
			expVouchersList.add("NDT50:7");
			expVouchersList.add("84.00");
			expVouchersList.add("");
			expVouchersList.add("12.00");
			expVouchersList.add("72.00");
			expVouchersList.add("NDT50:1");
			expVouchersList.add("72.00");
			expVouchersList.add("");
			expVouchersList.add("10.00");
			expVouchersList.add("62.00");
			expVouchersList.add("");
			expVouchersList.add("");
			expVouchersList.add("60.00");
			expVouchersList.add("34.00");*/
			//expVouchersList.add("");
			
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1223, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1223, 7, actVoucherList);

			
			System.out.println(actVoucherList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1224, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1225, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1225, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo= excelReader.getCellData(xlSheetName, 1226, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1226, 7, actDocNo);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomer=customerAccountTxt.getAttribute("value");
			String expCustomer= excelReader.getCellData(xlSheetName, 1227, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1227, 7, actCustomer);

			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse = excelReader.getCellData(xlSheetName, 1228, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1228, 7, actWarehouse);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem =  excelReader.getCellData(xlSheetName, 1229, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1229, 7, actItem);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode =  excelReader.getCellData(xlSheetName, 1230, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1230, 7, actTaxCode);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = excelReader.getCellData(xlSheetName, 1231, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1231, 7, actSalesAccount);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = excelReader.getCellData(xlSheetName, 1232, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1232, 7, actUnits);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actQuantity = select1stRow_11thColumn.getText();
		 	String expQuantity = excelReader.getCellData(xlSheetName, 1233, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1233, 7, actQuantity);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder =  excelReader.getCellData(xlSheetName, 1234, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1234, 7, actLSalesOrder);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
		 	String actRate = select1stRow_14thColumn.getText();
		 	String expRate = excelReader.getCellData(xlSheetName, 1235, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1235, 7, actRate);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
		 	String actGross = select1stRow_15thColumn.getText();
		 	String expGross = excelReader.getCellData(xlSheetName, 1236, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1236, 7, actGross);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
		 	String actBatch = select1stRow_19thColumn.getText();
		 	String expBatch = excelReader.getCellData(xlSheetName, 1237, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1237, 7, actBatch);

		 	
			System.out.println("**********************checkPeakAndLowBalancesReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         +"  Value Expected  "+expDocNo);
			System.out.println("Customer Account : "+actCustomer      +"  Value Expected  "+expCustomer);
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthList.equals(expMonthlyList) && actDay.equals(expDayList) && actVoucherList.equals(expVouchersList) &&actOpenWindowsCount==expOpenWindowsCount
					&& actDocNo.equalsIgnoreCase(expDocNo) && actCustomer.equalsIgnoreCase(expCustomer) && actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actLSalesOrder.equalsIgnoreCase(expLSalesOrder)
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) && actBatch.equalsIgnoreCase(expBatch)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1219, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1219, 8, resFail);
				return false;
			}
		}
		

		public boolean checkPeakAndLowBalancesReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalances));
			peakAndLowBalances.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{ 
				if(i!=2 && i!=4 && i!=6 && i!=8 && i!=16 && i!=18
						&&i!=20 && i!=22&&i!=24 &&i!=26 &&i!=28&&i!=36
						&&i!=38 &&i!=46 && i!=48 && i!=52 &&i!=54 && i!=56
						
						&&i!=58 && i!=60&&i!=62 &&i!=64&&i!=68&&i!=76
						&&i!=78&&i!=86 && i!=88 && i!=96 &&i!=98
						&&i!=102&&i!=104&&i!=106&&i!=108 &&i!=116&&i!=118)
				{
					
				
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 1238, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1238, 7, actPage1List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 1239, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1239, 7, actPage2List);*/

			
			
			Thread.sleep(2000);
						
			System.out.println("*********************************checkPeakAndLowBalancesReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);*/
			
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1237, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1237, 8, resFail);
				return false;
			}
		}
		
	
		
		
		public boolean checkComparitiveAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparativeAnalysis));
			comparativeAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1241, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1242, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1243, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1244, 5)))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=13) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1245, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1245, 7, actRow1List);

			
			

			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				if (i!=13) 
				{
				String data = reportsRow5List.get(i).getText();
					reportsRow5ListArray.add(data);
				}
				
			}
			String actRow2List = reportsRow5ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1246, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1246, 7, actRow2List);

			
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 223.66, , , , , , , , , 223.66, ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 490.00, , , , , , , , , 490.00, ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 766.58, , , , , , , , , , , 766.58, ]";
			*/
			System.out.println("*********************************checkComparativeAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
	/*		System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		*/	
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1240, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1240, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_570_0_DefaultFilter_0']")
		private static WebElement comparitive_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_570_0']/ul[3]/li[1]/div/label/span)[1]")
		private static WebElement comparitive_report_FilterDepartmentNameChkbox;
		
		
		public boolean checkComparitiveAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparitive_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				comparitive_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparitive_DefaultFilterTxt));
			comparitive_DefaultFilterTxt.click();
			comparitive_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1248, 5));
			
			Thread.sleep(2000);
			
			comparitive_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=13) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 1249,6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1249, 7, actRow1List);

			
			

			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				if (i!=13) 
				{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
				}
			}
			String actRow2List = reportsRow5ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1250,6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1250, 7, actRow2List);


		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 220.00, , , , , , , , , , , 220.00, ]";
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 600.00, , , , , , , , , , , 600.00, ]";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 880.00, , , , , , , , , , , 880.00, ]";
			*/
			System.out.println("****************************checkComparitiveAnalysisReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		*/	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparitive_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				comparitive_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1251, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1251, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount.equals(expRowCount)
					/*&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List)*/ )
			{
				excelReader.setCellData(xlfile, xlSheetName, 1247, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1247, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkComparitiveAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             System.err.println(data);
	             
	             if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1253, 5)))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
		/*	ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			//expMonthlyList.add("November 2021");
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");*/
			
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1253, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1253, 7, actMonthList);

			
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			/*ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);

			expDayList.add("22");
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");*/
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1254, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1254, 7, actDay);

			
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
		/*	ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			*/
			
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1255, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1255, 7, actVoucherList);

			
			System.out.println(actVouchersList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1256, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1257, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1257, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo=excelReader.getCellData(xlSheetName, 1258, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1258, 7, actDocNo);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor=excelReader.getCellData(xlSheetName, 1259, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1259, 7, actVendor);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = excelReader.getCellData(xlSheetName, 1260, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1260, 7, actCurrency);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment =excelReader.getCellData(xlSheetName, 1261, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1261, 7, actDepartment);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 1262, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1262, 7, actPlaceOfSupply);


			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction = excelReader.getCellData(xlSheetName, 1263, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1263, 7, actJurisdiction);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse =excelReader.getCellData(xlSheetName, 1264, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1264, 7, actWarehouse);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = excelReader.getCellData(xlSheetName, 1265, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1265, 7, actItem);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode =excelReader.getCellData(xlSheetName, 1266, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1266, 7, actTaxCode);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount =excelReader.getCellData(xlSheetName, 1267, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1267, 7, actSalesAccount);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits = excelReader.getCellData(xlSheetName, 1268, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1268, 7, actUnits);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity =excelReader.getCellData(xlSheetName, 1269, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1269, 7, actQuantity);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate =excelReader.getCellData(xlSheetName, 1270, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1270, 7, actRate);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross = excelReader.getCellData(xlSheetName, 1271, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1271, 7, actGross);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthList.equals(expMonthlyList) && actDay.equals(expDayList) && actVoucherList.equals(expVouchersList) &&actOpenWindowsCount.equals(expOpenWindowsCount)
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1252, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1252, 8, resFail);
				return false;
			}
		}
		

		public boolean checkComparitiveAnalysisReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(comparativeAnalysis));
			comparativeAnalysis.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 1273, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1273, 7, actPage1List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, PURCHASE VARIANCE, 510.00, , , , , , , , , , , 510.00, , 14, VAT INPUT, 19.71, , , , , , , , , , , 19.71, , 15, HDFC, 5.71, , , , , , , , , , , 5.71, , 16, Grand Total, 1,000.00, 1,000.00, , , , , , , , , , , ]";
			
			*/
			Thread.sleep(2000);
						
			System.out.println("*********************************checkComparitiveAnalysiswithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
		/*	
			System.out.println(actPage2List);
			System.out.println(expPage2List);
			*/
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1272, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1272, 8, resFail);
				return false;
			}
		}
		
	
		
	
		
		public boolean checkTransactionsTypeAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsTypeAnalysis));
			transactionsTypeAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1275, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1276, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1277, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1278, 5)))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1279, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1279, 7, actRow1List);

			
			

			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
					String data = reportsRow5List.get(i).getText();
					reportsRow5ListArray.add(data);
				
			}
			String actRow2List = reportsRow5ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1280, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1280, 7, actRow2List);


			
		/*	
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[WA COGS ACC INV, 1,423.66, , 1,491.00, , , , , , , 96.34, , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[STD RATE COGS ACC INV, 490.00, , 94.50, , 120.00, , , , , 240.00, , , , , , , , , , , , , , , , , , , , , , , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[Grand Total, 2,166.58, , , 1,858.50, , , 120.00, , , , , 363.42, , , , , , , , , , , , , , , , , , , , , , , , ]";
			*/
			System.out.println("*********************************checkTransactionsTypeAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
		/*	
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			*/
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) /*&& actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1274, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1274, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		@FindBy (xpath="//input[@id='FOption_571_0_DefaultFilter_0']")
		private static WebElement transaction_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_571_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement transaction_report_FilterWarehouseNameChkbox;
		
		
		public boolean checkTransactionsTypeAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transaction_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				transaction_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transaction_DefaultFilterTxt));
			transaction_DefaultFilterTxt.click();
			transaction_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1282, 5));
			
			Thread.sleep(2000);
			
			transaction_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1283, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1283, 7, actRow1List);

			
			

			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow2List = reportsRow5ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1284, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1284, 7, actRow2List);

			
		/*	
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "";
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "";
			
			*/
			
			System.out.println("****************************checkTransactionsTypeAnalysisReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
	/*		
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
		*/	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transaction_report_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				transaction_report_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1285, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1285, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount.equals(expRowCount)
					/*&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List)*/ )
			{
				excelReader.setCellData(xlfile, xlSheetName, 1281, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1281, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkTransactionsTypeAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1287, 5)))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			/*ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			//expMonthlyList.add("November 2021");
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");*/
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1287, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1287, 7, actMonthList);

			
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			/*ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);

			expDayList.add("22");
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");*/
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1288, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1288, 7, actDay);

			
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
		/*	ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			*/
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1289, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1289, 7, actVoucherList);

			
			System.out.println(actVoucherList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1290, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1291, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1291, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo=excelReader.getCellData(xlSheetName, 1292, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1292, 7, actDocNo);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor=excelReader.getCellData(xlSheetName, 1293, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1293, 7, actVendor);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency = excelReader.getCellData(xlSheetName, 1294, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1294, 7, actCurrency);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment =excelReader.getCellData(xlSheetName, 1295, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1295, 7, actDepartment);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 1296, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1296, 7, actPlaceOfSupply);


			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction =excelReader.getCellData(xlSheetName, 1297, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1297, 7, actJurisdiction);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse =excelReader.getCellData(xlSheetName, 1298, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1298, 7, actWarehouse);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = excelReader.getCellData(xlSheetName, 1299, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1299, 7,actItem);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode =excelReader.getCellData(xlSheetName, 1300, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1300, 7, actTaxCode);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount =excelReader.getCellData(xlSheetName, 1301, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1301, 7, actSalesAccount);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits =excelReader.getCellData(xlSheetName, 1302, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1302, 7, actUnits);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity = excelReader.getCellData(xlSheetName, 1303, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1303, 7, actQuantity);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate =excelReader.getCellData(xlSheetName, 1304, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1304, 7, actRate);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross =excelReader.getCellData(xlSheetName, 1305, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1305, 7, actGross);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthList.equals(expMonthlyList) && actDay.equals(expDayList) && actVoucherList.equals(expVouchersList) &&actOpenWindowsCount.equals(expOpenWindowsCount)
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				 excelReader.setCellData(xlfile, xlSheetName, 1286, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				 excelReader.setCellData(xlfile, xlSheetName, 1286, 8, resFail);
				return false;
			}
		}

		public boolean checkTransactionsTypeAnalysisReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionsTypeAnalysis));
			transactionsTypeAnalysis.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 1307, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1307, 7, actPage1List);

		/*	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, EXCESS COGS POSTING ACC, 130.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 14, VAT ADVANCE PURCHASE, 1.50, , , , , , , , , , , , , , , , , , 1.50, , , , , , , , , , , , , , , , , , 15, PURCHASE VARIANCE, 510.00, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 16, VAT INPUT, 19.71, , , , , , , , , , , , , , , , , , 1.50, , , , , , , , , , , 0.29, , , , , , , 17, HDFC, 5.71, , , , , , , , , , , , , , , , , , , , , , , 6.00, , 6.00, , , , 6.29, , , , , , , 18, Grand Total, , 1,000.00, , 777.00, , , 480.00, , , , , 753.16, , , , , , , 60.00, , , 100.00, , 24.00, 200.00, 24.00, 126.00, , , 12.58, , , 12.00, , , 63.00]";
		*/	
			
			Thread.sleep(2000);
						
			System.out.println("*********************************checkTransactionsTypeAnalysisReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
		/*	
			System.out.println(actPage2List);
			System.out.println(expPage2List);
		*/	
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1306, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1306, 8, resFail);
				return false;
			}
		}

		
	@FindBy(xpath="//*[@id='RITCombobox__2']")
	private static WebElement reportsBasedOnDropdown;
	
	
	@FindBy(xpath="//*[@id='RITCombobox__3']")
	private static WebElement considerDropdown;
		
		
		public boolean checkABCAnalysiswithReportBasedonBalance() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABCAnalysis));
			ABCAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1309, 5)) ||
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1310, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1311, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1312, 5)))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsBasedOnDropdown));
			Select s1=new Select(reportsBasedOnDropdown);
			s1.selectByIndex(0);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(considerDropdown));
			Select s2=new Select(considerDropdown);
			s2.selectByIndex(0);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1313, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1313, 7, actRow1List);


			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1314, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1314, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1315, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1315, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1316, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1316, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1317, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1317, 7, actRow5List);

			
			System.out.println("*********************************checkABCAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1308, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1308, 8, resFail);
				return false;
			}
		}
		
		
		
		public boolean checkABCAnalysiswithReportBasedonTurnover() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABCAnalysis));
			ABCAnalysis.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1321, 5)) ||
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1322, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1323, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1324, 5)))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsBasedOnDropdown));
			Select s1=new Select(reportsBasedOnDropdown);
			s1.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(considerDropdown));
			Select s2=new Select(considerDropdown);
			s2.selectByIndex(1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1325, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1325, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1326, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1326, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1327, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1327, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1328, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1328, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1329, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1329, 7, actRow5List);

			
			System.out.println("*********************************checkABCAnalysisReportwithTurnover*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1320, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1320, 8, resFail);
				return false;
			}
		}
	
		
		
		
		@FindBy (xpath="//input[@id='FOption_572_0_DefaultFilter_0']")
		private static WebElement ABC_DefaultFilterTxt;
		
		@FindBy (xpath="(//*[@id='FilterFields_572_0']/ul[3]/li[1]/div/label/span)[1]")
		private static WebElement ABC_report_FilterDepartmentNameChkbox;
		
	
		public boolean checkABCAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterDepartmentExpansion));
			report_FilterDepartmentExpansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABC_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==false) 
			{
				ABC_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABC_DefaultFilterTxt));
			ABC_DefaultFilterTxt.click();
			ABC_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 1331, 5));
			
			Thread.sleep(2000);
			
			ABC_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1332, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1332, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1333, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1333, 7, actRow2List);

			
		/*	
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "";
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "";
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "";
			*/
			System.out.println("****************************checkABCAnalysisReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			/*
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			*/
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABC_report_FilterDepartmentNameChkbox));
			
			if (report_FilterDepartmentNameChkbox.isSelected()==true) 
			{
				ABC_report_FilterDepartmentNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1334, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1334, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount.equals(expRowCount)
					/*&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List)
					&&actRow5List.equalsIgnoreCase(expRow5List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1330, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1330, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkABCAnalysisReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1336, 5)))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
			/*ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("November 2021");
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");*/
		
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1336, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1336, 7, actMonthList);

			System.out.println(actMonthlyList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
			/*ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);

			expDayList.add("22");
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");*/
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1337, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1337, 7, actDay);

			
			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
		/*	ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");
			*/
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1338, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1338, 7, actVoucherList);

			
			System.out.println(actVoucherList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1339, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1340, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1340, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo=excelReader.getCellData(xlSheetName, 1341, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1341, 7, actDocNo);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor=excelReader.getCellData(xlSheetName, 1342, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1342, 7, actVendor);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency =excelReader.getCellData(xlSheetName, 1343, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1343, 7,actCurrency);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment =excelReader.getCellData(xlSheetName, 1344, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1344, 7, actDepartment);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply = excelReader.getCellData(xlSheetName, 1345, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1345, 7, actPlaceOfSupply);


			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction =excelReader.getCellData(xlSheetName, 1346, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1346, 7, actJurisdiction);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse =excelReader.getCellData(xlSheetName, 1347, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1347, 7, actWarehouse);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem =excelReader.getCellData(xlSheetName, 1348, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1348, 7, actItem);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode =excelReader.getCellData(xlSheetName, 1349, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1349, 7, actTaxCode);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount =excelReader.getCellData(xlSheetName, 1350, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1350, 7, actSalesAccount);
 
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits =excelReader.getCellData(xlSheetName, 1351, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1351, 7, actUnits);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity =excelReader.getCellData(xlSheetName, 1352, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1352, 7, actQuantity);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate =excelReader.getCellData(xlSheetName, 1353, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1353, 7, actRate);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross =excelReader.getCellData(xlSheetName, 1354, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1354, 7, actGross);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthList.equals(expMonthlyList) && actDay.equals(expDayList) && actVoucherList.equals(expVouchersList) &&actOpenWindowsCount.equals(expOpenWindowsCount)
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				 excelReader.setCellData(xlfile, xlSheetName, 1335, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				 excelReader.setCellData(xlfile, xlSheetName, 1335, 8, resFail);
				return false;
			}
		}


		

		public boolean checkABCAnalysisReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ABCAnalysis));
			ABCAnalysis.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 1319, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1319, 7, actPage1List);

			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "";
			
			*/
			Thread.sleep(2000);
						
			System.out.println("*********************************checkABCAnalysisReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			//System.out.println(actPage2List);
		//	System.out.println(expPage2List);
			
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1318, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1318, 8, resFail);
				return false;
			}
		}

		
		
		
		public boolean checkInterestCalculationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", interestCalculation);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interestCalculation));
			interestCalculation.click();
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1356, 5)) ||
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1357, 5)) ||
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1358, 5)) || 
						actName.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1359, 5)))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 1360, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1360, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow2List.get(i).getText();
					reportsRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1361, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1361, 7, actRow2List);

			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow3List.get(i).getText();
					reportsRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1362, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1362, 7, actRow3List);

			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow4List.get(i).getText();
					reportsRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1363, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1363, 7, actRow4List);

			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1364, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1364, 7, actRow5List);

			
			System.out.println("*********************************checkInterestCalculationReportwithFilterOption*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
					&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1355, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1355, 8, resFail);
				return false;
			}
		}
	
		
		
		
		@FindBy (xpath="//input[@id='FOption_597_0_DefaultFilter_0']")
		private static WebElement interest_DefaultFilterTxt;
		
		@FindBy (xpath="//*[@id='FilterFields_597_0']/ul[2]/li[1]/div/label/span")
		private static WebElement interest_report_FilterAccount2NameChkbox;
		
	
		public boolean checkInterestCalculationReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
				report_FilterExpandBtn.click();
				Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterAccount2Expansion));
			report_FilterAccount2Expansion.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interest_report_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==false) 
			{
				interest_report_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interest_DefaultFilterTxt));
			interest_DefaultFilterTxt.click();
			interest_DefaultFilterTxt.sendKeys( excelReader.getCellData(xlSheetName, 1368, 5));
			
			Thread.sleep(2000);
			
			interest_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow1ListCount;i++)
			{
				if (i!=4 && i!=6) 
				{
					String data = reportsRow1List.get(i).getText();
					reportsRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 1369, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1369, 7, actRow1List);

			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1370, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1370, 7, actRow2List);

			
			

			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1371, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1371, 7, actRow3List);

			
			

			int reportsRow4ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=0;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 1372, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1372, 7, actRow4List);

			
			
			
			System.out.println("****************************checkInterestCalculationReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interest_report_FilterAccount2NameChkbox));
			
			if (report_FilterAccount2NameChkbox.isSelected()==true) 
			{
				interest_report_FilterAccount2NameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
				
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 1373, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1373, 7, actRowCount);

			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRowCount.equals(expRowCount)
					&&actRow3List.equalsIgnoreCase(expRow3List) && actRow4List.equalsIgnoreCase(expRow4List))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1367, 8, resPass);
				return true;
			} 
			else 
			{
				excelReader.setCellData(xlfile, xlSheetName, 1367, 8, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkInterestCalculationReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			int reportItemGridListCount=reportTableColumn1RowsList.size();
		   
			for (int i = 0; i < reportItemGridListCount; i++) 
		    {
	             String data=reportTableColumn1RowsList.get(i).getText();
	             
	             if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1375, 5)))
	             {
	        		 reportTableColumn1RowsList.get(i).click();
	        		 Thread.sleep(1000);
	        		 break;
	             }
			     }
		    
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
			sl_BackTrackBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsMonthsTable));
			
			int backTrackMonthlyColumnsCount = backTrackItemDetailsMonthsTableList.size();
			ArrayList<String> actMonthlyList = new ArrayList<String>();
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				actMonthlyList.add(data);
			}
			
			Calendar cal=Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMMM yyyy");
			String Row2Month = df.format(cal.getTime());
			
		/*	ArrayList<String> expMonthlyList = new ArrayList<String>();
			expMonthlyList.add("January 2020");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add("");
			expMonthlyList.add("36.00");
			expMonthlyList.add(Row2Month);
			expMonthlyList.add("November 2021");
			expMonthlyList.add("36.00");
			expMonthlyList.add("60.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("62.00");
			expMonthlyList.add("");
			expMonthlyList.add("");
			expMonthlyList.add("96.00");
			expMonthlyList.add("34.00");
			expMonthlyList.add("");*/
			String actMonthList=actMonthlyList.toString();
			String expMonthlyList= excelReader.getCellData(xlSheetName, 1375, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1375, 7, actMonthList);

			
			System.out.println(actMonthList);
			System.out.println(expMonthlyList);
			
			for(int i=0; i<backTrackMonthlyColumnsCount; i++)
			{
				String data = backTrackItemDetailsMonthsTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row2Month)) 
				{
					getAction().doubleClick(backTrackItemDetailsMonthsTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsDaysTable));
			
			int backTrackDayColumnsCount = backTrackItemDetailsDaysTableList.size();
			ArrayList<String> actDayList = new ArrayList<String>();
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				actDayList.add(data);
			}
			
			DateFormat dt = new SimpleDateFormat("d");
			String Row1Date = dt.format(cal.getTime());
			
		/*	ArrayList<String> expDayList = new ArrayList<String>();
			expDayList.add(Row1Date);

			expDayList.add("22");
			expDayList.add("36.00");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("62.00");
			expDayList.add("");
			expDayList.add("");
			expDayList.add("60.00");
			expDayList.add("34.00");
			expDayList.add("");*/
			
			String actDay=actDayList.toString();
			String expDayList= excelReader.getCellData(xlSheetName, 1376, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1376, 7, actDay);

			System.out.println(actDay);
			System.out.println(expDayList);
			
			for(int i=0; i<backTrackDayColumnsCount; i++)
			{
				String data = backTrackItemDetailsDaysTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(Row1Date)) 
				{
					getAction().doubleClick(backTrackItemDetailsDaysTableList.get(i)).build().perform();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(backTrackItemDetailsVouchersTable));
			
			int backTrackVouchersColumnsCount = backTrackItemDetailsVouchersTableList.size();
			ArrayList<String> actVouchersList = new ArrayList<String>();
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				actVouchersList.add(data);
			}
			
			/*ArrayList<String> expVouchersList = new ArrayList<String>();
			
			expVouchersList.add("NDT57:SU//TEXT2IND");
			expVouchersList.add("NDT57:SU//TEXT3IND");
			expVouchersList.add("NDT57:SU/IND/TEXT1");
			expVouchersList.add("NDT57:SU//TEXT1IND");
			expVouchersList.add("");*/
			String actVoucherList=actVouchersList.toString();
			String expVouchersList= excelReader.getCellData(xlSheetName, 1077, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1077, 7, actVoucherList);

			
			
			System.out.println(actVoucherList);
			System.out.println(expVouchersList);
			
			for(int i=0; i<backTrackVouchersColumnsCount; i++)
			{
				String data = backTrackItemDetailsVouchersTableList.get(i).getText();
				
				if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1078, 5))) 
				{
					getAction().doubleClick(backTrackItemDetailsVouchersTableList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1379, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1379, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(1));
		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo=excelReader.getCellData(xlSheetName, 1380, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1380, 7, actDocNo);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			String actVendor=vendorAccountTxt.getAttribute("value");
			String expVendor=excelReader.getCellData(xlSheetName, 1381, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1381, 7, actVendor);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
			String actCurrency = voucherHeaderCurrency.getAttribute("value");
			String expCurrency =excelReader.getCellData(xlSheetName, 1382, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1382, 7, actCurrency);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartment = departmentTxt.getAttribute("value");
			String expDepartment = excelReader.getCellData(xlSheetName, 1383, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1383, 7, actDepartment);

			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
			String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
			String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 1384, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1384, 7, actPlaceOfSupply);


			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
			String actJurisdiction = jurisdictionTxt.getAttribute("value");
			String expJurisdiction =excelReader.getCellData(xlSheetName, 1385, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1385, 7, actJurisdiction);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		 	String actWarehouse = select1stRow_1stColumn.getText();
		 	String expWarehouse =excelReader.getCellData(xlSheetName, 1386, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1386, 7, actWarehouse);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
		 	String actItem = select1stRow_2ndColumn.getText();
		 	String expItem = excelReader.getCellData(xlSheetName, 1387, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1387, 7, actItem);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
		 	String actTaxCode = select1stRow_3rdColumn.getText();
		 	String expTaxCode = excelReader.getCellData(xlSheetName, 1388, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1388, 7, actTaxCode);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
		 	String actSalesAccount = select1stRow_4thColumn.getText();
		 	String expSalesAccount = excelReader.getCellData(xlSheetName, 1389, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1389, 7, actSalesAccount);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
		 	String actUnits = select1stRow_5thColumn.getText();
		 	String expUnits =excelReader.getCellData(xlSheetName, 1390, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1390, 7, actUnits);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
		 	String actQuantity = select1stRow_9thColumn.getText();
		 	String expQuantity = excelReader.getCellData(xlSheetName, 1391, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1391, 7, actQuantity);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actLSalesOrder = select1stRow_12thColumn.getText();
		 	String expLSalesOrder = "SalOrd:1";
		 	*/
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
		 	String actRate = select1stRow_11thColumn.getText();
		 	String expRate =excelReader.getCellData(xlSheetName, 1392, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1392, 7, actRate);

		 	
		 	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actGross = select1stRow_12thColumn.getText();
		 	String expGross = excelReader.getCellData(xlSheetName, 1393, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1393, 7, actGross);

		 	
		 /*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_12thColumn));
		 	String actBatch = select1stRow_12thColumn.getText();
		 	String expBatch = "PVATR2#V1";
		 	*/
			System.out.println("**********************checkComparitiveAnalysisReportWithBackTrackOption*********************");
			 
			System.out.println("Open Tabs        : "+actOpenWindowsCount         +"  Value Expected  "+expOpenWindowsCount);
			
			System.out.println("Document No      : "+actDocNo         	+"  Value Expected  "	+expDocNo);
			System.out.println("Vendor Account 	: "+actVendor      		+"  Value Expected  "	+actVendor);
			System.out.println("Currency        : "+actCurrency			+"  Value Expected  "	+expCurrency);
			System.out.println("Department      : "+actDepartment		+"  Value Expected  "	+expDepartment);
			System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "	+expPlaceOfSupply);
			System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "	+expJurisdiction);
			
			
			System.out.println("Warehouse        : "+actWarehouse     +"  Value Expected  "+expWarehouse);
			System.out.println("Item             : "+actItem          +"  Value Expected  "+expItem);
			System.out.println("Tax Code         : "+actTaxCode       +"  Value Expected  "+expTaxCode);
			System.out.println("Sales Account    : "+actSalesAccount  +"  Value Expected  "+expSalesAccount);
			System.out.println("Units            : "+actUnits         +"  Value Expected  "+expUnits);
			System.out.println("Quantity         : "+actQuantity      +"  Value Expected  "+expQuantity);
			//System.out.println("L Sales Order    : "+actLSalesOrder   +"  Value Expected  "+expLSalesOrder);
			System.out.println("Rate             : "+actRate          +"  Value Expected  "+expRate);
			System.out.println("Gross            : "+actGross         +"  Value Expected  "+expGross);
			//System.out.println("Batch            : "+actBatch         +"  Value Expected  "+expBatch);
			
			getDriver().switchTo().window(openTabs.get(1)).close();
			
			Thread.sleep(1000);
			
			getDriver().switchTo().window(openTabs.get(0));
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackItemDetailsBackBtn));
			BackTrackItemDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackMonthDetailsBackBtn));
			BackTrackMonthDetailsBackBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BackTrackDateDetailsBackBtn));
			BackTrackDateDetailsBackBtn.click();
			
			Thread.sleep(1000);

			
			if (actMonthList.equals(expMonthlyList) && actDay.equals(expDayList) && actVoucherList.equals(expVouchersList) &&actOpenWindowsCount.equals(expOpenWindowsCount)
					&& actDocNo.equalsIgnoreCase(expDocNo) && actVendor.equalsIgnoreCase(expVendor) &&actCurrency.equalsIgnoreCase(expCurrency)
					&&actDepartment.equalsIgnoreCase(expDepartment)&&expPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply)
					&&actJurisdiction.equalsIgnoreCase(expJurisdiction)&&actWarehouse.equalsIgnoreCase(expWarehouse)
					   && actItem.equalsIgnoreCase(expItem) && actTaxCode.equalsIgnoreCase(expTaxCode) && actSalesAccount.equalsIgnoreCase(expSalesAccount)
					   && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) 
					   && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) ) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1374, 8, resPass);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1374, 8, resFail);
				return false;
			}
		}
		

		public boolean checkInterestCalculationReportwithSelectAll() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(miscellaneousAnalysisMenu));
			miscellaneousAnalysisMenu.click();
			
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", interestCalculation);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(interestCalculation));
			interestCalculation.click();
			
			Thread.sleep(2000);
			
		/*	int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 0; i < rowcount; i++) 
			{
				String actName = stockLedgerHometableItemNamesList.get(i).getText();
				
				System.out.println(actName);
				
				if(actName.equalsIgnoreCase("FIFO COGS ACC INV") || actName.equalsIgnoreCase("BR COGS ACC INV") || actName.equalsIgnoreCase("WA COGS ACC INV") || 
						actName.equalsIgnoreCase("STD RATE COGS ACC INV"))
				{
					stockLedgerHometableItemChkboxList.get(i).click();
				}
			}
			*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reportsBasedOnDropdown));
			Select s1=new Select(reportsBasedOnDropdown);
			s1.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 1366, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1366, 7, actPage1List);

			
	/*		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			if (report_PageNoBtn.getText().equalsIgnoreCase("3")) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_PreviousBtn));
				report_PreviousBtn.click();
				Thread.sleep(2000);
			}
			
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = "[13, SR COGS POSTING ACC, 1.72, 14, EXCESS COGS POSTING ACC, 1.86, 15, VAT ADVANCE PURCHASE, 0.02, 16, PURCHASE VARIANCE, 7.29, 17, VAT INPUT, 0.28, 18, Grand Total, ]";
		*/	
			
			Thread.sleep(2000);
						
			System.out.println("*********************************checkInterestCalculationReportwithSelectAll*****************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
	/*		System.out.println(actPage2List);
			System.out.println(expPage2List);
		*/	
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 1365, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1365, 8, resFail);
				return false;
			}
		}

		
		
		
		//Masters Information
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[12]")
		private static WebElement mastersInformationMenu;
		
		
		@FindBy(xpath="(//span[contains(text(),'Master Info')])[2]")
		private static WebElement masterInfo;
		
		
		@FindBy(xpath="//span[contains(text(),'Item Label')]")
		private static WebElement itemLabel;
		
		@FindBy(xpath="//span[contains(text(),'Unit conversion report')]")
		private static WebElement unitConversionReport;
		
		@FindBy(xpath="//span[contains(text(),'Skid Definition')]")
		private static WebElement skidDefinition;
		
		@FindBy(xpath="//span[contains(text(),'Carton RFID Generator')]")
		private static WebElement cartonRFIDGenerator;
		
		
		
		
		//Audit Trail
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[13]")
		private static WebElement auditTrailMenu;
		
		
		@FindBy(xpath="//span[contains(text(),'Audit Trail transactions')]")
		private static WebElement auditTrailTransactions;
		
		
		@FindBy(xpath="//span[contains(text(),'Audit Trail logins')]")
		private static WebElement auditTrailLogins;
		
		@FindBy(xpath="//span[contains(text(),'Audit trial preferences')]")
		private static WebElement auditTrailPreferences;
		
		@FindBy(xpath="//*[@id='RITTable__0']")
		private static WebElement vocherType;
		
		
		public boolean checkAuditTrailTransactionsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailMenu));
			auditTrailMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailTransactions));
			auditTrailTransactions.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocherType));

			vocherType.sendKeys(excelReader.getCellData(xlSheetName, 1395, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=2 && i!=3){
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1396, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1396, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				if(i!=2 && i!=3){
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1397, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1397, 7, actRow2List);
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				if(i!=2 && i!=3){
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1398, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1398, 7, actRow3List);

			
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				if(i!=2 && i!=3){
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1399, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1399, 7, actRow4List);

			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				if(i!=2 && i!=3){
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
				}
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1400, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1400, 7, actRow5List);

			
			
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				if(i!=2 &&  i!=3){
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
				}
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1401, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1401, 7, actRow6List);

			
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
				
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 1402, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1402, 7, actRow7List);

			
		
			System.out.println("*****************************************checkAuditTrailReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)
					&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List))
				
			{
				excelReader.setCellData(xlfile, xlSheetName, 1394, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1394, 8, resFail);
				return false;
			}
			
		}	
		
	

	
		
		@FindBy(xpath="//*[@id='FilterFields_521_0']/ul[4]/li[1]/div/label/span")
		private static WebElement auditreport_FilterItemNameChkbox;
		
		
		@FindBy(xpath="//*[@id='FOption_521_0_DefaultFilter_0']")
		private static WebElement auditreport_DefaultFilterTxt;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[10]")
		private static WebElement auditreport_FilterBtn;
		
		
		
		public boolean checkAuditTrailTransactionsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			//Thread.sleep(2000);
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterBtn));
			auditreport_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterItemExpansion));
			report_FilterItemExpansion.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==false) 
			{
				auditreport_FilterItemNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_DefaultFilterTxt));
			auditreport_DefaultFilterTxt.click();
			auditreport_DefaultFilterTxt.sendKeys( excelReader.getCellData(xlSheetName, 1404, 5));
			
			Thread.sleep(2000);
			
			auditreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =  excelReader.getCellData(xlSheetName, 1405, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1405, 7, actRow1List);


			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 1406, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1406, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1407, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1407, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkAuditTrailTransactionReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterBtn));
			auditreport_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditreport_FilterItemNameChkbox));
			
			if (report_FilterItemNameChkbox.isSelected()==true) 
			{
				auditreport_FilterItemNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName,1408, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1408, 7, actRowCount);
			
	System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount))
					
			{
				excelReader.setCellData(xlfile, xlSheetName, 1403, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1403, 8, resFail);
				return false;
			}
			
		}
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[5]")
		private static WebElement at_ReportPrintBtn;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[8]")
		private static WebElement at_BackTrackBtn;
		
		@FindBy(xpath="//*[@id='id_reportmenudisplay']/ul/li[14]")
		private static WebElement at_report_CloseBtn;
		
		
		public boolean checkAuditTrailTransactionsPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_ReportPrintBtn));
			at_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1410, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1410, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkAuditTrailTransactionPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1409, 8, resPass);
				return true;
			}
			else
			{
				 excelReader.setCellData(xlfile, xlSheetName, 1409, 8, resFail);
				return false;
			}
		}	
		
		
		public boolean checkAuditTrailTransactionsReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn1RowsList.get(i).getText();
	         String data1=reportTableColumn7RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase( excelReader.getCellData(xlSheetName, 1412, 5)) &&
	        		 data1.equalsIgnoreCase( excelReader.getCellData(xlSheetName, 1413, 5)))
	         {
	    		 reportTableColumn1RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_BackTrackBtn));
		at_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1414, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1414, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 1415, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1415, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		String actPurchaseAccount = purchaseAccountTxt.getAttribute("value");
		String expPurchaseAccount =  excelReader.getCellData(xlSheetName, 1416, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1416, 7, actPurchaseAccount);

	
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 1417, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1417, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Item = select1stRow_1stColumn.getText();
		String expR1Item =  excelReader.getCellData(xlSheetName, 1418, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1418, 7, actR1Item);

		
		String actR1Units = select1stRow_2ndColumn.getText();
		String expR1Units =  excelReader.getCellData(xlSheetName, 1419, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1419, 7, actR1Units);

		
		String actR1Quantity = select1stRow_3rdColumn.getText();
		String expR1Quantity =  excelReader.getCellData(xlSheetName, 1420, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1420, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_4thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 1421, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1421, 7, actR1Rate);

		
		String actR1Gross = select1stRow_5thColumn.getText();
		String expR1Gross = excelReader.getCellData(xlSheetName, 1422, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1422, 7, actR1Gross);

		
		
		
		
		System.out.println("**********************checkAuditTrailTransactionsReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Purchase Account : "+actPurchaseAccount			+"  Value Expected  "+expPurchaseAccount);
		//System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Item       			: "+actR1Item				+"  Value Expected  "	+expR1Item);
		System.out.println("Units           	: "+actR1Units				+"  Value Expected  "	+expR1Units);
		System.out.println("Quantity         	: "+actR1Quantity			+"  Value Expected  "	+expR1Quantity);
		System.out.println("Rate            	: "+actR1Rate				+"  Value Expected  "	+expR1Rate);
		System.out.println("Gross         		: "+actR1Gross				+"  Value Expected  "	+expR1Gross);
		
		
	
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Item.equalsIgnoreCase(expR1Item)
			   &&actR1Units.equalsIgnoreCase(expR1Units)&&actR1Quantity.equalsIgnoreCase(expR1Quantity)
			   && actR1Rate.equalsIgnoreCase(expR1Rate)
			   &&actR1Gross.equalsIgnoreCase(expR1Gross))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_report_CloseBtn));
			at_report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 1411, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(at_report_CloseBtn));
			at_report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			 excelReader.setCellData(xlfile, xlSheetName, 1411, 8, resPass);
			return false;
		}
		}

		@FindBy(xpath="//*[@id='id_mainreportmenuheadings']/ul/li[7]/a/i")
		private static WebElement atLogin_OkBtn;

		
		public boolean checkAuditTrailLoginsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailMenu));
			auditTrailMenu.click();
			
			Thread.sleep(2000);
			
			//getAction().moveToElement(auditTrailLogins).build().perform();
			
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", auditTrailLogins);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(auditTrailLogins));
			auditTrailLogins.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocherType));

			
			vocherType.sendKeys(excelReader.getCellData(xlSheetName, 1424, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(atLogin_OkBtn));
			atLogin_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1425, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1425, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1426, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1426, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1427, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1427, 7, actRow3List);

			
			
			
			
			int reportsByWarehouseRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsByWarehouseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsByWarehouseRow4ListArray.add(data);
			}
			String actRow4List = reportsByWarehouseRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1428, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1428, 7, actRow4List);

			
			
			int reportsByWarehouseRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsByWarehouseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsByWarehouseRow5ListArray.add(data);
			}
			String actRow5List = reportsByWarehouseRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 1429, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1429, 7, actRow5List);

			
		/*	
			int reportsByWarehouseRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsByWarehouseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsByWarehouseRow6ListArray.add(data);
			}
			String actRow6List = reportsByWarehouseRow6ListArray.toString();
			String expRow6List = "";
			
			
			int reportsByWarehouseRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsByWarehouseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsByWarehouseRow7ListArray.add(data);
			}
			String actRow7List = reportsByWarehouseRow7ListArray.toString();
			String expRow7List = "";
		*/	
		
			System.out.println("*****************************************checkAuditTrailLoginsReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		/*
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
		*/	
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)
					/*&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List)*/)
				
			{
				excelReader.setCellData(xlfile, xlSheetName, 1423, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1423, 8, resFail);
				return false;
			}
			
		}	
		public boolean checkAuditTrailLoginsPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1431, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1431, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkAuditTrailLoginsPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1430, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1430, 8, resFail);
				return false;
			}
		}	
		
		
		
		
		
		//Account Query
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[14]")
		private static WebElement accountQueryMenu;
		
		@FindBy(xpath="//*[@id='accountQuery']")
		private static WebElement accountQueryDropdown;
		
		@FindBy(xpath="//input[@class='FButton-Primary']")
		private static WebElement getDetailsBtn;
		
		
		@FindBy(xpath="//*[@id='openingBal']")
		private static WebElement openingBalTxt;
		
		@FindBy(xpath="//*[@id='credit']")
		private static WebElement creditTxt;
		
		@FindBy(xpath="//*[@id='debit']")
		private static WebElement debitTxt;
		
		@FindBy(xpath="//*[@id='balance']")
		private static WebElement balanceTxt;
		
		
		@FindBy(xpath="//*[@id='creditTransTable']//td[1]")
		private static WebElement aq_1stRow1stcolumn;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[1]//td")
		private static List<WebElement> aqReportsRow1List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[2]//td")
		private static List<WebElement> aqReportsRow2List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[3]//td")
		private static List<WebElement> aqReportsRow3List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[4]//td")
		private static List<WebElement> aqReportsRow4List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[5]//td")
		private static List<WebElement> aqReportsRow5List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[6]//td")
		private static List<WebElement> aqReportsRow6List;
		
		@FindBy(xpath="//*[@id='creditTransTable']//tr[7]//td")
		private static List<WebElement> aqReportsRow7List;
		
		
		@FindBy(xpath="//*[@id='debitTransTable']//td[1]")
		private static WebElement aqdebit_1stRow1stcolumn;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[1]//td")
		private static List<WebElement> aqdebitReportsRow1List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[2]//td")
		private static List<WebElement> aqdebitReportsRow2List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[3]//td")
		private static List<WebElement> aqdebitReportsRow3List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[4]//td")
		private static List<WebElement> aqdebitReportsRow4List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[5]//td")
		private static List<WebElement> aqdebitReportsRow5List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[6]//td")
		private static List<WebElement> aqdebitReportsRow6List;
		
		@FindBy(xpath="//*[@id='debitTransTable']//tr[7]//td")
		private static List<WebElement> aqdebitReportsRow7List;
		
		
		@FindBy(xpath="//*[@id='page_Content']/div/div[2]/div[7]/div[1]/span")
		private static WebElement departmentWiseBalanceExpansion;
		
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//td[1]")
		private static WebElement aqdepartment_1stRow1stcolumn;
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//tr[1]//td")
		private static List<WebElement> aqdepartmentReportsRow1List;
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//tr[2]//td")
		private static List<WebElement> aqdepartmentReportsRow2List;
		
		@FindBy(xpath="//*[@id='tagWiseTransData']//tr[3]//td")
		private static List<WebElement> aqdepartmentReportsRow3List;
		
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[2]")
		private static WebElement aq_ReportCloseBtn;;
		
		public boolean checkAccountQueryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountQueryMenu));
			accountQueryMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountQueryDropdown));
			accountQueryDropdown.sendKeys(excelReader.getCellData(xlSheetName, 1433, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(getDetailsBtn));
			getDetailsBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingBalTxt));
			//System.err.println(openingBalTxt.getText());
			String actOpeningBal=openingBalTxt.getText();
			String expOpeningBal=excelReader.getCellData(xlSheetName, 1434, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1434, 7, actOpeningBal);

			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(creditTxt));
			//System.err.println(creditTxt.getText());
			String actCredit=creditTxt.getText();
			String expCredit=excelReader.getCellData(xlSheetName, 1435, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1435, 7, actCredit);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(debitTxt));
			//System.err.println(debitTxt.getText());
			String actDebit=debitTxt.getText();
			String expDebit=excelReader.getCellData(xlSheetName, 1436, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1436, 7,actDebit);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(balanceTxt));
			//System.err.println(balanceTxt.getText());
			String actBalance=balanceTxt.getText();
			String expBalance=excelReader.getCellData(xlSheetName, 1437, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1437, 7, actBalance);

			Thread.sleep(2000);
			
			
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aq_1stRow1stcolumn));
			
			int reportsByCreditRow1ListCount = aqReportsRow1List.size();
			ArrayList<String> reportsByCreditRow1ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow1ListCount;i++)
			{
				String data = aqReportsRow1List.get(i).getText();
				
				reportsByCreditRow1ListArray.add(data);
			}
			String actRow1List = reportsByCreditRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1438, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1438, 7, actRow1List);

			
			
			int reportsByCreditRow2ListCount = aqReportsRow2List.size();
			ArrayList<String> reportsByCreditRow2ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow2ListCount;i++)
			{
				String data = aqReportsRow2List.get(i).getText();
				
				reportsByCreditRow2ListArray.add(data);
			}
			String actRow2List = reportsByCreditRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1439, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1439, 7, actRow2List);

			
			
			
			int reportsByCreditRow3ListCount = aqReportsRow3List.size();
			ArrayList<String> reportsByCreditRow3ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow3ListCount;i++)
			{
				String data = aqReportsRow3List.get(i).getText();
				
				reportsByCreditRow3ListArray.add(data);
			}
			String actRow3List = reportsByCreditRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 1440, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1440, 7, actRow3List);

			
			int reportsByCreditRow4ListCount = aqReportsRow4List.size();
			ArrayList<String> reportsByCreditRow4ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow4ListCount;i++)
			{
				String data = aqReportsRow4List.get(i).getText();
				
				reportsByCreditRow4ListArray.add(data);
			}
			String actRow4List = reportsByCreditRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName, 1441, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1441, 7, actRow4List);

			
			
			int reportsByCreditRow5ListCount = aqReportsRow5List.size();
			ArrayList<String> reportsByCreditRow5ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow5ListCount;i++)
			{
				String data = aqReportsRow5List.get(i).getText();
				
				reportsByCreditRow5ListArray.add(data);
			}
			String actRow5List = reportsByCreditRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1442, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1442, 7, actRow5List);

			
			
			
			int reportsByCreditRow6ListCount = aqReportsRow6List.size();
			ArrayList<String> reportsByCreditRow6ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow6ListCount;i++)
			{
				String data = aqReportsRow6List.get(i).getText();
				
				reportsByCreditRow6ListArray.add(data);
			}
			String actRow6List = reportsByCreditRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1443, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1443, 7, actRow6List);

			
			
			
			int reportsByCreditRow7ListCount = aqReportsRow7List.size();
			ArrayList<String> reportsByCreditRow7ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByCreditRow7ListCount;i++)
			{
				String data = aqReportsRow7List.get(i).getText();
				
				reportsByCreditRow7ListArray.add(data);
			}
			String actRow7List = reportsByCreditRow7ListArray.toString();
			String expRow7List =excelReader.getCellData(xlSheetName, 1444, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1444, 7, actRow7List);


		
			System.out.println("*****************************************checkAccountQueryReport***************************************");
			
			System.out.println("Opening Balance			:"+	actOpeningBal		+		"	Expected"		+	expOpeningBal);
			System.out.println("Credit					:"+	actCredit			+		"	Expected"		+	expCredit);
			
			System.out.println("Debit					:"+	actDebit			+		"	Expected"		+	expDebit);
			System.out.println("Balance					:"+	actBalance			+		"	Expected"		+	expBalance);
			
			
			System.out.println("*****************************************LastCreditTransactions***************************************");

			
						
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
		
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aqdebit_1stRow1stcolumn));
			
			int reportsByDebitRow1ListCount = aqdebitReportsRow1List.size();
			ArrayList<String> reportsByDebitRow1ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow1ListCount;i++)
			{
				String data = aqdebitReportsRow1List.get(i).getText();
				
				reportsByDebitRow1ListArray.add(data);
			}
			String actDebitRow1List = reportsByDebitRow1ListArray.toString();
			String expDebitRow1List =excelReader.getCellData(xlSheetName, 1445, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1445, 7, actDebitRow1List);

			
			
			int reportsByDebitRow2ListCount = aqdebitReportsRow2List.size();
			ArrayList<String> reportsByDebitRow2ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow2ListCount;i++)
			{
				String data = aqdebitReportsRow2List.get(i).getText();
				
				reportsByDebitRow2ListArray.add(data);
			}
			String actDebitRow2List = reportsByDebitRow2ListArray.toString();
			String expDebitRow2List = excelReader.getCellData(xlSheetName, 1446, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1446, 7, actDebitRow2List);

			
			
			
			int reportsByDebitRow3ListCount = aqdebitReportsRow3List.size();
			ArrayList<String> reportsByDebitRow3ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow3ListCount;i++)
			{
				String data = aqdebitReportsRow3List.get(i).getText();
				
				reportsByDebitRow3ListArray.add(data);
			}
			String actDebitRow3List = reportsByDebitRow3ListArray.toString();
			String expDebitRow3List = excelReader.getCellData(xlSheetName, 1447, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1447, 7, actDebitRow3List);

			
			int reportsByDebitRow4ListCount = aqdebitReportsRow4List.size();
			ArrayList<String> reportsByDebitRow4ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow4ListCount;i++)
			{
				String data = aqdebitReportsRow4List.get(i).getText();
				
				reportsByDebitRow4ListArray.add(data);
			}
			String actDebitRow4List = reportsByDebitRow4ListArray.toString();
			String expDebitRow4List =excelReader.getCellData(xlSheetName, 1448, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1448, 7, actDebitRow4List);

			
			
			int reportsByDebitRow5ListCount = aqdebitReportsRow5List.size();
			ArrayList<String> reportsByDebitRow5ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow5ListCount;i++)
			{
				String data = aqdebitReportsRow5List.get(i).getText();
				
				reportsByDebitRow5ListArray.add(data);
			}
			String actDebitRow5List = reportsByDebitRow5ListArray.toString();
			String expDebitRow5List =excelReader.getCellData(xlSheetName, 1449, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1449, 7, actDebitRow5List);

			
			
			
			int reportsByDebitRow6ListCount = aqdebitReportsRow6List.size();
			ArrayList<String> reportsByDebitRow6ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow6ListCount;i++)
			{
				String data = aqdebitReportsRow6List.get(i).getText();
				
				reportsByDebitRow6ListArray.add(data);
			}
			String actDebitRow6List = reportsByDebitRow6ListArray.toString();
			String expDebitRow6List =excelReader.getCellData(xlSheetName, 1450, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1450, 7, actDebitRow6List);

			
			
			
			int reportsByDebitRow7ListCount = aqdebitReportsRow7List.size();
			ArrayList<String> reportsByDebitRow7ListArray = new ArrayList<String>();
			
			for(int i=1;i<reportsByDebitRow7ListCount;i++)
			{
				String data = aqdebitReportsRow7List.get(i).getText();
				
				reportsByDebitRow7ListArray.add(data);
			}
			String actDebitRow7List = reportsByDebitRow7ListArray.toString();
			String expDebitRow7List =excelReader.getCellData(xlSheetName, 1451, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1451, 7, actDebitRow7List);


		
		
			System.out.println("*****************************************LastDebitTransactions***************************************");

						
			
			System.out.println(actDebitRow1List);
			System.out.println(expDebitRow1List);
			
			System.out.println(actDebitRow2List);
			System.out.println(expDebitRow2List);
			
			System.out.println(actDebitRow3List);
			System.out.println(expDebitRow3List);
			
		
			System.out.println(actDebitRow4List);
			System.out.println(expDebitRow4List);
			
			System.out.println(actDebitRow5List);
			System.out.println(expDebitRow5List);
		
			System.out.println(actDebitRow6List);
			System.out.println(expDebitRow6List);
			
			
			System.out.println(actDebitRow7List);
			System.out.println(expDebitRow7List);
		
			Thread.sleep(2000);
			
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentWiseBalanceExpansion));
		
		departmentWiseBalanceExpansion.click();
		Thread.sleep(2000);
		
		((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", aqdepartment_1stRow1stcolumn);	

		Thread.sleep(2000);
		
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aqdepartment_1stRow1stcolumn));
		
		int reportsByDepartmentRow1ListCount = aqdepartmentReportsRow1List.size();
		ArrayList<String> reportsByDepartmentRow1ListArray = new ArrayList<String>();
		
		for(int i=1;i<reportsByDepartmentRow1ListCount;i++)
		{
			String data = aqdepartmentReportsRow1List.get(i).getText();
			
			reportsByDepartmentRow1ListArray.add(data);
		}
		String actDepartmentRow1List = reportsByDepartmentRow1ListArray.toString();
		String expDepartmentRow1List = excelReader.getCellData(xlSheetName, 1452, 6);
        
      excelReader.setCellData(xlfile, xlSheetName, 1452, 7, actDepartmentRow1List);

		
		
		int reportsByDepartmentRow2ListCount = aqdepartmentReportsRow2List.size();
		ArrayList<String> reportsByDepartmentRow2ListArray = new ArrayList<String>();
		
		for(int i=1;i<reportsByDepartmentRow2ListCount;i++)
		{
			String data = aqdepartmentReportsRow2List.get(i).getText();
			
			reportsByDepartmentRow2ListArray.add(data);
		}
		String actDepartmentRow2List = reportsByDepartmentRow2ListArray.toString();
		String expDepartmentRow2List =excelReader.getCellData(xlSheetName, 1453, 6);
        
      excelReader.setCellData(xlfile, xlSheetName, 1453, 7, actDepartmentRow2List);

		
		
		
		int reportsByDepartmentRow3ListCount = aqdepartmentReportsRow3List.size();
		ArrayList<String> reportsByDepartmentRow3ListArray = new ArrayList<String>();
		
		for(int i=1;i<reportsByDepartmentRow3ListCount;i++)
		{
			String data = aqdepartmentReportsRow3List.get(i).getText();
			
			reportsByDepartmentRow3ListArray.add(data);
		}
		String actDepartmentRow3List = reportsByDepartmentRow3ListArray.toString();
		String expDepartmentRow3List =excelReader.getCellData(xlSheetName, 1454, 6);
        
      excelReader.setCellData(xlfile, xlSheetName, 1454, 7, actDepartmentRow3List);

		
		
		System.out.println("*****************************************DepartmentWiseBalance***************************************");

		
		
		System.out.println(actDepartmentRow1List);
		System.out.println(expDepartmentRow1List);
		
		System.out.println(actDepartmentRow2List);
		System.out.println(expDepartmentRow2List);
		
		System.out.println(actDepartmentRow3List);
		System.out.println(expDepartmentRow3List);
		
		
		if(	actOpeningBal.equalsIgnoreCase(expOpeningBal)&&actCredit.equalsIgnoreCase(expCredit)
				&&actDebit.equalsIgnoreCase(expDebit)&&actBalance.equalsIgnoreCase(expBalance)
				&&actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)
					&&actRow4List.equalsIgnoreCase(expRow4List)&&
					actRow5List.equalsIgnoreCase(expRow5List)
					&&actRow6List.equalsIgnoreCase(expRow6List)&&actRow7List.equalsIgnoreCase(expRow7List)
					&&actDebitRow1List.equalsIgnoreCase(expDebitRow1List)&&
					actDebitRow2List.equalsIgnoreCase(expDebitRow2List)&&actDebitRow3List.equalsIgnoreCase(expDebitRow3List)
					&&actDebitRow4List.equalsIgnoreCase(expDebitRow4List)&&
					actDebitRow5List.equalsIgnoreCase(expDebitRow5List)
					&&actDebitRow6List.equalsIgnoreCase(expDebitRow6List)&&actDebitRow7List.equalsIgnoreCase(expDebitRow7List)
					&&actDepartmentRow1List.equalsIgnoreCase(expDepartmentRow1List)&&
					actDepartmentRow2List.equalsIgnoreCase(expDepartmentRow2List)
					&&actDepartmentRow3List.equalsIgnoreCase(expDepartmentRow3List)
				)
				
				
			{
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aq_ReportCloseBtn));
				aq_ReportCloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1432, 8, resPass);
			return true;
			}
			else
			{
				
								
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(aq_ReportCloseBtn));
				aq_ReportCloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 1432, 8, resFail);
				return false;
			}
					
		}
		
		
		//Transaction Authorization Report
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[15]")
		private static WebElement transactionAuthorizationReportMenu;
		
		
		
		public boolean checkTransactionAuthorizationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			Thread.sleep(2000);
			((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", transactionAuthorizationReportMenu);	

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionAuthorizationReportMenu));
			transactionAuthorizationReportMenu.click();
			
			Thread.sleep(2000);
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vocherType));

			vocherType.sendKeys(excelReader.getCellData(xlSheetName, 1456, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=2&&i!=4&&i!=5){
								
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1457,6 );
            
          excelReader.setCellData(xlfile, xlSheetName, 1457, 7, actRow1List);

			
			

		
			System.out.println("*****************************************checkTransactionAuthorizationReport***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List))
				
			{
				excelReader.setCellData(xlfile, xlSheetName, 1455, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1455, 8, resFail);
				return false;
			}
			
		}	
		
		public boolean checkTransactionAuthorizationReportPrintOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ReportPrintBtn));
			sl_ReportPrintBtn.click();
			
			getWaitForAlert();
			Thread.sleep(1000);
			getAlert().accept();
			
			
			Thread.sleep(3000);
			
			ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
			
			String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
			String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1459, 6);
			excelReader.setCellData(xlfile, xlSheetName, 1459, 7, actOpenWindowsCount);

		 	getDriver().switchTo().window(openTabs.get(0));
		 	
		 	Thread.sleep(1000);
		 	
		 	getDriver().switchTo().window(openTabs.get(1)).close();
		 	
		 	getDriver().switchTo().window(openTabs.get(0));
			
			System.out.println("***************************checkTransactionsAuthorizationReportPrintOption*********************************");
			
			System.out.println("openTabs"+openTabs);
			System.out.println("Open Tabs Count : "+actOpenWindowsCount+"  Value Expected  "+expOpenWindowsCount);
			
			Thread.sleep(1000);
			
			if(actOpenWindowsCount.equals(expOpenWindowsCount))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1458, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1458, 8, resFail);
				return false;
			}
		}	
		
		
		public boolean checkTransactionAuthorizationReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn1RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn1RowsList.get(i).getText();
	         //String data1=reportTableColumn7RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 1461, 5)) )
	         {
	    		 reportTableColumn1RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 1462, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1462, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 1463, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1463, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseAccountTxt));
		String actPurchaseAccount = purchaseAccountTxt.getAttribute("value");
		String expPurchaseAccount = excelReader.getCellData(xlSheetName, 1464, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1464, 7, actPurchaseAccount);

	
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "USD";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 1465, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1465, 7, actDepartment);

		
	
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Item = select1stRow_1stColumn.getText();
		String expR1Item = excelReader.getCellData(xlSheetName, 1466, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1466, 7, actR1Item);

		
		String actR1Units = select1stRow_2ndColumn.getText();
		String expR1Units = excelReader.getCellData(xlSheetName, 1467, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1467, 7, actR1Units);

		
		String actR1Quantity = select1stRow_3rdColumn.getText();
		String expR1Quantity = excelReader.getCellData(xlSheetName, 1468, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1468, 7, actR1Quantity);

		
		String actR1Rate = select1stRow_4thColumn.getText();
		String expR1Rate = excelReader.getCellData(xlSheetName, 1469, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1469, 7, actR1Rate);

		
		String actR1Gross = select1stRow_5thColumn.getText();
		String expR1Gross = excelReader.getCellData(xlSheetName, 1470, 6);
		excelReader.setCellData(xlfile, xlSheetName, 1470, 7, actR1Gross);

		
		
		
		
		System.out.println("**********************checkTransactionAuthorizationReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Purchase Account : "+actPurchaseAccount			+"  Value Expected  "+expPurchaseAccount);
		//System.out.println("Currency        : "+actCurrency			+"  Value Expected  "+expCurrency);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		//System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		//System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("Item       			: "+actR1Item				+"  Value Expected  "	+expR1Item);
		System.out.println("Units           	: "+actR1Units				+"  Value Expected  "	+expR1Units);
		System.out.println("Quantity         	: "+actR1Quantity			+"  Value Expected  "	+expR1Quantity);
		System.out.println("Rate            	: "+actR1Rate				+"  Value Expected  "	+expR1Rate);
		System.out.println("Gross         		: "+actR1Gross				+"  Value Expected  "	+expR1Gross);
		
		
	
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) &&  actPurchaseAccount.equalsIgnoreCase(expPurchaseAccount)
			   && actDepartment.equalsIgnoreCase(expDepartment) && actR1Item.equalsIgnoreCase(expR1Item)
			   &&actR1Units.equalsIgnoreCase(expR1Units)&&actR1Quantity.equalsIgnoreCase(expR1Quantity)
			   && actR1Rate.equalsIgnoreCase(expR1Rate)
			   &&actR1Gross.equalsIgnoreCase(expR1Gross))
			   {
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1460, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			/*getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();*/
			excelReader.setCellData(xlfile, xlSheetName, 1460, 8, resFail);
			return false;
		}
		}
		
		
		//Bank Reconciliation
		@FindBy(xpath="//*[@id='OptCtrlBank']")
		private static WebElement bankOption;
		
		
		@FindBy(xpath="//select[@id='sortOrder']")
		private static WebElement bc_SortorderDropdown;
		
		
		
		@FindBy(xpath="//select[@id='selectStatus']")
		private static WebElement bc_StatusDropdown;
		
		
		@FindBy(xpath="//select[@id='DatePeriod']")
		private static WebElement bc_DateDropdown;
		
		
		@FindBy(xpath="//*[@id='ClearanceDate']")
		private static WebElement clearanceDate;
		
		@FindBy(xpath="//select[@id='SelectDebit']")
		private static WebElement bc_debitDropdown;
		
		@FindBy(xpath="//*[@id='btnSaveDisableImmediate']")
		private static WebElement bc_SaveBtn;
		
		@FindBy(xpath="//*[@id='selectContainer']/div[5]/div[2]/div/input[3]")
		private static WebElement bc_LoadBtn;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//td[2]")
		private static WebElement bc_1stRow1stCol;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//td[4]")
		private static List<WebElement> bc_reports4thColRowsList;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[9]//td[1]")
		private static WebElement bc_9thRow1stCol;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[1]//td")
		private static List<WebElement> bc_1stRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[2]//td")
		private static List<WebElement> bc_2ndRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[3]//td")
		private static List<WebElement> bc_3rdRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[4]//td")
		private static List<WebElement> bc_4thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[5]//td")
		private static List<WebElement> bc_5thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[6]//td")
		private static List<WebElement> bc_6thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[7]//td")
		private static List<WebElement> bc_7thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[8]//td")
		private static List<WebElement> bc_8thRowList;
		
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[9]//td")
		private static List<WebElement> bc_9thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[10]//td")
		private static List<WebElement> bc_10thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[11]//td")
		private static List<WebElement> bc_11thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[12]//td")
		private static List<WebElement> bc_12thRowList;
		
		@FindBy(xpath="//*[@id='tdata']/table/tbody//tr[13]//td")
		private static List<WebElement> bc_13thRowList;
		
		
		@FindBy(xpath="//*[@id='bookBal']")
		private static WebElement bookBalance;
		
		
		@FindBy(xpath="//*[@id='outDebits']")
		private static WebElement outDebits;
		
		
		@FindBy(xpath="//*[@id='outCredits']")
		private static WebElement outCredits;
		
		
		@FindBy(xpath="//*[@id='clearedBal']")
		private static WebElement clearedBalance;
		
		
		@FindBy(xpath="//*[@id='OpeningBalance']")
		private static WebElement openingBalance;
		
		
		@FindBy(xpath="//*[@id='debitCounts']")
		private static WebElement debitCounts;
		
		
		@FindBy(xpath="//*[@id='creditCounts']")
		private static WebElement creditCounts;
		
		
		@FindBy(xpath="//*[@id='bankBal']")
		private static WebElement bankBalance;
		
		
		@FindBy(xpath="//*[@id='diff']")
		private static WebElement difference;
		
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[5]")
		private static WebElement bc_CloseBtn;
		
		
		public boolean checkBankReconciliationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			LogoutandLoginwithSU();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliation));
			bankReconciliation.click();
			Thread.sleep(2000);
						
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankOption));
			bankOption.sendKeys(excelReader.getCellData(xlSheetName, 269, 5));
			bankOption.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SortorderDropdown));
			bc_SortorderDropdown.click();
			Select s=new Select(bc_SortorderDropdown);
			s.selectByValue("1");
			bc_SortorderDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_StatusDropdown));
			bc_StatusDropdown.click();
					
			Select s1=new Select(bc_StatusDropdown);
			//s1.selectByValue("2");
			bc_StatusDropdown.sendKeys("ALL");

			Thread.sleep(1000);
			bc_StatusDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clearanceDate));
			clearanceDate.sendKeys(Keys.TAB);;
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_DateDropdown));
			bc_DateDropdown.click();
			Select s2=new Select(bc_DateDropdown);
			//s2.selectByValue("1");
			bc_DateDropdown.sendKeys("As on date");
			bc_DateDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getAction().moveToElement(bc_debitDropdown).build().perform();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_debitDropdown));
			bc_debitDropdown.click();
			
			Select s3=new Select(bc_debitDropdown);
			//s3.selectByValue("2");
			bc_debitDropdown.sendKeys("Both");
			bc_debitDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
		//	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SaveBtn));
		//	bc_SaveBtn.click();
		//	Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_LoadBtn));
			bc_LoadBtn.click();
		
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("window.scrollBy(0,1000)");
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_1stRow1stCol));
			
			int reportsBybankConcilationRow1ListCount = bc_1stRowList.size();
			ArrayList<String> reportsBybankConcilationRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow1ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_1stRowList.get(i).getText();
				reportsBybankConcilationRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsBybankConcilationRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 270, 6);
            excelReader.setCellData(xlfile, xlSheetName, 270, 7, actRow1List);

			
			
			
			
			
			int reportsBybankConcilationRow2ListCount = bc_2ndRowList.size();
			ArrayList<String> reportsBybankConcilationRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow2ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_2ndRowList.get(i).getText();
				reportsBybankConcilationRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsBybankConcilationRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 271, 6);
            excelReader.setCellData(xlfile, xlSheetName, 271,7, actRow2List);


			
			
			int reportsBybankConcilationRow3ListCount = bc_3rdRowList.size();
			ArrayList<String> reportsBybankConcilationRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow3ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_3rdRowList.get(i).getText();
				reportsBybankConcilationRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsBybankConcilationRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 272, 6);
            excelReader.setCellData(xlfile, xlSheetName,272, 7, actRow3List);


			
			
			
			
			
			int reportsBybankConcilationRow4ListCount = bc_4thRowList.size();
			ArrayList<String> reportsBybankConcilationRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow4ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_4thRowList.get(i).getText();
				reportsBybankConcilationRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsBybankConcilationRow4ListArray.toString();
			String expRow4List =excelReader.getCellData(xlSheetName,273, 6);
            excelReader.setCellData(xlfile, xlSheetName, 273, 7, actRow4List);


			
			
			int reportsBybankConcilationRow5ListCount = bc_5thRowList.size();
			ArrayList<String> reportsBybankConcilationRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow5ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_5thRowList.get(i).getText();
				reportsBybankConcilationRow5ListArray.add(data);
				}
			}
			String actRow5List = reportsBybankConcilationRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 274, 6);
            excelReader.setCellData(xlfile, xlSheetName, 274, 7, actRow5List);


			
			
			
			
			
			int reportsBybankConcilationRow6ListCount = bc_6thRowList.size();
			ArrayList<String> reportsBybankConcilationRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow6ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_6thRowList.get(i).getText();
				reportsBybankConcilationRow6ListArray.add(data);
				}
			}
			String actRow6List = reportsBybankConcilationRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 275, 6);
            excelReader.setCellData(xlfile, xlSheetName, 275, 7, actRow6List);


			
			
			int reportsBybankConcilationRow7ListCount = bc_7thRowList.size();
			ArrayList<String> reportsBybankConcilationRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow7ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_7thRowList.get(i).getText();
				reportsBybankConcilationRow7ListArray.add(data);
				}
			}
			String actRow7List = reportsBybankConcilationRow7ListArray.toString();
			String expRow7List = excelReader.getCellData(xlSheetName, 276, 6);
            excelReader.setCellData(xlfile, xlSheetName, 276, 7, actRow7List);


			
			
			
			
			
			int reportsBybankConcilationRow8ListCount = bc_8thRowList.size();
			ArrayList<String> reportsBybankConcilationRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow8ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_8thRowList.get(i).getText();
				reportsBybankConcilationRow8ListArray.add(data);
				}
			}
			String actRow8List = reportsBybankConcilationRow8ListArray.toString();
			String expRow8List =excelReader.getCellData(xlSheetName, 277, 6);
            excelReader.setCellData(xlfile, xlSheetName, 277, 7, actRow8List);

	JavascriptExecutor js=(JavascriptExecutor)getDriver();
	js.executeScript("arguments[0].scrollIntoView(true);", bc_9thRow1stCol);
	Thread.sleep(2000);
			
			//((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", bc_9thRowList);
			getAction().moveToElement(bc_9thRow1stCol).build().perform();
			Thread.sleep(2000);
			
			

			int reportsBybankConcilationRow9ListCount = bc_9thRowList.size();
			ArrayList<String> reportsBybankConcilationRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow9ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_9thRowList.get(i).getText();
				reportsBybankConcilationRow9ListArray.add(data);
				}
			}
			String actRow9List = reportsBybankConcilationRow9ListArray.toString();
			String expRow9List = excelReader.getCellData(xlSheetName, 278, 6);
            excelReader.setCellData(xlfile, xlSheetName, 278,7,actRow9List);


			
			
			int reportsBybankConcilationRow10ListCount = bc_10thRowList.size();
			ArrayList<String> reportsBybankConcilationRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow10ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_10thRowList.get(i).getText();
				reportsBybankConcilationRow10ListArray.add(data);
				}
			}
			String actRow10List = reportsBybankConcilationRow10ListArray.toString();
			String expRow10List = excelReader.getCellData(xlSheetName, 279, 6);
            excelReader.setCellData(xlfile, xlSheetName, 279, 7, actRow10List);


			
			
			
			
			
			int reportsBybankConcilationRow11ListCount = bc_11thRowList.size();
			ArrayList<String> reportsBybankConcilationRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow11ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_11thRowList.get(i).getText();
				reportsBybankConcilationRow11ListArray.add(data);
				}
			}
			String actRow11List = reportsBybankConcilationRow11ListArray.toString();
			String expRow11List = excelReader.getCellData(xlSheetName, 280, 6);
            excelReader.setCellData(xlfile, xlSheetName, 280, 7, actRow11List);


			
			String actBookBal=bookBalance.getText();
			String expBookBal=excelReader.getCellData(xlSheetName, 281, 6);
            excelReader.setCellData(xlfile, xlSheetName, 281, 7, actBookBal);


			
			String actOutDebits=outDebits.getText();
			String expOutDebits=excelReader.getCellData(xlSheetName, 282, 6);
            excelReader.setCellData(xlfile, xlSheetName, 282, 7, actOutDebits);

			
			String actOutCredits=outCredits.getText();
			String expOutCredits=excelReader.getCellData(xlSheetName, 283, 6);
            excelReader.setCellData(xlfile, xlSheetName, 283, 7, actOutCredits);

			
			String actClearedBal=clearedBalance.getText();
			String expClearedBal=excelReader.getCellData(xlSheetName, 284, 6);
            excelReader.setCellData(xlfile, xlSheetName, 284, 7, actClearedBal);

			
			String actOpeningBal=openingBalance.getText();
			String expOpeningBal=excelReader.getCellData(xlSheetName, 285, 6);
            excelReader.setCellData(xlfile, xlSheetName, 285, 7, actOpeningBal);

			
			
			
			String actDebitsCount=debitCounts.getText();
			String expDebitsCount=excelReader.getCellData(xlSheetName, 286, 6);
            excelReader.setCellData(xlfile, xlSheetName, 286, 7, actDebitsCount);

			
			String actCreditsCount=creditCounts.getText();
			String expCreditsCount=excelReader.getCellData(xlSheetName, 287, 6);
            excelReader.setCellData(xlfile, xlSheetName, 287, 7, actCreditsCount);

					
			
			
			String actBankBal=bankBalance.getAttribute("value");
			String expBankBal=excelReader.getCellData(xlSheetName, 288,6);
            excelReader.setCellData(xlfile, xlSheetName, 288, 7, actBankBal);

			
			String actDiff=difference.getText();
			String expDiff=excelReader.getCellData(xlSheetName, 289, 6);
            excelReader.setCellData(xlfile, xlSheetName, 289, 7, actDiff);

			
		
			System.out.println("*****************************************checkBankConcalitationReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println("********************************************************************************");
			System.out.println("Book Balance		:"	+	actBookBal 		+		"Value Expected"	+	expBookBal );
			System.out.println("OutCredits			:"	+	actOutCredits 	+		"Value Expected"	+	expOutCredits );
			System.out.println("OutDebits			:"	+	actOutDebits 	+		"Value Expected"	+	expOutDebits );
			System.out.println("Cleared Balance		:"	+	actClearedBal 	+		"Value Expected"	+	expClearedBal );
			System.out.println("Opening Balance		:"	+	actOpeningBal 	+		"Value Expected"	+	expOpeningBal );
			System.out.println("DebitsCount			:"	+	actDebitsCount 	+		"Value Expected"	+	expDebitsCount );
			System.out.println("CreditsCount		:"	+	actCreditsCount +		"Value Expected"	+	expCreditsCount );
			System.out.println("Bank Balance		:"	+	actBankBal 		+		"Value Expected"	+	expBankBal );
			System.out.println("Difference			:"	+	actDiff 		+		"Value Expected"	+	expDiff );


			
		if(actRow1List.equalsIgnoreCase(expRow1List)&&actRow2List.equalsIgnoreCase(expRow2List)
				&&actRow3List.equalsIgnoreCase(expRow3List)&&actRow4List.equalsIgnoreCase(expRow4List)
				&&actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
				&&actRow7List.equalsIgnoreCase(expRow7List)&&actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List)&&actRow10List.equalsIgnoreCase(expRow10List)
				&&actRow11List.equalsIgnoreCase(expRow11List)
				&&actBookBal.equalsIgnoreCase(expBookBal)&&actOutCredits.equalsIgnoreCase(expOutCredits)
				&&actOutDebits.equalsIgnoreCase(expOutDebits)&&actClearedBal.equalsIgnoreCase(expClearedBal)
				&&actOpeningBal.equalsIgnoreCase(expOpeningBal)&&actDebitsCount.equalsIgnoreCase(expDebitsCount)
				&&actCreditsCount.equalsIgnoreCase(expCreditsCount)&&actBankBal.equalsIgnoreCase(expBankBal)
				&&actDiff.equalsIgnoreCase(expDiff))

			
			{
				//bc_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 268, 8, resPass);
				return true;
			}
			else
			{
				//bc_CloseBtn.click();
				excelReader.setCellData(xlfile, xlSheetName, 268, 8, resFail);
				return false;
			}
			
		}

		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[5]/ul/li[9]")
		private static WebElement customerReconciliation;
		
		public boolean checkCustomerVendorReconciliationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerReconciliation));
			customerReconciliation.click();
			Thread.sleep(2000);
						
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankOption));
			bankOption.sendKeys(excelReader.getCellData(xlSheetName, 291, 5));
			bankOption.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SortorderDropdown));
			bc_SortorderDropdown.click();
			Select s=new Select(bc_SortorderDropdown);
			s.selectByValue("1");
			bc_SortorderDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_StatusDropdown));
			bc_StatusDropdown.click();
					
			Select s1=new Select(bc_StatusDropdown);
			//s1.selectByValue("2");
			bc_StatusDropdown.sendKeys("ALL");

			Thread.sleep(1000);
			bc_StatusDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(clearanceDate));
			clearanceDate.sendKeys(Keys.TAB);;
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_DateDropdown));
			bc_DateDropdown.click();
			Select s2=new Select(bc_DateDropdown);
			//s2.selectByValue("1");
			bc_DateDropdown.sendKeys("As on date");
			bc_DateDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
			getAction().moveToElement(bc_debitDropdown).build().perform();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_debitDropdown));
			bc_debitDropdown.click();
			
			Select s3=new Select(bc_debitDropdown);
			//s3.selectByValue("2");
			bc_debitDropdown.sendKeys("Both");
			bc_debitDropdown.sendKeys(Keys.TAB);
			Thread.sleep(2000);
			
		//	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_SaveBtn));
		//	bc_SaveBtn.click();
		//	Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_LoadBtn));
			bc_LoadBtn.click();
		
			Thread.sleep(2000);
			
			((JavascriptExecutor)getDriver()).executeScript("window.scrollBy(0,1000)");
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bc_1stRow1stCol));
			
			int reportsBybankConcilationRow1ListCount = bc_1stRowList.size();
			ArrayList<String> reportsBybankConcilationRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow1ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_1stRowList.get(i).getText();
				reportsBybankConcilationRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsBybankConcilationRow1ListArray.toString();
			String expRow1List = excelReader.getCellData(xlSheetName, 292,6);
            excelReader.setCellData(xlfile, xlSheetName, 292,7,actRow1List);

			
			
			
			
			
			int reportsBybankConcilationRow2ListCount = bc_2ndRowList.size();
			ArrayList<String> reportsBybankConcilationRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow2ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_2ndRowList.get(i).getText();
				reportsBybankConcilationRow2ListArray.add(data);
				}
			}
			String actRow2List = reportsBybankConcilationRow2ListArray.toString();
			String expRow2List = excelReader.getCellData(xlSheetName, 293,6);
            excelReader.setCellData(xlfile, xlSheetName, 293,7,actRow2List);

			
			
			int reportsBybankConcilationRow3ListCount = bc_3rdRowList.size();
			ArrayList<String> reportsBybankConcilationRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow3ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_3rdRowList.get(i).getText();
				reportsBybankConcilationRow3ListArray.add(data);
				}
			}
			String actRow3List = reportsBybankConcilationRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 294,6);
            excelReader.setCellData(xlfile, xlSheetName, 294,7,actRow3List);

			
			
			
			
			
			int reportsBybankConcilationRow4ListCount = bc_4thRowList.size();
			ArrayList<String> reportsBybankConcilationRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow4ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_4thRowList.get(i).getText();
				reportsBybankConcilationRow4ListArray.add(data);
				}
			}
			String actRow4List = reportsBybankConcilationRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 295,6);
            excelReader.setCellData(xlfile, xlSheetName, 295,7,actRow4List);

			
			
			int reportsBybankConcilationRow5ListCount = bc_5thRowList.size();
			ArrayList<String> reportsBybankConcilationRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow5ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_5thRowList.get(i).getText();
				reportsBybankConcilationRow5ListArray.add(data);
				}
			}
			String actRow5List = reportsBybankConcilationRow5ListArray.toString();
			String expRow5List = excelReader.getCellData(xlSheetName, 296,6);
            excelReader.setCellData(xlfile, xlSheetName, 296,7,actRow5List);

			
			
			
			
			
			int reportsBybankConcilationRow6ListCount = bc_6thRowList.size();
			ArrayList<String> reportsBybankConcilationRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow6ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_6thRowList.get(i).getText();
				reportsBybankConcilationRow6ListArray.add(data);
				}
			}
			String actRow6List = reportsBybankConcilationRow6ListArray.toString();
			String expRow6List = excelReader.getCellData(xlSheetName, 297,6);
            excelReader.setCellData(xlfile, xlSheetName, 297,7,actRow6List);

			
			
			int reportsBybankConcilationRow7ListCount = bc_7thRowList.size();
			ArrayList<String> reportsBybankConcilationRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow7ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_7thRowList.get(i).getText();
				reportsBybankConcilationRow7ListArray.add(data);
				}
			}
			String actRow7List = reportsBybankConcilationRow7ListArray.toString();
			String expRow7List =  excelReader.getCellData(xlSheetName, 298,6);
            excelReader.setCellData(xlfile, xlSheetName, 298,7,actRow7List);

			
			
			
			
			
			int reportsBybankConcilationRow8ListCount = bc_8thRowList.size();
			ArrayList<String> reportsBybankConcilationRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow8ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_8thRowList.get(i).getText();
				reportsBybankConcilationRow8ListArray.add(data);
				}
			}
			String actRow8List = reportsBybankConcilationRow8ListArray.toString();
			String expRow8List = excelReader.getCellData(xlSheetName, 299,6);
            excelReader.setCellData(xlfile, xlSheetName, 299,7,actRow8List);

        	JavascriptExecutor js=(JavascriptExecutor)getDriver();
        	js.executeScript("arguments[0].scrollIntoView(true);", bc_9thRow1stCol);
        	Thread.sleep(2000);
			
			//((JavascriptExecutor)getDriver()).executeScript("arguments[0].scrollIntoView(true);", bc_9thRowList);
			getAction().moveToElement(bc_9thRow1stCol).build().perform();
			Thread.sleep(4000);
			
			

			int reportsBybankConcilationRow9ListCount = bc_9thRowList.size();
			ArrayList<String> reportsBybankConcilationRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow9ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_9thRowList.get(i).getText();
				reportsBybankConcilationRow9ListArray.add(data);
				}
			}
			String actRow9List = reportsBybankConcilationRow9ListArray.toString();
			String expRow9List =  excelReader.getCellData(xlSheetName, 300,6);
            excelReader.setCellData(xlfile, xlSheetName, 300,7,actRow9List);

			
			
			int reportsBybankConcilationRow10ListCount = bc_10thRowList.size();
			ArrayList<String> reportsBybankConcilationRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow10ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_10thRowList.get(i).getText();
				reportsBybankConcilationRow10ListArray.add(data);
				}
			}
			String actRow10List = reportsBybankConcilationRow10ListArray.toString();
			String expRow10List = excelReader.getCellData(xlSheetName, 301,6);
            excelReader.setCellData(xlfile, xlSheetName, 301,7,actRow10List);

			
			
			
			
			
			int reportsBybankConcilationRow11ListCount = bc_11thRowList.size();
			ArrayList<String> reportsBybankConcilationRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow11ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_11thRowList.get(i).getText();
				reportsBybankConcilationRow11ListArray.add(data);
				}
			}
			String actRow11List = reportsBybankConcilationRow11ListArray.toString();
			String expRow11List =  excelReader.getCellData(xlSheetName, 302,6);
            excelReader.setCellData(xlfile, xlSheetName, 302,7,actRow11List);

			
			
			int reportsBybankConcilationRow12ListCount = bc_12thRowList.size();
			ArrayList<String> reportsBybankConcilationRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow12ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_12thRowList.get(i).getText();
				reportsBybankConcilationRow12ListArray.add(data);
				}
				
			}
			String actRow12List = reportsBybankConcilationRow12ListArray.toString();
			String expRow12List = excelReader.getCellData(xlSheetName, 303,6);
            excelReader.setCellData(xlfile, xlSheetName, 303,7,actRow12List);

			
			
			
			
			
			int reportsBybankConcilationRow13ListCount = bc_13thRowList.size();
			ArrayList<String> reportsBybankConcilationRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsBybankConcilationRow13ListCount;i++)
			{
				if(i!=2 && i!=4)
				{
				String data = bc_13thRowList.get(i).getText();
				reportsBybankConcilationRow13ListArray.add(data);
				}
			}
			String actRow13List = reportsBybankConcilationRow13ListArray.toString();
			String expRow13List =  excelReader.getCellData(xlSheetName, 304,6);
            excelReader.setCellData(xlfile, xlSheetName, 304,7,actRow13List);

			
			
			
			
			String actBookBal=bookBalance.getText();
			String expBookBal= excelReader.getCellData(xlSheetName, 305,6);
            excelReader.setCellData(xlfile, xlSheetName, 305,7,actBookBal);

			
			String actOutDebits=outDebits.getText();
			String expOutDebits= excelReader.getCellData(xlSheetName, 306,6);
            excelReader.setCellData(xlfile, xlSheetName, 306,7,actOutDebits);

			
			String actOutCredits=outCredits.getText();
			String expOutCredits= excelReader.getCellData(xlSheetName, 307,6);
            excelReader.setCellData(xlfile, xlSheetName, 307,7,actOutCredits);

			
			String actClearedBal=clearedBalance.getText();
			String expClearedBal= excelReader.getCellData(xlSheetName, 308,6);
            excelReader.setCellData(xlfile, xlSheetName, 308,7,actClearedBal);

			
			String actOpeningBal=openingBalance.getText();
			String expOpeningBal= excelReader.getCellData(xlSheetName, 309,6);
            excelReader.setCellData(xlfile, xlSheetName, 309,7,actOpeningBal);

			
			
			
			String actDebitsCount=debitCounts.getText();
			String expDebitsCount= excelReader.getCellData(xlSheetName, 310,6);
            excelReader.setCellData(xlfile, xlSheetName, 310,7,actDebitsCount);

			
			String actCreditsCount=creditCounts.getText();
			String expCreditsCount= excelReader.getCellData(xlSheetName, 311,6);
            excelReader.setCellData(xlfile, xlSheetName, 311,7,actCreditsCount);

					
			
			
			String actBankBal=bankBalance.getAttribute("value");
			String expBankBal= excelReader.getCellData(xlSheetName, 312,6);
            excelReader.setCellData(xlfile, xlSheetName, 312,7,actBankBal);

			
			String actDiff=difference.getText();
			String expDiff= excelReader.getCellData(xlSheetName, 313,6);
            excelReader.setCellData(xlfile, xlSheetName, 313,7,actDiff);

			
		
			System.out.println("*****************************************checkCustomer/VendorConcalitationReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
		
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			
			
			System.out.println("********************************************************************************");
			System.out.println("Book Balance		:"	+	actBookBal 		+		"Value Expected"	+	expBookBal );
			System.out.println("OutCredits		:"	+	actOutCredits 	+		"Value Expected"	+	expOutCredits );
			System.out.println("OutDebits		:"	+	actOutDebits 	+		"Value Expected"	+	expOutDebits );
			System.out.println("Cleared Balance		:"	+	actClearedBal 	+		"Value Expected"	+	expClearedBal );
			System.out.println("Opening Balance		:"	+	actOpeningBal 	+		"Value Expected"	+	expOpeningBal );
			System.out.println("DebitsCount		:"	+	actDebitsCount 	+		"Value Expected"	+	expDebitsCount );
			System.out.println("CreditsCount		:"	+	actCreditsCount +		"Value Expected"	+	expCreditsCount );
			System.out.println("Bank Balance		:"	+	actBankBal 		+		"Value Expected"	+	expBankBal );
			System.out.println("Difference		:"	+	actDiff 		+		"Value Expected"	+	expDiff );

			
			
		if(actRow1List.equalsIgnoreCase(expRow1List)&&actRow2List.equalsIgnoreCase(expRow2List)
				&&actRow3List.equalsIgnoreCase(expRow3List)&&actRow4List.equalsIgnoreCase(expRow4List)
				&&actRow5List.equalsIgnoreCase(expRow5List)&&actRow6List.equalsIgnoreCase(expRow6List)
				&&actRow7List.equalsIgnoreCase(expRow7List)&&actRow8List.equalsIgnoreCase(expRow8List)
				&&actRow9List.equalsIgnoreCase(expRow9List)&&actRow10List.equalsIgnoreCase(expRow10List)
				&&actRow11List.equalsIgnoreCase(expRow11List)&&actRow12List.equalsIgnoreCase(expRow12List)
				&&actRow13List.equalsIgnoreCase(expRow13List)
				&&actBookBal.equalsIgnoreCase(expBookBal)&&actOutCredits.equalsIgnoreCase(expOutCredits)
				&&actOutDebits.equalsIgnoreCase(expOutDebits)&&actClearedBal.equalsIgnoreCase(expClearedBal)
				&&actOpeningBal.equalsIgnoreCase(expOpeningBal)&&actDebitsCount.equalsIgnoreCase(expDebitsCount)
				&&actCreditsCount.equalsIgnoreCase(expCreditsCount)&&actBankBal.equalsIgnoreCase(expBankBal)
				&&actDiff.equalsIgnoreCase(expDiff))

			
			{
			 excelReader.setCellData(xlfile, xlSheetName, 290, 8, resPass);
			
			
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 290, 8, resFail);
				
				return false;
			}
			
		}
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[3]")
		private static WebElement bc_BackTrackBtn;
		
		@FindBy(xpath="//*[@id='BRTable_body']//tr[2]")
		private static WebElement bc_2ndrow;
		
		public void checkCustomerReconcilitionReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			
			excelReader=new ExcelReader(POJOUtility.getExcelPath());		
		/*	int reportItemGridListCount=bc_reports4thColRowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=bc_reports4thColRowsList.get(i).getText();
	         //String data1=reportTableColumn7RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 315, 5)) )
	         {
	        	 bc_reports4thColRowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }*/
	    bc_2ndrow.click();
	   
	    Thread.sleep(2000);
	    ((JavascriptExecutor)getDriver()).executeScript("window.scrollBy(1249,-353)");
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable( bc_BackTrackBtn));
		 bc_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 316, 6);
		excelReader.setCellData(xlfile, xlSheetName, 316, 7, actOpenWindowsCount);
	 	
		getDriver().switchTo().window(openTabs.get(1));
		}
		
		
		
		
		
	
		public boolean checkBankReconcilationStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			LogoutandLoginwithSU();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationStatement));
			bankReconciliationStatement.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 318, 5));
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=13 && i!=25 &&i!=37 && i!=49 &&i!=61 &&i!=73 && i!=85 &&i!=97 &&i!=109 &&i!=121 
						&&i!=133 &i!=145)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List =excelReader.getCellData(xlSheetName, 319, 6);
            excelReader.setCellData(xlfile, xlSheetName, 319, 7, actPage1List);

			
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
		
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List =excelReader.getCellData(xlSheetName, 320, 6);
            excelReader.setCellData(xlfile, xlSheetName, 320, 7, actPage2List);*/

			
			
			
			System.out.println("************************************************checkBankReconciliationStatement*********************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);
			*/
			if(actPage1List.equalsIgnoreCase(expPage1List)/*&&actPage2List.equalsIgnoreCase(expPage2List)*/)
			{
				excelReader.setCellData(xlfile, xlSheetName, 317, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 317, 8, resFail);
				return false;
			}
			
		}
		
		
		@FindBy(xpath="(//*[@id='FilterFields_537_0']/ul[5]/li[1]/div/label/span)[1]")
		private static WebElement bankreport_FilterWarehouseNameChkbox;
		
		@FindBy(xpath="//*[@id='FOption_537_0_DefaultFilter_0']")
		private static WebElement bankreport_DefaultFilterTxt;
		
		
		public boolean checkBankReconcilationStatementReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			Thread.sleep(2000);
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterWarehouseExpandBtn));
			report_FilterWarehouseExpandBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==false) 
			{
				bankreport_FilterWarehouseNameChkbox.click();
			}
			
			
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankreport_DefaultFilterTxt));
			bankreport_DefaultFilterTxt.click();
			bankreport_DefaultFilterTxt.sendKeys(excelReader.getCellData(xlSheetName, 322, 5));
			
			Thread.sleep(2000);
			
			bankreport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 323, 6);
            excelReader.setCellData(xlfile, xlSheetName, 323, 7, actRow1List);

			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 324, 6);
            excelReader.setCellData(xlfile, xlSheetName, 324, 7, actRow2List);

			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List =excelReader.getCellData(xlSheetName, 325, 6);
            excelReader.setCellData(xlfile, xlSheetName, 325, 7, actRow3List);

			
			

			
			
			
			
			
			
			System.out.println("*****************************************checkBankReconciliationStatementReportwithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			

			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankreport_FilterWarehouseNameChkbox));
			
			if (report_FilterWarehouseNameChkbox.isSelected()==true) 
			{
				bankreport_FilterWarehouseNameChkbox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshConditionBtn));
			report_Filter_RefreshConditionBtn.click();

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			//int actRowCount = reportsRowsCount.size();
			//int expRowCount = 12; 
			
			String actRowCount=String.valueOf(reportsRowsCount.size());
			String expRowCount = excelReader.getCellData(xlSheetName, 326, 6);
			excelReader.setCellData(xlfile, xlSheetName, 326, 7, actRowCount);

			
			System.out.println("Reports Row Count : "+actRowCount+"  Value Expected  "+expRowCount);
			
			if(actRow1List.equalsIgnoreCase(expRow1List)&&
					actRow2List.equalsIgnoreCase(expRow2List)&&actRow3List.equalsIgnoreCase(expRow3List)&&

					actRowCount.equals(expRowCount)
					)
			{
				excelReader.setCellData(xlfile, xlSheetName, 321, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 321, 8, resFail);
				return false;
			}
			
		}
		
		public boolean checkBankReconciliationStatementReportBackTrackOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
					
			int reportItemGridListCount=reportTableColumn2RowsList.size();
	    for (int i = 0; i < reportItemGridListCount; i++) 
	    {
	         String data=reportTableColumn2RowsList.get(i).getText();
	         //String data1=reportTableColumn2RowsList.get(i).getText();
	         
	         System.err.println(data);
	         
	         if (data.equalsIgnoreCase(excelReader.getCellData(xlSheetName, 328, 5)) /*&& data1.equalsIgnoreCase("28.00")*/)
	         {
	    		 reportTableColumn2RowsList.get(i).click();
	    		 Thread.sleep(1000);
	    		 break;
	         }
		     }
	    
	    Thread.sleep(2000);
		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_BackTrackBtn));
		sl_BackTrackBtn.click();
		
		Thread.sleep(2000);
			
		
		
		ArrayList<String> openTabs = new ArrayList<String>(getDriver().getWindowHandles());
		
		String actOpenWindowsCount=String.valueOf(getDriver().getWindowHandles().size());
		String expOpenWindowsCount = excelReader.getCellData(xlSheetName, 329, 6);
		excelReader.setCellData(xlfile, xlSheetName, 329, 7, actOpenWindowsCount);

	 	getDriver().switchTo().window(openTabs.get(1));
	 
	 	getWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		String actDocNo = documentNumberTxt.getAttribute("value");
		String expDocNo = excelReader.getCellData(xlSheetName, 330, 6);
		excelReader.setCellData(xlfile, xlSheetName, 330, 7, actDocNo);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
		String actAccount = vendorAccountTxt.getAttribute("value");
		String expAccount = excelReader.getCellData(xlSheetName, 331, 6);
		excelReader.setCellData(xlfile, xlSheetName, 331, 7, actAccount);

		
		/*getWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherHeaderCurrency));
		String actCurrency = voucherHeaderCurrency.getAttribute("value");
		String expCurrency = "INR";
		*/
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
		String actDepartment = departmentTxt.getAttribute("value");
		String expDepartment = excelReader.getCellData(xlSheetName, 332, 6);
		excelReader.setCellData(xlfile, xlSheetName, 332, 7, actDepartment);

		
		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(placeOFSupplyTxt));
		String actPlaceOfSupply = placeOFSupplyTxt.getAttribute("value");
		String expPlaceOfSupply =excelReader.getCellData(xlSheetName, 333, 6);
		excelReader.setCellData(xlfile, xlSheetName,333, 7, actPlaceOfSupply);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(jurisdictionTxt));
		String actJurisdiction = jurisdictionTxt.getAttribute("value");
		String expJurisdiction =excelReader.getCellData(xlSheetName, 334, 6);
		excelReader.setCellData(xlfile, xlSheetName, 334, 7, actJurisdiction);


		getWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
		String actR1Account = select1stRow_1stColumn.getText();
		String expR1Account =excelReader.getCellData(xlSheetName, 335, 6);
		excelReader.setCellData(xlfile, xlSheetName, 335, 7, actR1Account);

		
			
		String actR1TaxCode = select1stRow_2ndColumn.getText();
		String expR1TaxCode = excelReader.getCellData(xlSheetName, 336, 6);
		excelReader.setCellData(xlfile, xlSheetName, 336, 7, actR1TaxCode);

		
		String actR1Amount = select1stRow_3rdColumn.getText();
		String expR1Amount = excelReader.getCellData(xlSheetName, 337, 6);
		excelReader.setCellData(xlfile, xlSheetName, 337, 7, actR1Amount);

		
		String actR1Reference = select1stRow_4thColumn.getText();
		String expR1Reference =excelReader.getCellData(xlSheetName, 338, 6);
		excelReader.setCellData(xlfile, xlSheetName, 338, 7, actR1Reference);

		
		String actR1VAT = select1stRow_7thColumn.getText();
		String expR1VAT =excelReader.getCellData(xlSheetName, 339, 6);
		excelReader.setCellData(xlfile, xlSheetName, 339, 7, actR1VAT);

		
				

	 	
		System.out.println("**********************checkBankReconciliationStatementReportBackTrackOption*********************");
		 
		System.out.println("Open Tabs       : "+actOpenWindowsCount +"  Value Expected  "+expOpenWindowsCount);
		
		System.out.println("Document No     : "+actDocNo			+"  Value Expected  "+expDocNo);
		System.out.println("Account          : "+actAccount			+"  Value Expected  "+actAccount);
		System.out.println("Department      : "+actDepartment		+"  Value Expected  "+expDepartment);
		System.out.println("PlaceOfSupply   : "+actPlaceOfSupply	+"  Value Expected  "+expPlaceOfSupply);
		System.out.println("Jurisdiction    : "+actJurisdiction		+"  Value Expected  "+expJurisdiction);
		
		System.out.println("*******************************ROW1**********************************");
		
		System.out.println("AccountName     : "+actAccount			+"  Value Expected  "+expR1Account);
		System.out.println("TaxCode         : "+actR1TaxCode			+"  Value Expected  "+expR1TaxCode);
		System.out.println("Amount 			: "+actR1Amount			+"  Value Expected  "+expR1Amount);
		System.out.println("Reference       : "+actR1Reference				+"  Value Expected  "+expR1Reference);
		System.out.println("VAT		        : "+actR1VAT			+"  Value Expected  "+expR1VAT);
		
		
			
		
		getDriver().switchTo().window(openTabs.get(1)).close();
		
		Thread.sleep(1000);
		
		getDriver().switchTo().window(openTabs.get(0));
		
		Thread.sleep(1000);
		
		
		
		
		if ( actOpenWindowsCount.equals(expOpenWindowsCount)
			  && actDocNo.equalsIgnoreCase(expDocNo) && actAccount.equalsIgnoreCase(actAccount)  
			   && actDepartment.equalsIgnoreCase(expDepartment) && actPlaceOfSupply.equalsIgnoreCase(expPlaceOfSupply) 
			   && actJurisdiction.equalsIgnoreCase(expJurisdiction) 
			   
			   && actR1Account.equalsIgnoreCase(expR1Account) 
			  && actR1TaxCode.equalsIgnoreCase(expR1TaxCode) && actR1Amount.equalsIgnoreCase(expR1Amount) 
			   && actR1Reference.equalsIgnoreCase(expR1Reference) && actR1VAT.equalsIgnoreCase(expR1VAT) ) 
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 327, 8, resPass);
			return true;
		}
		else
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
			sl_CloseBtn.click();
			excelReader.setCellData(xlfile, xlSheetName, 327, 8, resFail);
			return false;
		}
	}

		@FindBy(xpath="//*[@id='dvReportInputs']/div[8]/label/span")
		private static WebElement includeOpeningBalOption;
		
		
		public boolean checkBankReconcilationStatementReportwithIncludeOptionsCheckbox() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bankReconciliationStatement));
			bankReconciliationStatement.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			Thread.sleep(2000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(accountName));

			accountName.sendKeys(excelReader.getCellData(xlSheetName, 341, 5));
			Thread.sleep(2000);
			
			accountName.sendKeys(Keys.TAB);
			
			getAction().moveToElement(includesSalesReturnVocherOption).build().perform();
			Thread.sleep(1000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includesSalesReturnVocherOption));

			includesSalesReturnVocherOption.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(PDCConsolidatedAmount));

			PDCConsolidatedAmount.click();
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includeOpeningBalOption));

			includeOpeningBalOption.click();
			Thread.sleep(2000);

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			int reportPage1Count = reportTableCells.size();
			ArrayList<String> reportPage1ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage1Count;i++)
			{
				if(i!=13 && i!=25 &&i!=37 && i!=49 &&i!=61 &&i!=73 && i!=85 &&i!=97 &&i!=109 &&i!=121 
						&&i!=133 &i!=145)
				{
				String data = reportTableCells.get(i).getText();
				reportPage1ListArray.add(data);
				}
			}
			String actPage1List = reportPage1ListArray.toString();
			String expPage1List = excelReader.getCellData(xlSheetName, 342, 5);
            excelReader.setCellData(xlfile, xlSheetName, 342, 7, actPage1List);
;
			
			
		/*	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
		
			int reportPage2Count = reportTableCells.size();
			ArrayList<String> reportPage2ListArray = new ArrayList<String>();
			for(int i=0;i<reportPage2Count;i++)
			{
				String data = reportTableCells.get(i).getText();
				reportPage2ListArray.add(data);
			}
			String actPage2List = reportPage2ListArray.toString();
			String expPage2List = excelReader.getCellData(xlSheetName, 343, 5);
            excelReader.setCellData(xlfile, xlSheetName, 343, 7, actPage2List)*/;
;
			
			
			
			System.out.println("************************************************checkBankReconciliationStatementWithIncludeOptions*********************************************");
			
			System.out.println(actPage1List);
			System.out.println(expPage1List);
			
			/*System.out.println(actPage2List);
			System.out.println(expPage2List);
			*/
			if(actPage1List.equalsIgnoreCase(expPage1List))/*&&actPage2List.equalsIgnoreCase(expPage2List))*/
			{
				excelReader.setCellData(xlfile, xlSheetName, 340, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 340, 8, resFail);
				return false;
			}
			
		}
		
		
		@FindBy(xpath="//select[@id='ddlVATHomeRepOutPut']")
		private static WebElement outputDropdown;
		
		@FindBy(xpath="//select[@id='ddlVATHomeRepDateOpt']")
		private static WebElement Vat_DateDropdown;
		
		
		@FindBy(xpath="//*[@id='navbarSupportedContent2']/ul/li[2]")
		private static WebElement VATSummary_OKBtn;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//th")
		private static List<WebElement> VatSummary_SalesHeader;
		
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[1]//td")
		private static List<WebElement> VatSummary_SalesRow1List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[2]//td")
		private static List<WebElement> VatSummary_SalesRow2List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[3]//td")
		private static List<WebElement> VatSummary_SalesRow3List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[4]//td")
		private static List<WebElement> VatSummary_SalesRow4List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[5]//td")
		private static List<WebElement> VatSummary_SalesRow5List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[6]//td")
		private static List<WebElement> VatSummary_SalesRow6List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[7]//td")
		private static List<WebElement> VatSummary_SalesRow7List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[8]//td")
		private static List<WebElement> VatSummary_SalesRow8List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[9]//td")
		private static List<WebElement> VatSummary_SalesRow9List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[10]//td")
		private static List<WebElement> VatSummary_SalesRow10List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[11]//td")
		private static List<WebElement> VatSummary_SalesRow11List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[12]//td")
		private static List<WebElement> VatSummary_SalesRow12List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[1]/div/div//tr[13]//td")
		private static List<WebElement> VatSummary_SalesRow13List;
		
		
		
		
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr//th")
		private static List<WebElement> VatSummary_PurchaseHeader;
		
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[1]//td")
		private static List<WebElement> VatSummary_PurchaseRow1List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[2]//td")
		private static List<WebElement> VatSummary_PurchaseRow2List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[3]//td")
		private static List<WebElement> VatSummary_PurchaseRow3List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[4]//td")
		private static List<WebElement> VatSummary_PurchaseRow4List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[5]//td")
		private static List<WebElement> VatSummary_PurchaseRow5List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[6]//td")
		private static List<WebElement> VatSummary_PurchaseRow6List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[7]//td")
		private static List<WebElement> VatSummary_PurchaseRow7List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[8]//td")
		private static List<WebElement> VatSummary_PurchaseRow8List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[9]//td")
		private static List<WebElement> VatSummary_PurchaseRow9List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[10]//td")
		private static List<WebElement> VatSummary_PurchaseRow10List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[11]//td")
		private static List<WebElement> VatSummary_PurchaseRow11List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[12]//td")
		private static List<WebElement> VatSummary_PurchaseRow12List;
		
		@FindBy(xpath="//*[@id='Summarydata']/div/div[2]/div/div//tr[13]//td")
		private static List<WebElement> VatSummary_PurchaseRow13List;
		
		
		@FindBy(xpath="//*[@id='txt_totalPurchase']")
		private static WebElement totalPurchase;
		
		@FindBy(xpath="//*[@id='txt_totalVATPurchase']")
		private static WebElement totalVATPurchase;
		
		@FindBy(xpath="//*[@id='txt_totalSales']")
		private static WebElement totalSales;
		
		@FindBy(xpath="//*[@id='txt_totalVATSales']")
		private static WebElement totalVATSales;
		
		@FindBy(xpath="//*[@id='txt_totalVATdue']")
		private static WebElement totalVATDue;
		
		@FindBy(xpath="//*[@id='txt_Correction']")
		private static WebElement totalCorrection;
		
		@FindBy(xpath="//*[@id='txt_VATCredit']")
		private static WebElement totalVATCredit;
		
		@FindBy(xpath="//*[@id='txt_NetVATdue']")
		private static WebElement totalNetVATDue;
		
		
		public boolean checkVATSummaryReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			 excelReader=new ExcelReader(POJOUtility.getExcelPath());
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vatMenu));
			vatMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSummaryreport));
			VATSummaryreport.click();
			
			Thread.sleep(3000);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Vat_DateDropdown));
			Vat_DateDropdown.click();
			Select s=new Select(Vat_DateDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(outputDropdown));
			outputDropdown.click();
			Select s1=new Select(outputDropdown);
			s1.selectByValue("0");
			
			Thread.sleep(2000);
		
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VATSummary_OKBtn));
			VATSummary_OKBtn.click();
		
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(VatSummary_SalesHeader));
			
			int reportSalesHeaderCount = VatSummary_SalesHeader.size();
			ArrayList<String> reportSalesHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportSalesHeaderCount;i++)
			{
				String data = VatSummary_SalesHeader.get(i).getText();
				reportSalesHeaderListArray.add(data);
			}
			String actSalesheaderList = reportSalesHeaderListArray.toString();
			String expSalesheaderList = excelReader.getCellData(xlSheetName, 1472, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1472, 7, actSalesheaderList);

			
			int reportsRow1ListCount = VatSummary_SalesRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				Thread.sleep(2000);
				
				String data = VatSummary_SalesRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List =excelReader.getCellData(xlSheetName, 1473, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1473, 7, actRow1List);

			
			
			int reportsRow2ListCount = VatSummary_SalesRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				
				String data = VatSummary_SalesRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List =excelReader.getCellData(xlSheetName, 1474, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1474, 7, actRow2List);

			
			
			int reportsRow3ListCount = VatSummary_SalesRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				
				String data = VatSummary_SalesRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = excelReader.getCellData(xlSheetName, 1475, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1475, 7, actRow3List);

			
			
			int reportsRow4ListCount = VatSummary_SalesRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				
				String data = VatSummary_SalesRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = excelReader.getCellData(xlSheetName, 1476, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1476, 7, actRow4List);

			
			
			int reportsRow5ListCount = VatSummary_SalesRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
			
				
				String data = VatSummary_SalesRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List =excelReader.getCellData(xlSheetName, 1477, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1477, 7, actRow5List);

			
			
			int reportsRow6ListCount = VatSummary_SalesRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				
				String data = VatSummary_SalesRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List =excelReader.getCellData(xlSheetName, 1478, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1478, 7, actRow6List);

			
			
			int reportsRow7ListCount = VatSummary_SalesRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = excelReader.getCellData(xlSheetName, 1479, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1479, 7, actRow7List);

			
			
			int reportsRow8ListCount = VatSummary_SalesRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow8ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List =excelReader.getCellData(xlSheetName, 1480, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1480, 7, actRow8List);

			
			
			int reportsRow9ListCount = VatSummary_SalesRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow9ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = excelReader.getCellData(xlSheetName, 1481, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1481, 7, actRow9List);

			
			int reportsRow10ListCount = VatSummary_SalesRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow10ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = excelReader.getCellData(xlSheetName, 1482, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1482, 7, actRow10List);

			
			
			int reportsRow11ListCount = VatSummary_SalesRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow11ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = excelReader.getCellData(xlSheetName, 1483, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1483, 7, actRow11List);

			
			
			int reportsRow12ListCount = VatSummary_SalesRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow12ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = excelReader.getCellData(xlSheetName, 1484, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1484, 7, actRow12List);

			
			
			int reportsRow13ListCount = VatSummary_SalesRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow13ListCount;i++)
			{
				
				
				String data = VatSummary_SalesRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List =excelReader.getCellData(xlSheetName, 1485, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1485, 7, actRow13List);

			
			int reportPurchaseHeaderCount = VatSummary_PurchaseHeader.size();
			ArrayList<String> reportPurchaseHeaderListArray = new ArrayList<String>();
			for(int i=0;i<reportPurchaseHeaderCount;i++)
			{
				String data = VatSummary_PurchaseHeader.get(i).getText();
				reportPurchaseHeaderListArray.add(data);
			}
			String actPurchaseheaderList = reportPurchaseHeaderListArray.toString();
			String expPurchaseheaderList =excelReader.getCellData(xlSheetName, 1486, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1486, 7, actPurchaseheaderList);

			
			int reportsPurchaseRow1ListCount = VatSummary_PurchaseRow1List.size();
			ArrayList<String> reportsPurchaseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow1ListCount;i++)
			{
			
				
				String data = VatSummary_PurchaseRow1List.get(i).getText();
				reportsPurchaseRow1ListArray.add(data);
			}
			String actPurchaseRow1List = reportsPurchaseRow1ListArray.toString();
			String expPurchaseRow1List = excelReader.getCellData(xlSheetName, 1487, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1487, 7, actPurchaseRow1List);

			
			
			int reportsPurchaseRow2ListCount = VatSummary_PurchaseRow2List.size();
			ArrayList<String> reportsPurchaseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow2ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow2List.get(i).getText();
				reportsPurchaseRow2ListArray.add(data);
			}
			String actPurchaseRow2List = reportsPurchaseRow2ListArray.toString();
			String expPurchaseRow2List = excelReader.getCellData(xlSheetName, 1488, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1488, 7, actPurchaseRow2List);

			
			
			int reportsPurchaseRow3ListCount = VatSummary_PurchaseRow3List.size();
			ArrayList<String> reportsPurchaseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow3ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow3List.get(i).getText();
				reportsPurchaseRow3ListArray.add(data);
			}
			String actPurchaseRow3List = reportsPurchaseRow3ListArray.toString();
			String expPurchaseRow3List =excelReader.getCellData(xlSheetName, 1489, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1489, 7, actPurchaseRow3List);

			
			
			int reportsPurchaseRow4ListCount = VatSummary_PurchaseRow4List.size();
			ArrayList<String> reportsPurchaseRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow4ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow4List.get(i).getText();
				reportsPurchaseRow4ListArray.add(data);
			}
			String actPurchaseRow4List = reportsPurchaseRow4ListArray.toString();
			String expPurchaseRow4List = excelReader.getCellData(xlSheetName, 1490, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1490, 7, actPurchaseRow4List);

			
			
			int reportsPurchaseRow5ListCount = VatSummary_PurchaseRow5List.size();
			ArrayList<String> reportsPurchaseRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow5ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow5List.get(i).getText();
				reportsPurchaseRow5ListArray.add(data);
			}
			String actPurchaseRow5List = reportsPurchaseRow5ListArray.toString();
			String expPurchaseRow5List = excelReader.getCellData(xlSheetName, 1491, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1491, 7, actPurchaseRow5List);

			
			
			int reportsPurchaseRow6ListCount = VatSummary_PurchaseRow6List.size();
			ArrayList<String> reportsPurchaseRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow6ListCount;i++)
			{
				
				String data = VatSummary_PurchaseRow6List.get(i).getText();
				reportsPurchaseRow6ListArray.add(data);
			}
			String actPurchaseRow6List = reportsPurchaseRow6ListArray.toString();
			String expPurchaseRow6List =excelReader.getCellData(xlSheetName, 1492, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1492, 7, actPurchaseRow6List);

			
			
			int reportsPurchaseRow7ListCount = VatSummary_PurchaseRow7List.size();
			ArrayList<String> reportsPurchaseRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow7ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow7List.get(i).getText();
				reportsPurchaseRow7ListArray.add(data);
			}
			String actPurchaseRow7List = reportsPurchaseRow7ListArray.toString();
			String expPurchaseRow7List =excelReader.getCellData(xlSheetName, 1493, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1493, 7, actPurchaseRow7List);

			
			
			int reportsPurchaseRow8ListCount = VatSummary_PurchaseRow8List.size();
			ArrayList<String> reportsPurchaseRow8ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow8ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow8List.get(i).getText();
				reportsPurchaseRow8ListArray.add(data);
			}
			String actPurchaseRow8List = reportsPurchaseRow8ListArray.toString();
			String expPurchaseRow8List =excelReader.getCellData(xlSheetName, 1494, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1494, 7, actPurchaseRow8List);

			
			
			int reportsPurchaseRow9ListCount = VatSummary_PurchaseRow9List.size();
			ArrayList<String> reportsPurchaseRow9ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow9ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow9List.get(i).getText();
				reportsPurchaseRow9ListArray.add(data);
			}
			String actPurchaseRow9List = reportsPurchaseRow9ListArray.toString();
			String expPurchaseRow9List =excelReader.getCellData(xlSheetName, 1495, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1495, 7, actPurchaseRow9List);

			
			int reportsPurchaseRow10ListCount = VatSummary_PurchaseRow10List.size();
			ArrayList<String> reportsPurchaseRow10ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow10ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow10List.get(i).getText();
				reportsPurchaseRow10ListArray.add(data);
			}
			String actPurchaseRow10List = reportsPurchaseRow10ListArray.toString();
			String expPurchaseRow10List =excelReader.getCellData(xlSheetName, 1496, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1496, 7, actPurchaseRow10List);

			
			
			int reportsPurchaseRow11ListCount = VatSummary_PurchaseRow11List.size();
			ArrayList<String> reportsPurchaseRow11ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow11ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow11List.get(i).getText();
				reportsPurchaseRow11ListArray.add(data);
			}
			String actPurchaseRow11List = reportsPurchaseRow11ListArray.toString();
			String expPurchaseRow11List =excelReader.getCellData(xlSheetName, 1497, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1497, 7, actPurchaseRow11List);

			
			
			int reportsPurchaseRow12ListCount = VatSummary_PurchaseRow12List.size();
			ArrayList<String> reportsPurchaseRow12ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow12ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow12List.get(i).getText();
				reportsPurchaseRow12ListArray.add(data);
			}
			String actPurchaseRow12List = reportsPurchaseRow12ListArray.toString();
			String expPurchaseRow12List =excelReader.getCellData(xlSheetName, 1498, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1498, 7, actPurchaseRow12List);

			
			
			int reportsPurchaseRow13ListCount = VatSummary_PurchaseRow13List.size();
			ArrayList<String> reportsPurchaseRow13ListArray = new ArrayList<String>();
			for(int i=1;i<reportsPurchaseRow13ListCount;i++)
			{
				
				
				String data = VatSummary_PurchaseRow13List.get(i).getText();
				reportsPurchaseRow13ListArray.add(data);
			}
			String actPurchaseRow13List = reportsPurchaseRow13ListArray.toString();
			String expPurchaseRow13List =excelReader.getCellData(xlSheetName, 1499, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1499, 7, actPurchaseRow13List);

			
			String actTotalPurchase=totalPurchase.getAttribute("value");
			String expTotalPurchase=excelReader.getCellData(xlSheetName, 1500, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1500, 7, actTotalPurchase);

			
			String actTotalVATPurchase=totalVATPurchase.getAttribute("value");
			String expTotalVATPurchase=excelReader.getCellData(xlSheetName, 1501, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1501, 7, actTotalVATPurchase);

			
			String actTotalSales=totalSales.getAttribute("value");
			String expTotalSales=excelReader.getCellData(xlSheetName, 1502, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1502, 7, actTotalSales);

			
			String actTotalVATSales=totalVATSales.getAttribute("value");
			String expTotalVATSales=excelReader.getCellData(xlSheetName, 1503, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1503, 7, actTotalVATSales);

			
			String actTotalVATDue=totalVATDue.getAttribute("value");
			String expTotalVATDue=excelReader.getCellData(xlSheetName, 1504, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1504, 7, actTotalVATDue);

			
			String actCorrection=totalCorrection.getAttribute("value");
			String expCorrection=excelReader.getCellData(xlSheetName, 1505, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1505, 7, actCorrection);

			
			String actTotalVATCredit=totalVATCredit.getAttribute("value");
			String expTotalVATCredit=excelReader.getCellData(xlSheetName, 1506, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1506, 7, actTotalVATCredit);

			
			String actTotalNetVATDue=totalNetVATDue.getAttribute("value");
			String expTotalNetVATDue=excelReader.getCellData(xlSheetName, 1507, 6);
            
          excelReader.setCellData(xlfile, xlSheetName, 1507, 7, actTotalNetVATDue);

			
			
			System.out.println("*****************************************checkVATSummaryReports***************************************");
			
			System.out.println(actSalesheaderList);
			System.out.println(expSalesheaderList);
			
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			System.out.println(actPurchaseheaderList);
			System.out.println(expPurchaseheaderList);
			
			System.out.println(actPurchaseRow1List);
			System.out.println(expPurchaseRow1List);
			
			System.out.println(actPurchaseRow2List);
			System.out.println(expPurchaseRow2List);
			
			System.out.println(actPurchaseRow3List);
			System.out.println(expPurchaseRow3List);
			
			
			System.out.println(actPurchaseRow4List);
			System.out.println(expPurchaseRow4List);
			
			
			System.out.println(actPurchaseRow5List);
			System.out.println(expPurchaseRow5List);
			
			
			System.out.println(actPurchaseRow6List);
			System.out.println(expPurchaseRow6List);
			
			
			System.out.println(actPurchaseRow7List);
			System.out.println(expPurchaseRow7List);
			
			
			System.out.println(actPurchaseRow8List);
			System.out.println(expPurchaseRow8List);
			
			
			System.out.println(actPurchaseRow9List);
			System.out.println(expPurchaseRow9List);
			
			System.out.println(actPurchaseRow10List);
			System.out.println(expPurchaseRow10List);
			
			System.out.println(actPurchaseRow11List);
			System.out.println(expPurchaseRow11List);
			
			System.out.println(actPurchaseRow12List);
			System.out.println(expPurchaseRow12List);
			
			System.out.println(actPurchaseRow13List);
			System.out.println(expPurchaseRow13List);
			
			
			System.out.println(actPurchaseRow1List);
			System.out.println(expPurchaseRow1List);
			
			
			System.out.println(actTotalPurchase);
			System.out.println(expTotalPurchase);
			
			System.out.println(actTotalVATPurchase);
			System.out.println(expTotalVATPurchase);
			
			
			System.out.println(actTotalSales);
			System.out.println(expTotalSales);
			
			System.out.println(actTotalVATSales);
			System.out.println(expTotalVATSales);
			
			
			System.out.println(actTotalVATDue);
			System.out.println(expTotalVATDue);
			
			System.out.println(actCorrection);
			System.out.println(expCorrection);
			
			System.out.println(actTotalVATCredit);
			System.out.println(expTotalVATCredit);
			
			System.out.println(actTotalNetVATDue);
			System.out.println(actTotalNetVATDue);
			
			
			if(actTotalPurchase.equalsIgnoreCase(expTotalPurchase)&&actTotalVATPurchase.equalsIgnoreCase(expTotalVATPurchase)
					&&actTotalSales.equalsIgnoreCase(expTotalSales)&&actTotalVATSales.equalsIgnoreCase(expTotalVATSales)
					&&actTotalVATDue.equalsIgnoreCase(expTotalVATDue)&&actCorrection.equalsIgnoreCase(expCorrection)
					&&actTotalVATCredit.equalsIgnoreCase(expTotalVATCredit)&&actTotalNetVATDue.equalsIgnoreCase(expTotalNetVATDue))
			{
				excelReader.setCellData(xlfile, xlSheetName, 1471, 8, resPass);
				return true;
			}
			else
			{
				excelReader.setCellData(xlfile, xlSheetName, 1471, 8, resFail);
				return false;
			}
					
		}
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[5]/ul/li[11]")
		public static WebElement chequeDiscountingMenu;
		
		@FindBy(xpath="//*[@id='optnCtrlCheqDisBank']")
		public static WebElement chequeDiscountingBankDropdown;
		
		@FindBy(xpath="//*[@id='btnFilterPDCDetails']")
		public static WebElement cd_LoadBtn;
		
		@FindBy(xpath="(//*[@id='ChequeDiscountingTable']//tr[1])[7]//td")
		public static List<WebElement> cd_ReportRow1;
		
		
		@FindBy(xpath="(//*[@id='ChequeDiscountingTable']//tr[1])[7]//td[1]")
		public static WebElement cd_Select1stRow_1stColumn;
		
	
		
		DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
	    Calendar cal = Calendar.getInstance();
	    String DateField = format.format(cal.getTime());
	  //  System.err.println("Current Date : "+DateField);
	    
		public boolean checkChequeDiscountingReportforBankAccountasBank() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountingMenu));
			chequeDiscountingMenu.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountingBankDropdown));
			chequeDiscountingBankDropdown.click();
			chequeDiscountingBankDropdown.sendKeys("Bank");
			Thread.sleep(1000);
			chequeDiscountingBankDropdown.sendKeys(Keys.TAB);
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_Select1stRow_1stColumn));
			
			int reportsByWarehouseRow1ListCount = cd_ReportRow1.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=3 )
				{
				String data = cd_ReportRow1.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[VAT INPUT, "+DateField+", PDR1, 0.29, 0.00, 0.00, Bank, 0, "+DateField+", ]";
            
			System.out.println(actRow1List );
			System.out.println(expRow1List );
			
			if(actRow1List.equalsIgnoreCase(expRow1List))
			{
				return true;
			}
			else
			{
				return false;
			}
			
			
		}
		//////
		
		public boolean checkChequeDiscountingReportforBankAccountasHDFC() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cashAndBankBooksMenu));
			cashAndBankBooksMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountingMenu));
			chequeDiscountingMenu.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(chequeDiscountingBankDropdown));
			chequeDiscountingBankDropdown.click();
			chequeDiscountingBankDropdown.sendKeys("HDFC");
			Thread.sleep(1000);
			chequeDiscountingBankDropdown.sendKeys(Keys.TAB);
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(cd_Select1stRow_1stColumn));
			
			int reportsByWarehouseRow1ListCount = cd_ReportRow1.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsByWarehouseRow1ListCount;i++)
			{
				if(i!=3 )
				{
				String data = cd_ReportRow1.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				}
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[VAT INPUT, "+DateField+", PDR2, 0.29, 0.00, 0.00, HDFC, 0, "+DateField+", ]";
            
			System.out.println(actRow1List );
			System.out.println(expRow1List );
			if(actRow1List.equalsIgnoreCase(expRow1List))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}
	//////
		
		
		@FindBy(xpath="//*[@id='navigation_menu']/li[2]/ul/li[4]/ul/li[16]")
		public static WebElement masterAuthorizationReportMenu;
		
		@FindBy(xpath="//*[@id='RITCombobox__1']")
		public static WebElement masterTypeDropdown;
		
		@FindBy(xpath="//*[@id='trRender_0']//td")
		public static List<WebElement> maReport_1stRow; 
		
		@FindBy(xpath="//*[@id='tblBodyReportRender_0a56fe90-f4f7-4dec-be17-8e07684817d6']//tr[1]//td[1]")
		public static WebElement ma_1stRow1stColumn; 
		
		@FindBy(xpath="//*[@id='trRender_1']//td")
		public static List<WebElement> maReport_2ndRow; 
		
		
		
		
		public boolean checkMasterAuthorizationReportforMasterTypeasWarehouse() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
		
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterAuthorizationReportMenu));
			masterAuthorizationReportMenu.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(masterTypeDropdown));
			masterTypeDropdown.click();
			Select s1=new Select(masterTypeDropdown);
			s1.selectByValue("4");
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			Thread.sleep(2000);
			
			//getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ma_1stRow1stColumn));
			
			int reportsByWarehouseRow1ListCount = maReport_1stRow.size();
			System.out.println(reportsByWarehouseRow1ListCount);
			
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				
				String data = maReport_1stRow.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			
				
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[WareHouseForAuth, WHA, UserAllOptionsST, "+DateField+", Approved, MasterAuth]";
            
			System.out.println(actRow1List );
			System.out.println(expRow1List );
			
			int reportsByWarehouseRow2ListCount = maReport_2ndRow.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				
				String data = maReport_2ndRow.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
				
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[WarehouseAuth, WH5, UserAllOptionsST,  "+DateField+", Approved, fd]";
            
			System.out.println(actRow2List );
			System.out.println(expRow2List );
			
			if(actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
			
		}	
	////	
		@FindBy(xpath="//*[@id='dvReportInputs']/div[1]/div/label/span")
		public static WebElement ld_SelectAllChkBox;
		
		@FindBy(xpath="//*[@id='cmbColumn']")
		public static WebElement ld_RefineLookinDropdown;
		
		@FindBy(xpath="//*[@id='SelectOperator']")
		public static WebElement ld_RefineOperatorDropdown;
		
		@FindBy(xpath="//*[@id='idDisplay']//option")
		public static List<WebElement> ld_RefineData;
		
		@FindBy(xpath="//*[@id='idDisplay']")
		public static WebElement ld_SelectRefineData;
		
		public boolean checkFinancialLedgerDetailsReportwithFilterOptionasRefine() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getDriver().navigate().refresh();
			Thread.sleep(2000);		
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsReportsMenu));
			financialsReportsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ledger));
			ledgerDetails.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_SelectAllChkBox));
			ld_SelectAllChkBox.click();
			Thread.sleep(2000);
			
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			sl_DateOptionDropdown.click();
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByValue("1");
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_RefineBtn));
			report_RefineBtn.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineLookinDropdown));
			ld_RefineLookinDropdown.click();
			
			Select s2=new Select(ld_RefineLookinDropdown);
			s2.selectByValue("3");
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineOperatorDropdown));
			ld_RefineOperatorDropdown.click();
			
			Select s3=new Select(ld_RefineOperatorDropdown);
			s3.selectByValue("0");
			Thread.sleep(2000);
					
			
			
			int reportsByWarehouseRow1ListCount = ld_RefineData.size();
			System.out.println(reportsByWarehouseRow1ListCount);
			
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				
				String data = ld_RefineData.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				
				
				
				
			}
			String actList = reportsByWarehouseRow1ListArray.toString();
			String expList = "[Customer A, Vendor B, HDFC]";
			
			System.out.println(actList);
			
			System.out.println(expList);
			
			if(actList.equalsIgnoreCase(expList))
			{
			return true;
			}
			else
			{
				return false;
			}
			
			
			
			
		}
		
		/////
		
		public boolean checkTrailBalanceReportinFinalAccountswithFilterOptionasRefineforParticulars() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				
			getDriver().navigate().refresh();
			Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(finalAccountsMenu));
			finalAccountsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(trailBalanceMenu));
			trailBalanceMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fa_OkBtn));
			fa_OkBtn.click();
			Thread.sleep(1000);
					
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_RefineBtn));
			report_RefineBtn.click();
			Thread.sleep(1000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineLookinDropdown));
			ld_RefineLookinDropdown.click();
			
			Select s2=new Select(ld_RefineLookinDropdown);
			s2.selectByValue("1");
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineOperatorDropdown));
			ld_RefineOperatorDropdown.click();
			
			Select s3=new Select(ld_RefineOperatorDropdown);
			s3.selectByValue("0");
			Thread.sleep(2000);
					
			
			
			int reportsByWarehouseRow1ListCount = ld_RefineData.size();
			System.out.println(reportsByWarehouseRow1ListCount);
			
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				
				String data = ld_RefineData.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				
				
				
				
			}
			String actList = reportsByWarehouseRow1ListArray.toString();
			String expList = "[HDFC, ASSETS, Current Assets, Cash & bank, Bank, Accounts Receivable, Customer A, CONTROL ACCOUNTS, Opening Balances Control A/C, REVENUE, SALES, Sales - Computers, LIABILITIES, Trade Payable, Vendor A, Vendor B, COGS POSTING ACC]";
			
			System.out.println(actList);
			
			System.out.println(expList);
			
			if(actList.equalsIgnoreCase(expList))
			{
			return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		///Finalcials-->ReceivableandPaymentsMenu--CustomerDetails--CustomerStatements
		
		
		public boolean checkCustomerDetailsReportinReceivablePayableMenuwithFilterOptionasRefineforVouchers() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				
			
			 getDriver().navigate().refresh();
			 Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivablePayableMenu));
			receivablePayableMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rp_CustomerDetailMenu));
			rp_CustomerDetailMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rp_CustomerStatements));
			rp_CustomerStatements.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			Thread.sleep(1000);
			
			
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_RefineBtn));
			report_RefineBtn.click();
			Thread.sleep(1000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineLookinDropdown));
			ld_RefineLookinDropdown.click();
			
			Select s2=new Select(ld_RefineLookinDropdown);
			s2.selectByValue("1");
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineOperatorDropdown));
			ld_RefineOperatorDropdown.click();
			
			Select s3=new Select(ld_RefineOperatorDropdown);
			s3.selectByValue("0");
			Thread.sleep(2000);
					
			
			
			int reportsByWarehouseRow1ListCount = ld_RefineData.size();
			System.out.println(reportsByWarehouseRow1ListCount);
			
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				
				String data = ld_RefineData.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				
				
				
				
			}
			String actList = reportsByWarehouseRow1ListArray.toString();
			String expList = "[Customer A 122-001, NDT50:1, NDT44:1, NDT50:4, NDT50:5, NDT50:6, NDT50:7, SalRet:1, Rct:1, NDT46:2, Pmt:1, Grand Total]";
			
			System.out.println(actList);
			
			System.out.println(expList);
			
			if(actList.equalsIgnoreCase(expList))
			{
			return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		public boolean checkVendorSummaryReportinReceivablePayableMenuwithFilterOptionasRefineforAccount() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
				
			
			 getDriver().navigate().refresh();
			 Thread.sleep(2000);
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(receivablePayableMenu));
			receivablePayableMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rp_VendorSummaryMenu));
			rp_VendorSummaryMenu.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(rp_VendorAgeingSummary));
			rp_VendorAgeingSummary.click();
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByIndex(1);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			Thread.sleep(1000);
			
			
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterExpandBtn));
			report_FilterExpandBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_RefineBtn));
			report_RefineBtn.click();
			Thread.sleep(1000);
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineLookinDropdown));
			ld_RefineLookinDropdown.click();
			
			Select s2=new Select(ld_RefineLookinDropdown);
			s2.selectByValue("1");
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ld_RefineOperatorDropdown));
			ld_RefineOperatorDropdown.click();
			
			Select s3=new Select(ld_RefineOperatorDropdown);
			s3.selectByValue("0");
			Thread.sleep(2000);
					
			
			
			int reportsByWarehouseRow1ListCount = ld_RefineData.size();
			System.out.println(reportsByWarehouseRow1ListCount);
			
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=0;i<reportsByWarehouseRow1ListCount;i++)
			{
				
				String data = ld_RefineData.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
				
				
				
				
			}
			String actList = reportsByWarehouseRow1ListArray.toString();
			String expList = "[Vendor A, Vendor B, Grand Total]";
			
			System.out.println(actList);
			
			System.out.println(expList);
			
			if(actList.equalsIgnoreCase(expList))
			{
			return true;
			}
			else
			{
				return false;
			}
		}
		
		
		public void LogoutandLoginwithSU() throws InterruptedException
		{
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplayLogo));
			userNameDisplayLogo.click();
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
			
			Thread.sleep(3000);
			
			 getDriver().navigate().refresh();
			 Thread.sleep(1999);
			 
			// getDriver().navigate().refresh();
			 //Thread.sleep(1999);

			LoginPage lp=new LoginPage(getDriver()); 

			String unamelt="su";
					      
			String pawslt="su";
					      
			LoginPage.enterUserName(unamelt);

			Thread.sleep(1000);
					
			LoginPage.enterPassword(pawslt);
		
			 Select oSelect = new Select(companyDropDownList);
			 //oSelect.selectByVisibleText(Compname); 
			 oSelect.selectByValue("36");
			
			 LoginPage.clickOnSignInBtn();
			 
			 Thread.sleep(2000);
			 LoginPage.reLogin("su", "su", "Automation Company");
			 
			
			 
			
			
		}
		
		public Focus10FinancialsReportsPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}

	
	
}
